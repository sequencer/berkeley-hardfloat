circuit ValExec_RecFNToUIN :
  module RecFNToIN :
    output io : { flip in : UInt<17>, flip roundingMode : UInt<3>, flip signedOut : UInt<1>, out : UInt<32>, intExceptionFlags : UInt<3>}
  
    io is invalid
    node _T = bits(io.in, 15, 10) @[rawFloatFromRecFN.scala 50:21]
    node _T_1 = bits(_T, 5, 3) @[rawFloatFromRecFN.scala 51:29]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[rawFloatFromRecFN.scala 51:54]
    node _T_3 = bits(_T, 5, 4) @[rawFloatFromRecFN.scala 52:29]
    node _T_4 = eq(_T_3, UInt<2>("h3")) @[rawFloatFromRecFN.scala 52:54]
    wire rawIn : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<7>, sig : UInt<12>} @[rawFloatFromRecFN.scala 54:23]
    rawIn is invalid @[rawFloatFromRecFN.scala 54:23]
    node _T_5 = bits(_T, 3, 3) @[rawFloatFromRecFN.scala 55:41]
    node _T_6 = and(_T_4, _T_5) @[rawFloatFromRecFN.scala 55:33]
    rawIn.isNaN <= _T_6 @[rawFloatFromRecFN.scala 55:20]
    node _T_7 = bits(_T, 3, 3) @[rawFloatFromRecFN.scala 56:41]
    node _T_8 = eq(_T_7, UInt<1>("h0")) @[rawFloatFromRecFN.scala 56:36]
    node _T_9 = and(_T_4, _T_8) @[rawFloatFromRecFN.scala 56:33]
    rawIn.isInf <= _T_9 @[rawFloatFromRecFN.scala 56:20]
    rawIn.isZero <= _T_2 @[rawFloatFromRecFN.scala 57:20]
    node _T_10 = bits(io.in, 16, 16) @[rawFloatFromRecFN.scala 58:25]
    rawIn.sign <= _T_10 @[rawFloatFromRecFN.scala 58:20]
    node _T_11 = cvt(_T) @[rawFloatFromRecFN.scala 59:27]
    rawIn.sExp <= _T_11 @[rawFloatFromRecFN.scala 59:20]
    node _T_12 = eq(_T_2, UInt<1>("h0")) @[rawFloatFromRecFN.scala 60:39]
    node _T_13 = bits(io.in, 9, 0) @[rawFloatFromRecFN.scala 60:51]
    node _T_14 = cat(UInt<1>("h0"), _T_12) @[Cat.scala 29:58]
    node _T_15 = cat(_T_14, _T_13) @[Cat.scala 29:58]
    rawIn.sig <= _T_15 @[rawFloatFromRecFN.scala 60:20]
    node magGeOne = bits(rawIn.sExp, 5, 5) @[RecFNToIN.scala 58:30]
    node posExp = bits(rawIn.sExp, 4, 0) @[RecFNToIN.scala 59:28]
    node _T_16 = eq(magGeOne, UInt<1>("h0")) @[RecFNToIN.scala 60:27]
    node _T_17 = andr(posExp) @[RecFNToIN.scala 60:47]
    node magJustBelowOne = and(_T_16, _T_17) @[RecFNToIN.scala 60:37]
    node roundingMode_near_even = eq(io.roundingMode, UInt<3>("h0")) @[RecFNToIN.scala 64:53]
    node roundingMode_minMag = eq(io.roundingMode, UInt<3>("h1")) @[RecFNToIN.scala 65:53]
    node roundingMode_min = eq(io.roundingMode, UInt<3>("h2")) @[RecFNToIN.scala 66:53]
    node roundingMode_max = eq(io.roundingMode, UInt<3>("h3")) @[RecFNToIN.scala 67:53]
    node roundingMode_near_maxMag = eq(io.roundingMode, UInt<3>("h4")) @[RecFNToIN.scala 68:53]
    node roundingMode_odd = eq(io.roundingMode, UInt<3>("h6")) @[RecFNToIN.scala 69:53]
    node _T_18 = bits(rawIn.sig, 9, 0) @[RecFNToIN.scala 80:32]
    node _T_19 = cat(magGeOne, _T_18) @[Cat.scala 29:58]
    node _T_20 = bits(rawIn.sExp, 3, 0) @[RecFNToIN.scala 82:27]
    node _T_21 = mux(magGeOne, _T_20, UInt<1>("h0")) @[RecFNToIN.scala 81:16]
    node shiftedSig = dshl(_T_19, _T_21) @[RecFNToIN.scala 80:50]
    node _T_22 = shr(shiftedSig, 9) @[RecFNToIN.scala 86:23]
    node _T_23 = bits(shiftedSig, 8, 0) @[RecFNToIN.scala 86:51]
    node _T_24 = orr(_T_23) @[RecFNToIN.scala 86:69]
    node alignedSig = cat(_T_22, _T_24) @[Cat.scala 29:58]
    node _T_25 = shr(alignedSig, 2) @[RecFNToIN.scala 87:54]
    node unroundedInt = or(UInt<32>("h0"), _T_25) @[RecFNToIN.scala 87:42]
    node _T_26 = bits(alignedSig, 1, 0) @[RecFNToIN.scala 89:50]
    node _T_27 = orr(_T_26) @[RecFNToIN.scala 89:57]
    node _T_28 = eq(rawIn.isZero, UInt<1>("h0")) @[RecFNToIN.scala 89:62]
    node common_inexact = mux(magGeOne, _T_27, _T_28) @[RecFNToIN.scala 89:29]
    node _T_29 = bits(alignedSig, 2, 1) @[RecFNToIN.scala 91:39]
    node _T_30 = andr(_T_29) @[RecFNToIN.scala 91:46]
    node _T_31 = bits(alignedSig, 1, 0) @[RecFNToIN.scala 91:64]
    node _T_32 = andr(_T_31) @[RecFNToIN.scala 91:71]
    node _T_33 = or(_T_30, _T_32) @[RecFNToIN.scala 91:51]
    node _T_34 = and(magGeOne, _T_33) @[RecFNToIN.scala 91:25]
    node _T_35 = bits(alignedSig, 1, 0) @[RecFNToIN.scala 92:39]
    node _T_36 = orr(_T_35) @[RecFNToIN.scala 92:46]
    node _T_37 = and(magJustBelowOne, _T_36) @[RecFNToIN.scala 92:26]
    node roundIncr_near_even = or(_T_34, _T_37) @[RecFNToIN.scala 91:78]
    node _T_38 = bits(alignedSig, 1, 1) @[RecFNToIN.scala 93:56]
    node _T_39 = and(magGeOne, _T_38) @[RecFNToIN.scala 93:43]
    node roundIncr_near_maxMag = or(_T_39, magJustBelowOne) @[RecFNToIN.scala 93:61]
    node _T_40 = and(roundingMode_near_even, roundIncr_near_even) @[RecFNToIN.scala 95:35]
    node _T_41 = and(roundingMode_near_maxMag, roundIncr_near_maxMag) @[RecFNToIN.scala 96:35]
    node _T_42 = or(_T_40, _T_41) @[RecFNToIN.scala 95:61]
    node _T_43 = or(roundingMode_min, roundingMode_odd) @[RecFNToIN.scala 97:28]
    node _T_44 = and(rawIn.sign, common_inexact) @[RecFNToIN.scala 98:26]
    node _T_45 = and(_T_43, _T_44) @[RecFNToIN.scala 97:49]
    node _T_46 = or(_T_42, _T_45) @[RecFNToIN.scala 96:61]
    node _T_47 = eq(rawIn.sign, UInt<1>("h0")) @[RecFNToIN.scala 99:31]
    node _T_48 = and(_T_47, common_inexact) @[RecFNToIN.scala 99:43]
    node _T_49 = and(roundingMode_max, _T_48) @[RecFNToIN.scala 99:27]
    node roundIncr = or(_T_46, _T_49) @[RecFNToIN.scala 98:46]
    node _T_50 = not(unroundedInt) @[RecFNToIN.scala 100:45]
    node complUnroundedInt = mux(rawIn.sign, _T_50, unroundedInt) @[RecFNToIN.scala 100:32]
    node _T_51 = xor(roundIncr, rawIn.sign) @[RecFNToIN.scala 102:23]
    node _T_52 = add(complUnroundedInt, UInt<1>("h1")) @[RecFNToIN.scala 103:31]
    node _T_53 = tail(_T_52, 1) @[RecFNToIN.scala 103:31]
    node _T_54 = mux(_T_51, _T_53, complUnroundedInt) @[RecFNToIN.scala 102:12]
    node _T_55 = and(roundingMode_odd, common_inexact) @[RecFNToIN.scala 105:31]
    node roundedInt = or(_T_54, _T_55) @[RecFNToIN.scala 105:11]
    node magGeOne_atOverflowEdge = eq(posExp, UInt<5>("h1f")) @[RecFNToIN.scala 107:43]
    node _T_56 = bits(unroundedInt, 29, 0) @[RecFNToIN.scala 110:38]
    node _T_57 = andr(_T_56) @[RecFNToIN.scala 110:56]
    node roundCarryBut2 = and(_T_57, roundIncr) @[RecFNToIN.scala 110:61]
    node _T_58 = geq(posExp, UInt<6>("h20")) @[RecFNToIN.scala 113:21]
    node _T_59 = bits(unroundedInt, 30, 0) @[RecFNToIN.scala 117:42]
    node _T_60 = orr(_T_59) @[RecFNToIN.scala 117:60]
    node _T_61 = or(_T_60, roundIncr) @[RecFNToIN.scala 117:64]
    node _T_62 = and(magGeOne_atOverflowEdge, _T_61) @[RecFNToIN.scala 116:49]
    node _T_63 = eq(posExp, UInt<5>("h1e")) @[RecFNToIN.scala 119:38]
    node _T_64 = and(_T_63, roundCarryBut2) @[RecFNToIN.scala 119:62]
    node _T_65 = or(magGeOne_atOverflowEdge, _T_64) @[RecFNToIN.scala 118:49]
    node _T_66 = mux(rawIn.sign, _T_62, _T_65) @[RecFNToIN.scala 115:24]
    node _T_67 = bits(unroundedInt, 30, 30) @[RecFNToIN.scala 123:42]
    node _T_68 = and(magGeOne_atOverflowEdge, _T_67) @[RecFNToIN.scala 122:50]
    node _T_69 = and(_T_68, roundCarryBut2) @[RecFNToIN.scala 123:57]
    node _T_70 = or(rawIn.sign, _T_69) @[RecFNToIN.scala 121:32]
    node _T_71 = mux(io.signedOut, _T_66, _T_70) @[RecFNToIN.scala 114:20]
    node _T_72 = or(_T_58, _T_71) @[RecFNToIN.scala 113:40]
    node _T_73 = eq(io.signedOut, UInt<1>("h0")) @[RecFNToIN.scala 125:13]
    node _T_74 = and(_T_73, rawIn.sign) @[RecFNToIN.scala 125:27]
    node _T_75 = and(_T_74, roundIncr) @[RecFNToIN.scala 125:41]
    node common_overflow = mux(magGeOne, _T_72, _T_75) @[RecFNToIN.scala 112:12]
    node invalidExc = or(rawIn.isNaN, rawIn.isInf) @[RecFNToIN.scala 130:34]
    node _T_76 = eq(invalidExc, UInt<1>("h0")) @[RecFNToIN.scala 131:20]
    node overflow = and(_T_76, common_overflow) @[RecFNToIN.scala 131:32]
    node _T_77 = eq(invalidExc, UInt<1>("h0")) @[RecFNToIN.scala 132:20]
    node _T_78 = eq(common_overflow, UInt<1>("h0")) @[RecFNToIN.scala 132:35]
    node _T_79 = and(_T_77, _T_78) @[RecFNToIN.scala 132:32]
    node inexact = and(_T_79, common_inexact) @[RecFNToIN.scala 132:52]
    node _T_80 = eq(rawIn.isNaN, UInt<1>("h0")) @[RecFNToIN.scala 134:19]
    node excSign = and(_T_80, rawIn.sign) @[RecFNToIN.scala 134:32]
    node _T_81 = eq(io.signedOut, excSign) @[RecFNToIN.scala 136:27]
    node _T_82 = mux(_T_81, UInt<32>("h80000000"), UInt<1>("h0")) @[RecFNToIN.scala 136:12]
    node _T_83 = eq(excSign, UInt<1>("h0")) @[RecFNToIN.scala 140:13]
    node _T_84 = mux(_T_83, UInt<31>("h7fffffff"), UInt<1>("h0")) @[RecFNToIN.scala 140:12]
    node excOut = or(_T_82, _T_84) @[RecFNToIN.scala 139:11]
    node _T_85 = or(invalidExc, common_overflow) @[RecFNToIN.scala 142:30]
    node _T_86 = mux(_T_85, excOut, roundedInt) @[RecFNToIN.scala 142:18]
    io.out <= _T_86 @[RecFNToIN.scala 142:12]
    node _T_87 = cat(invalidExc, overflow) @[Cat.scala 29:58]
    node _T_88 = cat(_T_87, inexact) @[Cat.scala 29:58]
    io.intExceptionFlags <= _T_88 @[RecFNToIN.scala 143:26]

  module ValExec_RecFNToUIN :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip in : UInt<16>, flip roundingMode : UInt<3>, expected : { flip out : UInt<32>, flip exceptionFlags : UInt<5>}, actual : { out : UInt<32>, exceptionFlags : UInt<5>}, check : UInt<1>, pass : UInt<1>}
  
    clock is invalid
    reset is invalid
    io is invalid
    inst recFNToIN of RecFNToIN @[ValExec_RecFNToIN.scala 65:27]
    recFNToIN.io is invalid
    node _T = bits(io.in, 15, 15) @[rawFloatFromFN.scala 46:22]
    node _T_1 = bits(io.in, 14, 10) @[rawFloatFromFN.scala 47:23]
    node _T_2 = bits(io.in, 9, 0) @[rawFloatFromFN.scala 48:25]
    node _T_3 = eq(_T_1, UInt<1>("h0")) @[rawFloatFromFN.scala 50:34]
    node _T_4 = eq(_T_2, UInt<1>("h0")) @[rawFloatFromFN.scala 51:38]
    node _T_5 = bits(_T_2, 0, 0) @[primitives.scala 92:52]
    node _T_6 = bits(_T_2, 1, 1) @[primitives.scala 92:52]
    node _T_7 = bits(_T_2, 2, 2) @[primitives.scala 92:52]
    node _T_8 = bits(_T_2, 3, 3) @[primitives.scala 92:52]
    node _T_9 = bits(_T_2, 4, 4) @[primitives.scala 92:52]
    node _T_10 = bits(_T_2, 5, 5) @[primitives.scala 92:52]
    node _T_11 = bits(_T_2, 6, 6) @[primitives.scala 92:52]
    node _T_12 = bits(_T_2, 7, 7) @[primitives.scala 92:52]
    node _T_13 = bits(_T_2, 8, 8) @[primitives.scala 92:52]
    node _T_14 = bits(_T_2, 9, 9) @[primitives.scala 92:52]
    node _T_15 = mux(_T_6, UInt<4>("h8"), UInt<4>("h9")) @[Mux.scala 47:69]
    node _T_16 = mux(_T_7, UInt<3>("h7"), _T_15) @[Mux.scala 47:69]
    node _T_17 = mux(_T_8, UInt<3>("h6"), _T_16) @[Mux.scala 47:69]
    node _T_18 = mux(_T_9, UInt<3>("h5"), _T_17) @[Mux.scala 47:69]
    node _T_19 = mux(_T_10, UInt<3>("h4"), _T_18) @[Mux.scala 47:69]
    node _T_20 = mux(_T_11, UInt<2>("h3"), _T_19) @[Mux.scala 47:69]
    node _T_21 = mux(_T_12, UInt<2>("h2"), _T_20) @[Mux.scala 47:69]
    node _T_22 = mux(_T_13, UInt<1>("h1"), _T_21) @[Mux.scala 47:69]
    node _T_23 = mux(_T_14, UInt<1>("h0"), _T_22) @[Mux.scala 47:69]
    node _T_24 = dshl(_T_2, _T_23) @[rawFloatFromFN.scala 54:36]
    node _T_25 = bits(_T_24, 8, 0) @[rawFloatFromFN.scala 54:47]
    node _T_26 = shl(_T_25, 1) @[rawFloatFromFN.scala 54:64]
    node _T_27 = xor(_T_23, UInt<6>("h3f")) @[rawFloatFromFN.scala 57:26]
    node _T_28 = mux(_T_3, _T_27, _T_1) @[rawFloatFromFN.scala 56:16]
    node _T_29 = mux(_T_3, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 60:27]
    node _T_30 = or(UInt<5>("h10"), _T_29) @[rawFloatFromFN.scala 60:22]
    node _T_31 = add(_T_28, _T_30) @[rawFloatFromFN.scala 59:15]
    node _T_32 = tail(_T_31, 1) @[rawFloatFromFN.scala 59:15]
    node _T_33 = and(_T_3, _T_4) @[rawFloatFromFN.scala 62:34]
    node _T_34 = bits(_T_32, 5, 4) @[rawFloatFromFN.scala 63:37]
    node _T_35 = eq(_T_34, UInt<2>("h3")) @[rawFloatFromFN.scala 63:62]
    wire _T_36 : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<7>, sig : UInt<12>} @[rawFloatFromFN.scala 65:23]
    _T_36 is invalid @[rawFloatFromFN.scala 65:23]
    node _T_37 = eq(_T_4, UInt<1>("h0")) @[rawFloatFromFN.scala 66:36]
    node _T_38 = and(_T_35, _T_37) @[rawFloatFromFN.scala 66:33]
    _T_36.isNaN <= _T_38 @[rawFloatFromFN.scala 66:20]
    node _T_39 = and(_T_35, _T_4) @[rawFloatFromFN.scala 67:33]
    _T_36.isInf <= _T_39 @[rawFloatFromFN.scala 67:20]
    _T_36.isZero <= _T_33 @[rawFloatFromFN.scala 68:20]
    _T_36.sign <= _T @[rawFloatFromFN.scala 69:20]
    node _T_40 = bits(_T_32, 5, 0) @[rawFloatFromFN.scala 70:34]
    node _T_41 = cvt(_T_40) @[rawFloatFromFN.scala 70:48]
    _T_36.sExp <= _T_41 @[rawFloatFromFN.scala 70:20]
    node _T_42 = eq(_T_33, UInt<1>("h0")) @[rawFloatFromFN.scala 72:29]
    node _T_43 = mux(_T_3, _T_26, _T_2) @[rawFloatFromFN.scala 72:42]
    node _T_44 = cat(UInt<1>("h0"), _T_42) @[Cat.scala 29:58]
    node _T_45 = cat(_T_44, _T_43) @[Cat.scala 29:58]
    _T_36.sig <= _T_45 @[rawFloatFromFN.scala 71:17]
    node _T_46 = bits(_T_36.sExp, 5, 3) @[recFNFromFN.scala 48:53]
    node _T_47 = mux(_T_36.isZero, UInt<3>("h0"), _T_46) @[recFNFromFN.scala 48:16]
    node _T_48 = mux(_T_36.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
    node _T_49 = or(_T_47, _T_48) @[recFNFromFN.scala 48:79]
    node _T_50 = bits(_T_36.sExp, 2, 0) @[recFNFromFN.scala 50:23]
    node _T_51 = bits(_T_36.sig, 9, 0) @[recFNFromFN.scala 51:22]
    node _T_52 = cat(_T_50, _T_51) @[Cat.scala 29:58]
    node _T_53 = cat(_T_36.sign, _T_49) @[Cat.scala 29:58]
    node _T_54 = cat(_T_53, _T_52) @[Cat.scala 29:58]
    recFNToIN.io.in <= _T_54 @[ValExec_RecFNToIN.scala 66:21]
    recFNToIN.io.roundingMode <= io.roundingMode @[ValExec_RecFNToIN.scala 67:31]
    recFNToIN.io.signedOut <= UInt<1>("h0") @[ValExec_RecFNToIN.scala 68:28]
    io.actual.out <= recFNToIN.io.out @[ValExec_RecFNToIN.scala 70:19]
    node _T_55 = bits(recFNToIN.io.intExceptionFlags, 2, 1) @[ValExec_RecFNToIN.scala 72:43]
    node _T_56 = orr(_T_55) @[ValExec_RecFNToIN.scala 72:50]
    node _T_57 = bits(recFNToIN.io.intExceptionFlags, 0, 0) @[ValExec_RecFNToIN.scala 74:43]
    node _T_58 = cat(_T_56, UInt<3>("h0")) @[Cat.scala 29:58]
    node _T_59 = cat(_T_58, _T_57) @[Cat.scala 29:58]
    io.actual.exceptionFlags <= _T_59 @[ValExec_RecFNToIN.scala 71:30]
    io.check <= UInt<1>("h1") @[ValExec_RecFNToIN.scala 77:14]
    node _T_60 = eq(io.actual.out, io.expected.out) @[ValExec_RecFNToIN.scala 79:24]
    node _T_61 = eq(io.actual.exceptionFlags, io.expected.exceptionFlags) @[ValExec_RecFNToIN.scala 80:35]
    node _T_62 = and(_T_60, _T_61) @[ValExec_RecFNToIN.scala 79:45]
    io.pass <= _T_62 @[ValExec_RecFNToIN.scala 78:13]
