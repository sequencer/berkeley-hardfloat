circuit ValExec_DivSqrtRecFN_small_sqrt :
  module DivSqrtRawFN_small :
    input clock : Clock
    input reset : Reset
    output io : { inReady : UInt<1>, flip inValid : UInt<1>, flip sqrtOp : UInt<1>, flip a : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<13>, sig : UInt<54>}, flip b : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<13>, sig : UInt<54>}, flip roundingMode : UInt<3>, rawOutValid_div : UInt<1>, rawOutValid_sqrt : UInt<1>, roundingModeOut : UInt<3>, invalidExc : UInt<1>, infiniteExc : UInt<1>, rawOut : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<13>, sig : UInt<56>}}
  
    reg cycleNum : UInt<56>, clock with :
      reset => (reset, UInt<56>("h1")) @[DivSqrtRecFN_small.scala 223:33]
    reg sqrtOp_Z : UInt<1>, clock with :
      reset => (UInt<1>("h0"), sqrtOp_Z) @[DivSqrtRecFN_small.scala 225:29]
    reg majorExc_Z : UInt<1>, clock with :
      reset => (UInt<1>("h0"), majorExc_Z) @[DivSqrtRecFN_small.scala 226:29]
    reg isNaN_Z : UInt<1>, clock with :
      reset => (UInt<1>("h0"), isNaN_Z) @[DivSqrtRecFN_small.scala 228:29]
    reg isInf_Z : UInt<1>, clock with :
      reset => (UInt<1>("h0"), isInf_Z) @[DivSqrtRecFN_small.scala 229:29]
    reg isZero_Z : UInt<1>, clock with :
      reset => (UInt<1>("h0"), isZero_Z) @[DivSqrtRecFN_small.scala 230:29]
    reg sign_Z : UInt<1>, clock with :
      reset => (UInt<1>("h0"), sign_Z) @[DivSqrtRecFN_small.scala 231:29]
    reg sExp_Z : SInt<13>, clock with :
      reset => (UInt<1>("h0"), sExp_Z) @[DivSqrtRecFN_small.scala 232:29]
    reg fractB_Z : UInt<52>, clock with :
      reset => (UInt<1>("h0"), fractB_Z) @[DivSqrtRecFN_small.scala 233:29]
    reg roundingMode_Z : UInt<3>, clock with :
      reset => (UInt<1>("h0"), roundingMode_Z) @[DivSqrtRecFN_small.scala 234:29]
    reg rem_Z : UInt<55>, clock with :
      reset => (UInt<1>("h0"), rem_Z) @[DivSqrtRecFN_small.scala 240:29]
    reg notZeroRem_Z : UInt<1>, clock with :
      reset => (UInt<1>("h0"), notZeroRem_Z) @[DivSqrtRecFN_small.scala 241:29]
    reg sigX_Z : UInt<55>, clock with :
      reset => (UInt<1>("h0"), sigX_Z) @[DivSqrtRecFN_small.scala 242:29]
    node _T = and(io.a.isZero, io.b.isZero) @[DivSqrtRecFN_small.scala 251:24]
    node _T_1 = and(io.a.isInf, io.b.isInf) @[DivSqrtRecFN_small.scala 251:59]
    node notSigNaNIn_invalidExc_S_div = or(_T, _T_1) @[DivSqrtRecFN_small.scala 251:42]
    node _T_2 = eq(io.a.isNaN, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 253:9]
    node _T_3 = eq(io.a.isZero, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 253:27]
    node _T_4 = and(_T_2, _T_3) @[DivSqrtRecFN_small.scala 253:24]
    node notSigNaNIn_invalidExc_S_sqrt = and(_T_4, io.a.sign) @[DivSqrtRecFN_small.scala 253:43]
    node _T_5 = bits(io.a.sig, 51, 51) @[common.scala 81:56]
    node _T_6 = eq(_T_5, UInt<1>("h0")) @[common.scala 81:49]
    node _T_7 = and(io.a.isNaN, _T_6) @[common.scala 81:46]
    node _T_8 = or(_T_7, notSigNaNIn_invalidExc_S_sqrt) @[DivSqrtRecFN_small.scala 256:38]
    node _T_9 = bits(io.a.sig, 51, 51) @[common.scala 81:56]
    node _T_10 = eq(_T_9, UInt<1>("h0")) @[common.scala 81:49]
    node _T_11 = and(io.a.isNaN, _T_10) @[common.scala 81:46]
    node _T_12 = bits(io.b.sig, 51, 51) @[common.scala 81:56]
    node _T_13 = eq(_T_12, UInt<1>("h0")) @[common.scala 81:49]
    node _T_14 = and(io.b.isNaN, _T_13) @[common.scala 81:46]
    node _T_15 = or(_T_11, _T_14) @[DivSqrtRecFN_small.scala 257:38]
    node _T_16 = or(_T_15, notSigNaNIn_invalidExc_S_div) @[DivSqrtRecFN_small.scala 257:66]
    node _T_17 = eq(io.a.isNaN, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 259:18]
    node _T_18 = eq(io.a.isInf, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 259:36]
    node _T_19 = and(_T_17, _T_18) @[DivSqrtRecFN_small.scala 259:33]
    node _T_20 = and(_T_19, io.b.isZero) @[DivSqrtRecFN_small.scala 259:51]
    node _T_21 = or(_T_16, _T_20) @[DivSqrtRecFN_small.scala 258:46]
    node majorExc_S = mux(io.sqrtOp, _T_8, _T_21) @[DivSqrtRecFN_small.scala 255:12]
    node _T_22 = or(io.a.isNaN, notSigNaNIn_invalidExc_S_sqrt) @[DivSqrtRecFN_small.scala 263:26]
    node _T_23 = or(io.a.isNaN, io.b.isNaN) @[DivSqrtRecFN_small.scala 264:26]
    node _T_24 = or(_T_23, notSigNaNIn_invalidExc_S_div) @[DivSqrtRecFN_small.scala 264:42]
    node isNaN_S = mux(io.sqrtOp, _T_22, _T_24) @[DivSqrtRecFN_small.scala 262:12]
    node _T_25 = or(io.a.isInf, io.b.isZero) @[DivSqrtRecFN_small.scala 266:63]
    node isInf_S = mux(io.sqrtOp, io.a.isInf, _T_25) @[DivSqrtRecFN_small.scala 266:23]
    node _T_26 = or(io.a.isZero, io.b.isInf) @[DivSqrtRecFN_small.scala 267:64]
    node isZero_S = mux(io.sqrtOp, io.a.isZero, _T_26) @[DivSqrtRecFN_small.scala 267:23]
    node _T_27 = eq(io.sqrtOp, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 268:33]
    node _T_28 = and(_T_27, io.b.sign) @[DivSqrtRecFN_small.scala 268:45]
    node sign_S = xor(io.a.sign, _T_28) @[DivSqrtRecFN_small.scala 268:30]
    node _T_29 = or(io.a.isNaN, io.a.isInf) @[DivSqrtRecFN_small.scala 270:39]
    node specialCaseA_S = or(_T_29, io.a.isZero) @[DivSqrtRecFN_small.scala 270:55]
    node _T_30 = or(io.b.isNaN, io.b.isInf) @[DivSqrtRecFN_small.scala 271:39]
    node specialCaseB_S = or(_T_30, io.b.isZero) @[DivSqrtRecFN_small.scala 271:55]
    node _T_31 = eq(specialCaseA_S, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 272:28]
    node _T_32 = eq(specialCaseB_S, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 272:48]
    node normalCase_S_div = and(_T_31, _T_32) @[DivSqrtRecFN_small.scala 272:45]
    node _T_33 = eq(specialCaseA_S, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 273:29]
    node _T_34 = eq(io.a.sign, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 273:49]
    node normalCase_S_sqrt = and(_T_33, _T_34) @[DivSqrtRecFN_small.scala 273:46]
    node normalCase_S = mux(io.sqrtOp, normalCase_S_sqrt, normalCase_S_div) @[DivSqrtRecFN_small.scala 274:27]
    node _T_35 = bits(io.b.sExp, 11, 11) @[DivSqrtRecFN_small.scala 278:28]
    node _T_36 = bits(io.b.sExp, 10, 0) @[DivSqrtRecFN_small.scala 278:52]
    node _T_37 = not(_T_36) @[DivSqrtRecFN_small.scala 278:40]
    node _T_38 = cat(_T_35, _T_37) @[Cat.scala 29:58]
    node _T_39 = asSInt(_T_38) @[DivSqrtRecFN_small.scala 278:71]
    node sExpQuot_S_div = add(io.a.sExp, _T_39) @[DivSqrtRecFN_small.scala 277:21]
    node _T_40 = leq(asSInt(UInt<13>("he00")), sExpQuot_S_div) @[DivSqrtRecFN_small.scala 281:48]
    node _T_41 = bits(sExpQuot_S_div, 12, 9) @[DivSqrtRecFN_small.scala 283:31]
    node _T_42 = mux(_T_40, UInt<3>("h6"), _T_41) @[DivSqrtRecFN_small.scala 281:16]
    node _T_43 = bits(sExpQuot_S_div, 8, 0) @[DivSqrtRecFN_small.scala 285:27]
    node _T_44 = cat(_T_42, _T_43) @[Cat.scala 29:58]
    node sSatExpQuot_S_div = asSInt(_T_44) @[DivSqrtRecFN_small.scala 286:11]
    node _T_45 = bits(io.a.sExp, 0, 0) @[DivSqrtRecFN_small.scala 288:48]
    node _T_46 = eq(_T_45, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 288:35]
    node evenSqrt_S = and(io.sqrtOp, _T_46) @[DivSqrtRecFN_small.scala 288:32]
    node _T_47 = bits(io.a.sExp, 0, 0) @[DivSqrtRecFN_small.scala 289:48]
    node oddSqrt_S = and(io.sqrtOp, _T_47) @[DivSqrtRecFN_small.scala 289:32]
    node idle = bits(cycleNum, 0, 0) @[DivSqrtRecFN_small.scala 293:24]
    node _T_48 = bits(cycleNum, 1, 1) @[DivSqrtRecFN_small.scala 294:35]
    node inReady = or(idle, _T_48) @[DivSqrtRecFN_small.scala 294:24]
    node entering = and(inReady, io.inValid) @[DivSqrtRecFN_small.scala 295:28]
    node entering_normalCase = and(entering, normalCase_S) @[DivSqrtRecFN_small.scala 296:40]
    node _T_49 = bits(cycleNum, 3, 3) @[DivSqrtRecFN_small.scala 298:30]
    node _T_50 = bits(sigX_Z, 54, 54) @[DivSqrtRecFN_small.scala 298:43]
    node skipCycle2 = and(_T_49, _T_50) @[DivSqrtRecFN_small.scala 298:34]
    node _T_51 = eq(idle, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 300:11]
    node _T_52 = or(_T_51, entering) @[DivSqrtRecFN_small.scala 300:18]
    when _T_52 : @[DivSqrtRecFN_small.scala 300:31]
      node _T_53 = eq(normalCase_S, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 302:28]
      node _T_54 = and(entering, _T_53) @[DivSqrtRecFN_small.scala 302:26]
      node _T_55 = mux(_T_54, UInt<2>("h2"), UInt<1>("h0")) @[DivSqrtRecFN_small.scala 302:16]
      node _T_56 = bits(io.a.sExp, 0, 0) @[DivSqrtRecFN_small.scala 305:36]
      node _T_57 = mux(_T_56, UInt<54>("h20000000000000"), UInt<55>("h40000000000000")) @[DivSqrtRecFN_small.scala 305:24]
      node _T_58 = mux(io.sqrtOp, _T_57, UInt<56>("h80000000000000")) @[DivSqrtRecFN_small.scala 304:20]
      node _T_59 = mux(entering_normalCase, _T_58, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 303:16]
      node _T_60 = or(_T_55, _T_59) @[DivSqrtRecFN_small.scala 302:59]
      node _T_61 = eq(entering, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 310:17]
      node _T_62 = eq(skipCycle2, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 310:31]
      node _T_63 = and(_T_61, _T_62) @[DivSqrtRecFN_small.scala 310:28]
      node _T_64 = shr(cycleNum, 1) @[DivSqrtRecFN_small.scala 310:53]
      node _T_65 = mux(_T_63, _T_64, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 310:16]
      node _T_66 = or(_T_60, _T_65) @[DivSqrtRecFN_small.scala 309:15]
      node _T_67 = mux(skipCycle2, UInt<2>("h2"), UInt<1>("h0")) @[DivSqrtRecFN_small.scala 311:16]
      node _T_68 = or(_T_66, _T_67) @[DivSqrtRecFN_small.scala 310:63]
      cycleNum <= _T_68 @[DivSqrtRecFN_small.scala 301:18]
    io.inReady <= inReady @[DivSqrtRecFN_small.scala 314:16]
    when entering : @[DivSqrtRecFN_small.scala 318:21]
      sqrtOp_Z <= io.sqrtOp @[DivSqrtRecFN_small.scala 319:20]
      majorExc_Z <= majorExc_S @[DivSqrtRecFN_small.scala 320:20]
      isNaN_Z <= isNaN_S @[DivSqrtRecFN_small.scala 321:20]
      isInf_Z <= isInf_S @[DivSqrtRecFN_small.scala 322:20]
      isZero_Z <= isZero_S @[DivSqrtRecFN_small.scala 323:20]
      sign_Z <= sign_S @[DivSqrtRecFN_small.scala 324:20]
      node _T_69 = shr(io.a.sExp, 1) @[DivSqrtRecFN_small.scala 327:29]
      node _T_70 = add(_T_69, asSInt(UInt<12>("h400"))) @[DivSqrtRecFN_small.scala 327:34]
      node _T_71 = mux(io.sqrtOp, _T_70, sSatExpQuot_S_div) @[DivSqrtRecFN_small.scala 326:16]
      sExp_Z <= _T_71 @[DivSqrtRecFN_small.scala 325:16]
      roundingMode_Z <= io.roundingMode @[DivSqrtRecFN_small.scala 330:24]
    node _T_72 = eq(io.sqrtOp, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 332:34]
    node _T_73 = and(entering_normalCase, _T_72) @[DivSqrtRecFN_small.scala 332:31]
    when _T_73 : @[DivSqrtRecFN_small.scala 332:47]
      node _T_74 = bits(io.b.sig, 51, 0) @[DivSqrtRecFN_small.scala 333:31]
      fractB_Z <= _T_74 @[DivSqrtRecFN_small.scala 333:18]
    node _T_75 = eq(oddSqrt_S, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 339:24]
    node _T_76 = and(inReady, _T_75) @[DivSqrtRecFN_small.scala 339:21]
    node _T_77 = shl(io.a.sig, 1) @[DivSqrtRecFN_small.scala 339:47]
    node _T_78 = mux(_T_76, _T_77, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 339:12]
    node _T_79 = and(inReady, oddSqrt_S) @[DivSqrtRecFN_small.scala 340:21]
    node _T_80 = bits(io.a.sig, 52, 51) @[DivSqrtRecFN_small.scala 341:27]
    node _T_81 = sub(_T_80, UInt<1>("h1")) @[DivSqrtRecFN_small.scala 341:56]
    node _T_82 = tail(_T_81, 1) @[DivSqrtRecFN_small.scala 341:56]
    node _T_83 = bits(io.a.sig, 50, 0) @[DivSqrtRecFN_small.scala 342:27]
    node _T_84 = shl(_T_83, 3) @[DivSqrtRecFN_small.scala 342:44]
    node _T_85 = cat(_T_82, _T_84) @[Cat.scala 29:58]
    node _T_86 = mux(_T_79, _T_85, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 340:12]
    node _T_87 = or(_T_78, _T_86) @[DivSqrtRecFN_small.scala 339:57]
    node _T_88 = eq(inReady, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 346:13]
    node _T_89 = shl(rem_Z, 1) @[DivSqrtRecFN_small.scala 346:29]
    node _T_90 = mux(_T_88, _T_89, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 346:12]
    node rem = or(_T_87, _T_90) @[DivSqrtRecFN_small.scala 345:11]
    node bitMask = shr(cycleNum, 2) @[DivSqrtRecFN_small.scala 347:27]
    node _T_91 = eq(io.sqrtOp, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 349:24]
    node _T_92 = and(inReady, _T_91) @[DivSqrtRecFN_small.scala 349:21]
    node _T_93 = shl(io.b.sig, 1) @[DivSqrtRecFN_small.scala 349:47]
    node _T_94 = mux(_T_92, _T_93, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 349:12]
    node _T_95 = and(inReady, evenSqrt_S) @[DivSqrtRecFN_small.scala 350:21]
    node _T_96 = mux(_T_95, UInt<54>("h20000000000000"), UInt<1>("h0")) @[DivSqrtRecFN_small.scala 350:12]
    node _T_97 = or(_T_94, _T_96) @[DivSqrtRecFN_small.scala 349:73]
    node _T_98 = and(inReady, oddSqrt_S) @[DivSqrtRecFN_small.scala 351:21]
    node _T_99 = mux(_T_98, UInt<55>("h50000000000000"), UInt<1>("h0")) @[DivSqrtRecFN_small.scala 351:12]
    node _T_100 = or(_T_97, _T_99) @[DivSqrtRecFN_small.scala 350:73]
    node _T_101 = eq(inReady, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 352:13]
    node _T_102 = eq(sqrtOp_Z, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 352:26]
    node _T_103 = and(_T_101, _T_102) @[DivSqrtRecFN_small.scala 352:23]
    node _T_104 = cat(UInt<1>("h1"), fractB_Z) @[Cat.scala 29:58]
    node _T_105 = shl(_T_104, 1) @[DivSqrtRecFN_small.scala 352:56]
    node _T_106 = mux(_T_103, _T_105, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 352:12]
    node _T_107 = or(_T_100, _T_106) @[DivSqrtRecFN_small.scala 351:73]
    node _T_108 = eq(inReady, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 353:13]
    node _T_109 = and(_T_108, sqrtOp_Z) @[DivSqrtRecFN_small.scala 353:23]
    node _T_110 = shl(sigX_Z, 1) @[DivSqrtRecFN_small.scala 353:44]
    node _T_111 = or(_T_110, bitMask) @[DivSqrtRecFN_small.scala 353:48]
    node _T_112 = mux(_T_109, _T_111, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 353:12]
    node trialTerm = or(_T_107, _T_112) @[DivSqrtRecFN_small.scala 352:73]
    node _T_113 = cvt(rem) @[DivSqrtRecFN_small.scala 354:24]
    node _T_114 = cvt(trialTerm) @[DivSqrtRecFN_small.scala 354:41]
    node _T_115 = sub(_T_113, _T_114) @[DivSqrtRecFN_small.scala 354:29]
    node _T_116 = tail(_T_115, 1) @[DivSqrtRecFN_small.scala 354:29]
    node trialRem = asSInt(_T_116) @[DivSqrtRecFN_small.scala 354:29]
    node newBit = leq(asSInt(UInt<1>("h0")), trialRem) @[DivSqrtRecFN_small.scala 355:23]
    node _T_117 = bits(cycleNum, 2, 2) @[DivSqrtRecFN_small.scala 357:41]
    node _T_118 = or(idle, _T_117) @[DivSqrtRecFN_small.scala 357:30]
    node _T_119 = eq(_T_118, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 357:23]
    node _T_120 = or(entering, _T_119) @[DivSqrtRecFN_small.scala 357:20]
    when _T_120 : @[DivSqrtRecFN_small.scala 357:47]
      node _T_121 = asUInt(trialRem) @[DivSqrtRecFN_small.scala 358:39]
      node _T_122 = mux(newBit, _T_121, rem) @[DivSqrtRecFN_small.scala 358:21]
      rem_Z <= _T_122 @[DivSqrtRecFN_small.scala 358:15]
    node _T_123 = eq(inReady, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 360:24]
    node _T_124 = and(_T_123, newBit) @[DivSqrtRecFN_small.scala 360:34]
    node _T_125 = or(entering, _T_124) @[DivSqrtRecFN_small.scala 360:20]
    when _T_125 : @[DivSqrtRecFN_small.scala 360:46]
      node _T_126 = neq(trialRem, asSInt(UInt<1>("h0"))) @[DivSqrtRecFN_small.scala 361:35]
      notZeroRem_Z <= _T_126 @[DivSqrtRecFN_small.scala 361:22]
      node _T_127 = eq(io.sqrtOp, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 363:28]
      node _T_128 = and(inReady, _T_127) @[DivSqrtRecFN_small.scala 363:25]
      node _T_129 = shl(newBit, 54) @[DivSqrtRecFN_small.scala 363:47]
      node _T_130 = mux(_T_128, _T_129, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 363:16]
      node _T_131 = and(inReady, io.sqrtOp) @[DivSqrtRecFN_small.scala 364:25]
      node _T_132 = mux(_T_131, UInt<54>("h20000000000000"), UInt<1>("h0")) @[DivSqrtRecFN_small.scala 364:16]
      node _T_133 = or(_T_130, _T_132) @[DivSqrtRecFN_small.scala 363:71]
      node _T_134 = and(inReady, oddSqrt_S) @[DivSqrtRecFN_small.scala 365:25]
      node _T_135 = shl(newBit, 52) @[DivSqrtRecFN_small.scala 365:47]
      node _T_136 = mux(_T_134, _T_135, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 365:16]
      node _T_137 = or(_T_133, _T_136) @[DivSqrtRecFN_small.scala 364:71]
      node _T_138 = eq(inReady, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 366:17]
      node _T_139 = or(sigX_Z, bitMask) @[DivSqrtRecFN_small.scala 366:48]
      node _T_140 = mux(_T_138, _T_139, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 366:16]
      node _T_141 = or(_T_137, _T_140) @[DivSqrtRecFN_small.scala 365:71]
      sigX_Z <= _T_141 @[DivSqrtRecFN_small.scala 362:16]
    node rawOutValid = bits(cycleNum, 1, 1) @[DivSqrtRecFN_small.scala 371:31]
    node _T_142 = eq(sqrtOp_Z, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 373:43]
    node _T_143 = and(rawOutValid, _T_142) @[DivSqrtRecFN_small.scala 373:40]
    io.rawOutValid_div <= _T_143 @[DivSqrtRecFN_small.scala 373:25]
    node _T_144 = and(rawOutValid, sqrtOp_Z) @[DivSqrtRecFN_small.scala 374:40]
    io.rawOutValid_sqrt <= _T_144 @[DivSqrtRecFN_small.scala 374:25]
    io.roundingModeOut <= roundingMode_Z @[DivSqrtRecFN_small.scala 375:25]
    node _T_145 = and(majorExc_Z, isNaN_Z) @[DivSqrtRecFN_small.scala 376:36]
    io.invalidExc <= _T_145 @[DivSqrtRecFN_small.scala 376:22]
    node _T_146 = eq(isNaN_Z, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 377:39]
    node _T_147 = and(majorExc_Z, _T_146) @[DivSqrtRecFN_small.scala 377:36]
    io.infiniteExc <= _T_147 @[DivSqrtRecFN_small.scala 377:22]
    io.rawOut.isNaN <= isNaN_Z @[DivSqrtRecFN_small.scala 378:22]
    io.rawOut.isInf <= isInf_Z @[DivSqrtRecFN_small.scala 379:22]
    io.rawOut.isZero <= isZero_Z @[DivSqrtRecFN_small.scala 380:22]
    io.rawOut.sign <= sign_Z @[DivSqrtRecFN_small.scala 381:22]
    io.rawOut.sExp <= sExp_Z @[DivSqrtRecFN_small.scala 382:22]
    node _T_148 = shl(sigX_Z, 1) @[DivSqrtRecFN_small.scala 383:31]
    node _T_149 = or(_T_148, notZeroRem_Z) @[DivSqrtRecFN_small.scala 383:35]
    io.rawOut.sig <= _T_149 @[DivSqrtRecFN_small.scala 383:22]

  module DivSqrtRecFNToRaw_small :
    input clock : Clock
    input reset : Reset
    output io : { inReady : UInt<1>, flip inValid : UInt<1>, flip sqrtOp : UInt<1>, flip a : UInt<65>, flip b : UInt<65>, flip roundingMode : UInt<3>, rawOutValid_div : UInt<1>, rawOutValid_sqrt : UInt<1>, roundingModeOut : UInt<3>, invalidExc : UInt<1>, infiniteExc : UInt<1>, rawOut : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<13>, sig : UInt<56>}}
  
    inst divSqrtRawFN of DivSqrtRawFN_small @[DivSqrtRecFN_small.scala 414:15]
    divSqrtRawFN.clock <= clock
    divSqrtRawFN.reset <= reset
    io.inReady <= divSqrtRawFN.io.inReady @[DivSqrtRecFN_small.scala 416:16]
    divSqrtRawFN.io.inValid <= io.inValid @[DivSqrtRecFN_small.scala 417:34]
    divSqrtRawFN.io.sqrtOp <= io.sqrtOp @[DivSqrtRecFN_small.scala 418:34]
    node _T = bits(io.a, 63, 52) @[rawFloatFromRecFN.scala 50:21]
    node _T_1 = bits(_T, 11, 9) @[rawFloatFromRecFN.scala 51:29]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[rawFloatFromRecFN.scala 51:54]
    node _T_3 = bits(_T, 11, 10) @[rawFloatFromRecFN.scala 52:29]
    node _T_4 = eq(_T_3, UInt<2>("h3")) @[rawFloatFromRecFN.scala 52:54]
    wire _T_5 : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<13>, sig : UInt<54>} @[rawFloatFromRecFN.scala 54:23]
    _T_5 is invalid @[rawFloatFromRecFN.scala 54:23]
    node _T_6 = bits(_T, 9, 9) @[rawFloatFromRecFN.scala 55:41]
    node _T_7 = and(_T_4, _T_6) @[rawFloatFromRecFN.scala 55:33]
    _T_5.isNaN <= _T_7 @[rawFloatFromRecFN.scala 55:20]
    node _T_8 = bits(_T, 9, 9) @[rawFloatFromRecFN.scala 56:41]
    node _T_9 = eq(_T_8, UInt<1>("h0")) @[rawFloatFromRecFN.scala 56:36]
    node _T_10 = and(_T_4, _T_9) @[rawFloatFromRecFN.scala 56:33]
    _T_5.isInf <= _T_10 @[rawFloatFromRecFN.scala 56:20]
    _T_5.isZero <= _T_2 @[rawFloatFromRecFN.scala 57:20]
    node _T_11 = bits(io.a, 64, 64) @[rawFloatFromRecFN.scala 58:25]
    _T_5.sign <= _T_11 @[rawFloatFromRecFN.scala 58:20]
    node _T_12 = cvt(_T) @[rawFloatFromRecFN.scala 59:27]
    _T_5.sExp <= _T_12 @[rawFloatFromRecFN.scala 59:20]
    node _T_13 = eq(_T_2, UInt<1>("h0")) @[rawFloatFromRecFN.scala 60:39]
    node _T_14 = bits(io.a, 51, 0) @[rawFloatFromRecFN.scala 60:51]
    node _T_15 = cat(UInt<1>("h0"), _T_13) @[Cat.scala 29:58]
    node _T_16 = cat(_T_15, _T_14) @[Cat.scala 29:58]
    _T_5.sig <= _T_16 @[rawFloatFromRecFN.scala 60:20]
    divSqrtRawFN.io.a.sig <= _T_5.sig @[DivSqrtRecFN_small.scala 419:34]
    divSqrtRawFN.io.a.sExp <= _T_5.sExp @[DivSqrtRecFN_small.scala 419:34]
    divSqrtRawFN.io.a.sign <= _T_5.sign @[DivSqrtRecFN_small.scala 419:34]
    divSqrtRawFN.io.a.isZero <= _T_5.isZero @[DivSqrtRecFN_small.scala 419:34]
    divSqrtRawFN.io.a.isInf <= _T_5.isInf @[DivSqrtRecFN_small.scala 419:34]
    divSqrtRawFN.io.a.isNaN <= _T_5.isNaN @[DivSqrtRecFN_small.scala 419:34]
    node _T_17 = bits(io.b, 63, 52) @[rawFloatFromRecFN.scala 50:21]
    node _T_18 = bits(_T_17, 11, 9) @[rawFloatFromRecFN.scala 51:29]
    node _T_19 = eq(_T_18, UInt<1>("h0")) @[rawFloatFromRecFN.scala 51:54]
    node _T_20 = bits(_T_17, 11, 10) @[rawFloatFromRecFN.scala 52:29]
    node _T_21 = eq(_T_20, UInt<2>("h3")) @[rawFloatFromRecFN.scala 52:54]
    wire _T_22 : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<13>, sig : UInt<54>} @[rawFloatFromRecFN.scala 54:23]
    _T_22 is invalid @[rawFloatFromRecFN.scala 54:23]
    node _T_23 = bits(_T_17, 9, 9) @[rawFloatFromRecFN.scala 55:41]
    node _T_24 = and(_T_21, _T_23) @[rawFloatFromRecFN.scala 55:33]
    _T_22.isNaN <= _T_24 @[rawFloatFromRecFN.scala 55:20]
    node _T_25 = bits(_T_17, 9, 9) @[rawFloatFromRecFN.scala 56:41]
    node _T_26 = eq(_T_25, UInt<1>("h0")) @[rawFloatFromRecFN.scala 56:36]
    node _T_27 = and(_T_21, _T_26) @[rawFloatFromRecFN.scala 56:33]
    _T_22.isInf <= _T_27 @[rawFloatFromRecFN.scala 56:20]
    _T_22.isZero <= _T_19 @[rawFloatFromRecFN.scala 57:20]
    node _T_28 = bits(io.b, 64, 64) @[rawFloatFromRecFN.scala 58:25]
    _T_22.sign <= _T_28 @[rawFloatFromRecFN.scala 58:20]
    node _T_29 = cvt(_T_17) @[rawFloatFromRecFN.scala 59:27]
    _T_22.sExp <= _T_29 @[rawFloatFromRecFN.scala 59:20]
    node _T_30 = eq(_T_19, UInt<1>("h0")) @[rawFloatFromRecFN.scala 60:39]
    node _T_31 = bits(io.b, 51, 0) @[rawFloatFromRecFN.scala 60:51]
    node _T_32 = cat(UInt<1>("h0"), _T_30) @[Cat.scala 29:58]
    node _T_33 = cat(_T_32, _T_31) @[Cat.scala 29:58]
    _T_22.sig <= _T_33 @[rawFloatFromRecFN.scala 60:20]
    divSqrtRawFN.io.b.sig <= _T_22.sig @[DivSqrtRecFN_small.scala 420:34]
    divSqrtRawFN.io.b.sExp <= _T_22.sExp @[DivSqrtRecFN_small.scala 420:34]
    divSqrtRawFN.io.b.sign <= _T_22.sign @[DivSqrtRecFN_small.scala 420:34]
    divSqrtRawFN.io.b.isZero <= _T_22.isZero @[DivSqrtRecFN_small.scala 420:34]
    divSqrtRawFN.io.b.isInf <= _T_22.isInf @[DivSqrtRecFN_small.scala 420:34]
    divSqrtRawFN.io.b.isNaN <= _T_22.isNaN @[DivSqrtRecFN_small.scala 420:34]
    divSqrtRawFN.io.roundingMode <= io.roundingMode @[DivSqrtRecFN_small.scala 421:34]
    io.rawOutValid_div <= divSqrtRawFN.io.rawOutValid_div @[DivSqrtRecFN_small.scala 423:25]
    io.rawOutValid_sqrt <= divSqrtRawFN.io.rawOutValid_sqrt @[DivSqrtRecFN_small.scala 424:25]
    io.roundingModeOut <= divSqrtRawFN.io.roundingModeOut @[DivSqrtRecFN_small.scala 425:25]
    io.invalidExc <= divSqrtRawFN.io.invalidExc @[DivSqrtRecFN_small.scala 426:25]
    io.infiniteExc <= divSqrtRawFN.io.infiniteExc @[DivSqrtRecFN_small.scala 427:25]
    io.rawOut.sig <= divSqrtRawFN.io.rawOut.sig @[DivSqrtRecFN_small.scala 428:25]
    io.rawOut.sExp <= divSqrtRawFN.io.rawOut.sExp @[DivSqrtRecFN_small.scala 428:25]
    io.rawOut.sign <= divSqrtRawFN.io.rawOut.sign @[DivSqrtRecFN_small.scala 428:25]
    io.rawOut.isZero <= divSqrtRawFN.io.rawOut.isZero @[DivSqrtRecFN_small.scala 428:25]
    io.rawOut.isInf <= divSqrtRawFN.io.rawOut.isInf @[DivSqrtRecFN_small.scala 428:25]
    io.rawOut.isNaN <= divSqrtRawFN.io.rawOut.isNaN @[DivSqrtRecFN_small.scala 428:25]

  module RoundAnyRawFNToRecFN :
    output io : { flip invalidExc : UInt<1>, flip infiniteExc : UInt<1>, flip in : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<13>, sig : UInt<56>}, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<65>, exceptionFlags : UInt<5>}
  
    io is invalid
    node roundingMode_near_even = eq(io.roundingMode, UInt<3>("h0")) @[RoundAnyRawFNToRecFN.scala 88:53]
    node roundingMode_minMag = eq(io.roundingMode, UInt<3>("h1")) @[RoundAnyRawFNToRecFN.scala 89:53]
    node roundingMode_min = eq(io.roundingMode, UInt<3>("h2")) @[RoundAnyRawFNToRecFN.scala 90:53]
    node roundingMode_max = eq(io.roundingMode, UInt<3>("h3")) @[RoundAnyRawFNToRecFN.scala 91:53]
    node roundingMode_near_maxMag = eq(io.roundingMode, UInt<3>("h4")) @[RoundAnyRawFNToRecFN.scala 92:53]
    node roundingMode_odd = eq(io.roundingMode, UInt<3>("h6")) @[RoundAnyRawFNToRecFN.scala 93:53]
    node _T = and(roundingMode_min, io.in.sign) @[RoundAnyRawFNToRecFN.scala 96:27]
    node _T_1 = eq(io.in.sign, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 96:66]
    node _T_2 = and(roundingMode_max, _T_1) @[RoundAnyRawFNToRecFN.scala 96:63]
    node roundMagUp = or(_T, _T_2) @[RoundAnyRawFNToRecFN.scala 96:42]
    node adjustedSig = shl(io.in.sig, 0) @[RoundAnyRawFNToRecFN.scala 112:22]
    node doShiftSigDown1 = bits(adjustedSig, 55, 55) @[RoundAnyRawFNToRecFN.scala 118:61]
    wire common_expOut : UInt<12> @[RoundAnyRawFNToRecFN.scala 120:31]
    common_expOut is invalid @[RoundAnyRawFNToRecFN.scala 120:31]
    wire common_fractOut : UInt<52> @[RoundAnyRawFNToRecFN.scala 121:31]
    common_fractOut is invalid @[RoundAnyRawFNToRecFN.scala 121:31]
    wire common_overflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 122:37]
    common_overflow is invalid @[RoundAnyRawFNToRecFN.scala 122:37]
    wire common_totalUnderflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 123:37]
    common_totalUnderflow is invalid @[RoundAnyRawFNToRecFN.scala 123:37]
    wire common_underflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 124:37]
    common_underflow is invalid @[RoundAnyRawFNToRecFN.scala 124:37]
    wire common_inexact : UInt<1> @[RoundAnyRawFNToRecFN.scala 125:37]
    common_inexact is invalid @[RoundAnyRawFNToRecFN.scala 125:37]
    node _T_3 = bits(io.in.sExp, 11, 0) @[RoundAnyRawFNToRecFN.scala 154:37]
    node _T_4 = not(_T_3) @[primitives.scala 51:21]
    node _T_5 = bits(_T_4, 11, 11) @[primitives.scala 57:25]
    node _T_6 = bits(_T_4, 10, 0) @[primitives.scala 58:26]
    node _T_7 = bits(_T_6, 10, 10) @[primitives.scala 57:25]
    node _T_8 = bits(_T_6, 9, 0) @[primitives.scala 58:26]
    node _T_9 = bits(_T_8, 9, 9) @[primitives.scala 57:25]
    node _T_10 = bits(_T_8, 8, 0) @[primitives.scala 58:26]
    node _T_11 = bits(_T_10, 8, 8) @[primitives.scala 57:25]
    node _T_12 = bits(_T_10, 7, 0) @[primitives.scala 58:26]
    node _T_13 = bits(_T_12, 7, 7) @[primitives.scala 57:25]
    node _T_14 = bits(_T_12, 6, 0) @[primitives.scala 58:26]
    node _T_15 = bits(_T_14, 6, 6) @[primitives.scala 57:25]
    node _T_16 = bits(_T_14, 5, 0) @[primitives.scala 58:26]
    node _T_17 = dshr(asSInt(UInt<65>("h10000000000000000")), _T_16) @[primitives.scala 77:58]
    node _T_18 = bits(_T_17, 63, 13) @[primitives.scala 79:22]
    node _T_19 = bits(_T_18, 31, 0) @[Bitwise.scala 109:18]
    node _T_20 = shl(UInt<16>("hffff"), 16) @[Bitwise.scala 102:47]
    node _T_21 = xor(UInt<32>("hffffffff"), _T_20) @[Bitwise.scala 102:21]
    node _T_22 = shr(_T_19, 16) @[Bitwise.scala 103:21]
    node _T_23 = and(_T_22, _T_21) @[Bitwise.scala 103:31]
    node _T_24 = bits(_T_19, 15, 0) @[Bitwise.scala 103:46]
    node _T_25 = shl(_T_24, 16) @[Bitwise.scala 103:65]
    node _T_26 = not(_T_21) @[Bitwise.scala 103:77]
    node _T_27 = and(_T_25, _T_26) @[Bitwise.scala 103:75]
    node _T_28 = or(_T_23, _T_27) @[Bitwise.scala 103:39]
    node _T_29 = bits(_T_21, 23, 0) @[Bitwise.scala 102:28]
    node _T_30 = shl(_T_29, 8) @[Bitwise.scala 102:47]
    node _T_31 = xor(_T_21, _T_30) @[Bitwise.scala 102:21]
    node _T_32 = shr(_T_28, 8) @[Bitwise.scala 103:21]
    node _T_33 = and(_T_32, _T_31) @[Bitwise.scala 103:31]
    node _T_34 = bits(_T_28, 23, 0) @[Bitwise.scala 103:46]
    node _T_35 = shl(_T_34, 8) @[Bitwise.scala 103:65]
    node _T_36 = not(_T_31) @[Bitwise.scala 103:77]
    node _T_37 = and(_T_35, _T_36) @[Bitwise.scala 103:75]
    node _T_38 = or(_T_33, _T_37) @[Bitwise.scala 103:39]
    node _T_39 = bits(_T_31, 27, 0) @[Bitwise.scala 102:28]
    node _T_40 = shl(_T_39, 4) @[Bitwise.scala 102:47]
    node _T_41 = xor(_T_31, _T_40) @[Bitwise.scala 102:21]
    node _T_42 = shr(_T_38, 4) @[Bitwise.scala 103:21]
    node _T_43 = and(_T_42, _T_41) @[Bitwise.scala 103:31]
    node _T_44 = bits(_T_38, 27, 0) @[Bitwise.scala 103:46]
    node _T_45 = shl(_T_44, 4) @[Bitwise.scala 103:65]
    node _T_46 = not(_T_41) @[Bitwise.scala 103:77]
    node _T_47 = and(_T_45, _T_46) @[Bitwise.scala 103:75]
    node _T_48 = or(_T_43, _T_47) @[Bitwise.scala 103:39]
    node _T_49 = bits(_T_41, 29, 0) @[Bitwise.scala 102:28]
    node _T_50 = shl(_T_49, 2) @[Bitwise.scala 102:47]
    node _T_51 = xor(_T_41, _T_50) @[Bitwise.scala 102:21]
    node _T_52 = shr(_T_48, 2) @[Bitwise.scala 103:21]
    node _T_53 = and(_T_52, _T_51) @[Bitwise.scala 103:31]
    node _T_54 = bits(_T_48, 29, 0) @[Bitwise.scala 103:46]
    node _T_55 = shl(_T_54, 2) @[Bitwise.scala 103:65]
    node _T_56 = not(_T_51) @[Bitwise.scala 103:77]
    node _T_57 = and(_T_55, _T_56) @[Bitwise.scala 103:75]
    node _T_58 = or(_T_53, _T_57) @[Bitwise.scala 103:39]
    node _T_59 = bits(_T_51, 30, 0) @[Bitwise.scala 102:28]
    node _T_60 = shl(_T_59, 1) @[Bitwise.scala 102:47]
    node _T_61 = xor(_T_51, _T_60) @[Bitwise.scala 102:21]
    node _T_62 = shr(_T_58, 1) @[Bitwise.scala 103:21]
    node _T_63 = and(_T_62, _T_61) @[Bitwise.scala 103:31]
    node _T_64 = bits(_T_58, 30, 0) @[Bitwise.scala 103:46]
    node _T_65 = shl(_T_64, 1) @[Bitwise.scala 103:65]
    node _T_66 = not(_T_61) @[Bitwise.scala 103:77]
    node _T_67 = and(_T_65, _T_66) @[Bitwise.scala 103:75]
    node _T_68 = or(_T_63, _T_67) @[Bitwise.scala 103:39]
    node _T_69 = bits(_T_18, 50, 32) @[Bitwise.scala 109:44]
    node _T_70 = bits(_T_69, 15, 0) @[Bitwise.scala 109:18]
    node _T_71 = shl(UInt<8>("hff"), 8) @[Bitwise.scala 102:47]
    node _T_72 = xor(UInt<16>("hffff"), _T_71) @[Bitwise.scala 102:21]
    node _T_73 = shr(_T_70, 8) @[Bitwise.scala 103:21]
    node _T_74 = and(_T_73, _T_72) @[Bitwise.scala 103:31]
    node _T_75 = bits(_T_70, 7, 0) @[Bitwise.scala 103:46]
    node _T_76 = shl(_T_75, 8) @[Bitwise.scala 103:65]
    node _T_77 = not(_T_72) @[Bitwise.scala 103:77]
    node _T_78 = and(_T_76, _T_77) @[Bitwise.scala 103:75]
    node _T_79 = or(_T_74, _T_78) @[Bitwise.scala 103:39]
    node _T_80 = bits(_T_72, 11, 0) @[Bitwise.scala 102:28]
    node _T_81 = shl(_T_80, 4) @[Bitwise.scala 102:47]
    node _T_82 = xor(_T_72, _T_81) @[Bitwise.scala 102:21]
    node _T_83 = shr(_T_79, 4) @[Bitwise.scala 103:21]
    node _T_84 = and(_T_83, _T_82) @[Bitwise.scala 103:31]
    node _T_85 = bits(_T_79, 11, 0) @[Bitwise.scala 103:46]
    node _T_86 = shl(_T_85, 4) @[Bitwise.scala 103:65]
    node _T_87 = not(_T_82) @[Bitwise.scala 103:77]
    node _T_88 = and(_T_86, _T_87) @[Bitwise.scala 103:75]
    node _T_89 = or(_T_84, _T_88) @[Bitwise.scala 103:39]
    node _T_90 = bits(_T_82, 13, 0) @[Bitwise.scala 102:28]
    node _T_91 = shl(_T_90, 2) @[Bitwise.scala 102:47]
    node _T_92 = xor(_T_82, _T_91) @[Bitwise.scala 102:21]
    node _T_93 = shr(_T_89, 2) @[Bitwise.scala 103:21]
    node _T_94 = and(_T_93, _T_92) @[Bitwise.scala 103:31]
    node _T_95 = bits(_T_89, 13, 0) @[Bitwise.scala 103:46]
    node _T_96 = shl(_T_95, 2) @[Bitwise.scala 103:65]
    node _T_97 = not(_T_92) @[Bitwise.scala 103:77]
    node _T_98 = and(_T_96, _T_97) @[Bitwise.scala 103:75]
    node _T_99 = or(_T_94, _T_98) @[Bitwise.scala 103:39]
    node _T_100 = bits(_T_92, 14, 0) @[Bitwise.scala 102:28]
    node _T_101 = shl(_T_100, 1) @[Bitwise.scala 102:47]
    node _T_102 = xor(_T_92, _T_101) @[Bitwise.scala 102:21]
    node _T_103 = shr(_T_99, 1) @[Bitwise.scala 103:21]
    node _T_104 = and(_T_103, _T_102) @[Bitwise.scala 103:31]
    node _T_105 = bits(_T_99, 14, 0) @[Bitwise.scala 103:46]
    node _T_106 = shl(_T_105, 1) @[Bitwise.scala 103:65]
    node _T_107 = not(_T_102) @[Bitwise.scala 103:77]
    node _T_108 = and(_T_106, _T_107) @[Bitwise.scala 103:75]
    node _T_109 = or(_T_104, _T_108) @[Bitwise.scala 103:39]
    node _T_110 = bits(_T_69, 18, 16) @[Bitwise.scala 109:44]
    node _T_111 = bits(_T_110, 1, 0) @[Bitwise.scala 109:18]
    node _T_112 = bits(_T_111, 0, 0) @[Bitwise.scala 109:18]
    node _T_113 = bits(_T_111, 1, 1) @[Bitwise.scala 109:44]
    node _T_114 = cat(_T_112, _T_113) @[Cat.scala 29:58]
    node _T_115 = bits(_T_110, 2, 2) @[Bitwise.scala 109:44]
    node _T_116 = cat(_T_114, _T_115) @[Cat.scala 29:58]
    node _T_117 = cat(_T_109, _T_116) @[Cat.scala 29:58]
    node _T_118 = cat(_T_68, _T_117) @[Cat.scala 29:58]
    node _T_119 = not(_T_118) @[primitives.scala 74:36]
    node _T_120 = mux(_T_15, UInt<1>("h0"), _T_119) @[primitives.scala 74:21]
    node _T_121 = not(_T_120) @[primitives.scala 74:17]
    node _T_122 = not(_T_121) @[primitives.scala 74:36]
    node _T_123 = mux(_T_13, UInt<1>("h0"), _T_122) @[primitives.scala 74:21]
    node _T_124 = not(_T_123) @[primitives.scala 74:17]
    node _T_125 = not(_T_124) @[primitives.scala 74:36]
    node _T_126 = mux(_T_11, UInt<1>("h0"), _T_125) @[primitives.scala 74:21]
    node _T_127 = not(_T_126) @[primitives.scala 74:17]
    node _T_128 = not(_T_127) @[primitives.scala 74:36]
    node _T_129 = mux(_T_9, UInt<1>("h0"), _T_128) @[primitives.scala 74:21]
    node _T_130 = not(_T_129) @[primitives.scala 74:17]
    node _T_131 = cat(_T_130, UInt<3>("h7")) @[Cat.scala 29:58]
    node _T_132 = bits(_T_8, 9, 9) @[primitives.scala 57:25]
    node _T_133 = bits(_T_8, 8, 0) @[primitives.scala 58:26]
    node _T_134 = bits(_T_133, 8, 8) @[primitives.scala 57:25]
    node _T_135 = bits(_T_133, 7, 0) @[primitives.scala 58:26]
    node _T_136 = bits(_T_135, 7, 7) @[primitives.scala 57:25]
    node _T_137 = bits(_T_135, 6, 0) @[primitives.scala 58:26]
    node _T_138 = bits(_T_137, 6, 6) @[primitives.scala 57:25]
    node _T_139 = bits(_T_137, 5, 0) @[primitives.scala 58:26]
    node _T_140 = dshr(asSInt(UInt<65>("h10000000000000000")), _T_139) @[primitives.scala 77:58]
    node _T_141 = bits(_T_140, 2, 0) @[primitives.scala 79:22]
    node _T_142 = bits(_T_141, 1, 0) @[Bitwise.scala 109:18]
    node _T_143 = bits(_T_142, 0, 0) @[Bitwise.scala 109:18]
    node _T_144 = bits(_T_142, 1, 1) @[Bitwise.scala 109:44]
    node _T_145 = cat(_T_143, _T_144) @[Cat.scala 29:58]
    node _T_146 = bits(_T_141, 2, 2) @[Bitwise.scala 109:44]
    node _T_147 = cat(_T_145, _T_146) @[Cat.scala 29:58]
    node _T_148 = mux(_T_138, _T_147, UInt<1>("h0")) @[primitives.scala 61:24]
    node _T_149 = mux(_T_136, _T_148, UInt<1>("h0")) @[primitives.scala 61:24]
    node _T_150 = mux(_T_134, _T_149, UInt<1>("h0")) @[primitives.scala 61:24]
    node _T_151 = mux(_T_132, _T_150, UInt<1>("h0")) @[primitives.scala 61:24]
    node _T_152 = mux(_T_7, _T_131, _T_151) @[primitives.scala 66:24]
    node _T_153 = mux(_T_5, _T_152, UInt<1>("h0")) @[primitives.scala 61:24]
    node _T_154 = or(_T_153, doShiftSigDown1) @[RoundAnyRawFNToRecFN.scala 157:23]
    node _T_155 = cat(_T_154, UInt<2>("h3")) @[Cat.scala 29:58]
    node _T_156 = shr(_T_155, 1) @[RoundAnyRawFNToRecFN.scala 160:57]
    node _T_157 = cat(UInt<1>("h0"), _T_156) @[Cat.scala 29:58]
    node _T_158 = not(_T_157) @[RoundAnyRawFNToRecFN.scala 161:28]
    node _T_159 = and(_T_158, _T_155) @[RoundAnyRawFNToRecFN.scala 161:46]
    node _T_160 = and(adjustedSig, _T_159) @[RoundAnyRawFNToRecFN.scala 162:40]
    node _T_161 = orr(_T_160) @[RoundAnyRawFNToRecFN.scala 162:56]
    node _T_162 = and(adjustedSig, _T_157) @[RoundAnyRawFNToRecFN.scala 163:42]
    node _T_163 = orr(_T_162) @[RoundAnyRawFNToRecFN.scala 163:62]
    node _T_164 = or(_T_161, _T_163) @[RoundAnyRawFNToRecFN.scala 164:36]
    node _T_165 = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 167:38]
    node _T_166 = and(_T_165, _T_161) @[RoundAnyRawFNToRecFN.scala 167:67]
    node _T_167 = and(roundMagUp, _T_164) @[RoundAnyRawFNToRecFN.scala 169:29]
    node _T_168 = or(_T_166, _T_167) @[RoundAnyRawFNToRecFN.scala 168:31]
    node _T_169 = or(adjustedSig, _T_155) @[RoundAnyRawFNToRecFN.scala 172:32]
    node _T_170 = shr(_T_169, 2) @[RoundAnyRawFNToRecFN.scala 172:44]
    node _T_171 = add(_T_170, UInt<1>("h1")) @[RoundAnyRawFNToRecFN.scala 172:49]
    node _T_172 = and(roundingMode_near_even, _T_161) @[RoundAnyRawFNToRecFN.scala 173:49]
    node _T_173 = eq(_T_163, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 174:30]
    node _T_174 = and(_T_172, _T_173) @[RoundAnyRawFNToRecFN.scala 173:64]
    node _T_175 = shr(_T_155, 1) @[RoundAnyRawFNToRecFN.scala 175:35]
    node _T_176 = mux(_T_174, _T_175, UInt<55>("h0")) @[RoundAnyRawFNToRecFN.scala 173:25]
    node _T_177 = not(_T_176) @[RoundAnyRawFNToRecFN.scala 173:21]
    node _T_178 = and(_T_171, _T_177) @[RoundAnyRawFNToRecFN.scala 172:61]
    node _T_179 = not(_T_155) @[RoundAnyRawFNToRecFN.scala 178:32]
    node _T_180 = and(adjustedSig, _T_179) @[RoundAnyRawFNToRecFN.scala 178:30]
    node _T_181 = shr(_T_180, 2) @[RoundAnyRawFNToRecFN.scala 178:43]
    node _T_182 = and(roundingMode_odd, _T_164) @[RoundAnyRawFNToRecFN.scala 179:42]
    node _T_183 = shr(_T_159, 1) @[RoundAnyRawFNToRecFN.scala 179:67]
    node _T_184 = mux(_T_182, _T_183, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 179:24]
    node _T_185 = or(_T_181, _T_184) @[RoundAnyRawFNToRecFN.scala 178:47]
    node _T_186 = mux(_T_168, _T_178, _T_185) @[RoundAnyRawFNToRecFN.scala 171:16]
    node _T_187 = shr(_T_186, 53) @[RoundAnyRawFNToRecFN.scala 183:54]
    node _T_188 = cvt(_T_187) @[RoundAnyRawFNToRecFN.scala 183:69]
    node _T_189 = add(io.in.sExp, _T_188) @[RoundAnyRawFNToRecFN.scala 183:40]
    node _T_190 = bits(_T_189, 11, 0) @[RoundAnyRawFNToRecFN.scala 185:37]
    common_expOut <= _T_190 @[RoundAnyRawFNToRecFN.scala 185:23]
    node _T_191 = bits(_T_186, 52, 1) @[RoundAnyRawFNToRecFN.scala 188:27]
    node _T_192 = bits(_T_186, 51, 0) @[RoundAnyRawFNToRecFN.scala 189:27]
    node _T_193 = mux(doShiftSigDown1, _T_191, _T_192) @[RoundAnyRawFNToRecFN.scala 187:16]
    common_fractOut <= _T_193 @[RoundAnyRawFNToRecFN.scala 186:25]
    node _T_194 = shr(_T_189, 10) @[RoundAnyRawFNToRecFN.scala 194:30]
    node _T_195 = geq(_T_194, asSInt(UInt<3>("h3"))) @[RoundAnyRawFNToRecFN.scala 194:50]
    common_overflow <= _T_195 @[RoundAnyRawFNToRecFN.scala 191:25]
    node _T_196 = lt(_T_189, asSInt(UInt<11>("h3ce"))) @[RoundAnyRawFNToRecFN.scala 198:31]
    common_totalUnderflow <= _T_196 @[RoundAnyRawFNToRecFN.scala 195:31]
    node _T_197 = bits(adjustedSig, 2, 2) @[RoundAnyRawFNToRecFN.scala 201:45]
    node _T_198 = bits(adjustedSig, 1, 1) @[RoundAnyRawFNToRecFN.scala 201:61]
    node _T_199 = mux(doShiftSigDown1, _T_197, _T_198) @[RoundAnyRawFNToRecFN.scala 201:16]
    node _T_200 = bits(adjustedSig, 2, 2) @[RoundAnyRawFNToRecFN.scala 203:44]
    node _T_201 = and(doShiftSigDown1, _T_200) @[RoundAnyRawFNToRecFN.scala 203:30]
    node _T_202 = bits(adjustedSig, 1, 0) @[RoundAnyRawFNToRecFN.scala 203:63]
    node _T_203 = orr(_T_202) @[RoundAnyRawFNToRecFN.scala 203:70]
    node _T_204 = or(_T_201, _T_203) @[RoundAnyRawFNToRecFN.scala 203:49]
    node _T_205 = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 205:38]
    node _T_206 = and(_T_205, _T_199) @[RoundAnyRawFNToRecFN.scala 205:67]
    node _T_207 = and(roundMagUp, _T_204) @[RoundAnyRawFNToRecFN.scala 207:29]
    node _T_208 = or(_T_206, _T_207) @[RoundAnyRawFNToRecFN.scala 206:46]
    node _T_209 = bits(_T_186, 54, 54) @[RoundAnyRawFNToRecFN.scala 210:27]
    node _T_210 = bits(_T_186, 53, 53) @[RoundAnyRawFNToRecFN.scala 211:27]
    node _T_211 = mux(doShiftSigDown1, _T_209, _T_210) @[RoundAnyRawFNToRecFN.scala 209:16]
    node _T_212 = shr(io.in.sExp, 11) @[RoundAnyRawFNToRecFN.scala 218:48]
    node _T_213 = leq(_T_212, asSInt(UInt<1>("h0"))) @[RoundAnyRawFNToRecFN.scala 218:62]
    node _T_214 = and(_T_164, _T_213) @[RoundAnyRawFNToRecFN.scala 218:32]
    node _T_215 = bits(_T_155, 3, 3) @[RoundAnyRawFNToRecFN.scala 219:57]
    node _T_216 = bits(_T_155, 2, 2) @[RoundAnyRawFNToRecFN.scala 219:71]
    node _T_217 = mux(doShiftSigDown1, _T_215, _T_216) @[RoundAnyRawFNToRecFN.scala 219:30]
    node _T_218 = and(_T_214, _T_217) @[RoundAnyRawFNToRecFN.scala 218:74]
    node _T_219 = eq(io.detectTininess, UInt<1>("h1")) @[RoundAnyRawFNToRecFN.scala 220:49]
    node _T_220 = bits(_T_155, 4, 4) @[RoundAnyRawFNToRecFN.scala 222:49]
    node _T_221 = bits(_T_155, 3, 3) @[RoundAnyRawFNToRecFN.scala 223:49]
    node _T_222 = mux(doShiftSigDown1, _T_220, _T_221) @[RoundAnyRawFNToRecFN.scala 221:39]
    node _T_223 = eq(_T_222, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 221:34]
    node _T_224 = and(_T_219, _T_223) @[RoundAnyRawFNToRecFN.scala 220:77]
    node _T_225 = and(_T_224, _T_211) @[RoundAnyRawFNToRecFN.scala 224:38]
    node _T_226 = and(_T_225, _T_161) @[RoundAnyRawFNToRecFN.scala 225:45]
    node _T_227 = and(_T_226, _T_208) @[RoundAnyRawFNToRecFN.scala 225:60]
    node _T_228 = eq(_T_227, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 220:27]
    node _T_229 = and(_T_218, _T_228) @[RoundAnyRawFNToRecFN.scala 219:76]
    node _T_230 = or(common_totalUnderflow, _T_229) @[RoundAnyRawFNToRecFN.scala 215:40]
    common_underflow <= _T_230 @[RoundAnyRawFNToRecFN.scala 213:26]
    node _T_231 = or(common_totalUnderflow, _T_164) @[RoundAnyRawFNToRecFN.scala 228:49]
    common_inexact <= _T_231 @[RoundAnyRawFNToRecFN.scala 228:24]
    node isNaNOut = or(io.invalidExc, io.in.isNaN) @[RoundAnyRawFNToRecFN.scala 233:34]
    node notNaN_isSpecialInfOut = or(io.infiniteExc, io.in.isInf) @[RoundAnyRawFNToRecFN.scala 234:49]
    node _T_232 = eq(isNaNOut, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 235:22]
    node _T_233 = eq(notNaN_isSpecialInfOut, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 235:36]
    node _T_234 = and(_T_232, _T_233) @[RoundAnyRawFNToRecFN.scala 235:33]
    node _T_235 = eq(io.in.isZero, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 235:64]
    node commonCase = and(_T_234, _T_235) @[RoundAnyRawFNToRecFN.scala 235:61]
    node overflow = and(commonCase, common_overflow) @[RoundAnyRawFNToRecFN.scala 236:32]
    node underflow = and(commonCase, common_underflow) @[RoundAnyRawFNToRecFN.scala 237:32]
    node _T_236 = and(commonCase, common_inexact) @[RoundAnyRawFNToRecFN.scala 238:43]
    node inexact = or(overflow, _T_236) @[RoundAnyRawFNToRecFN.scala 238:28]
    node _T_237 = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 241:32]
    node overflow_roundMagUp = or(_T_237, roundMagUp) @[RoundAnyRawFNToRecFN.scala 241:60]
    node _T_238 = and(commonCase, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 243:20]
    node _T_239 = or(roundMagUp, roundingMode_odd) @[RoundAnyRawFNToRecFN.scala 243:60]
    node pegMinNonzeroMagOut = and(_T_238, _T_239) @[RoundAnyRawFNToRecFN.scala 243:45]
    node _T_240 = eq(overflow_roundMagUp, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 244:42]
    node pegMaxFiniteMagOut = and(overflow, _T_240) @[RoundAnyRawFNToRecFN.scala 244:39]
    node _T_241 = and(overflow, overflow_roundMagUp) @[RoundAnyRawFNToRecFN.scala 246:45]
    node notNaN_isInfOut = or(notNaN_isSpecialInfOut, _T_241) @[RoundAnyRawFNToRecFN.scala 246:32]
    node signOut = mux(isNaNOut, UInt<1>("h0"), io.in.sign) @[RoundAnyRawFNToRecFN.scala 248:22]
    node _T_242 = or(io.in.isZero, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 251:32]
    node _T_243 = mux(_T_242, UInt<12>("he00"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 251:18]
    node _T_244 = not(_T_243) @[RoundAnyRawFNToRecFN.scala 251:14]
    node _T_245 = and(common_expOut, _T_244) @[RoundAnyRawFNToRecFN.scala 250:24]
    node _T_246 = not(UInt<12>("h3ce")) @[RoundAnyRawFNToRecFN.scala 256:19]
    node _T_247 = mux(pegMinNonzeroMagOut, _T_246, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 255:18]
    node _T_248 = not(_T_247) @[RoundAnyRawFNToRecFN.scala 255:14]
    node _T_249 = and(_T_245, _T_248) @[RoundAnyRawFNToRecFN.scala 254:17]
    node _T_250 = mux(pegMaxFiniteMagOut, UInt<12>("h400"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 259:18]
    node _T_251 = not(_T_250) @[RoundAnyRawFNToRecFN.scala 259:14]
    node _T_252 = and(_T_249, _T_251) @[RoundAnyRawFNToRecFN.scala 258:17]
    node _T_253 = mux(notNaN_isInfOut, UInt<12>("h200"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 263:18]
    node _T_254 = not(_T_253) @[RoundAnyRawFNToRecFN.scala 263:14]
    node _T_255 = and(_T_252, _T_254) @[RoundAnyRawFNToRecFN.scala 262:17]
    node _T_256 = mux(pegMinNonzeroMagOut, UInt<12>("h3ce"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 267:16]
    node _T_257 = or(_T_255, _T_256) @[RoundAnyRawFNToRecFN.scala 266:18]
    node _T_258 = mux(pegMaxFiniteMagOut, UInt<12>("hbff"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 271:16]
    node _T_259 = or(_T_257, _T_258) @[RoundAnyRawFNToRecFN.scala 270:15]
    node _T_260 = mux(notNaN_isInfOut, UInt<12>("hc00"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 275:16]
    node _T_261 = or(_T_259, _T_260) @[RoundAnyRawFNToRecFN.scala 274:15]
    node _T_262 = mux(isNaNOut, UInt<12>("he00"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 276:16]
    node expOut = or(_T_261, _T_262) @[RoundAnyRawFNToRecFN.scala 275:77]
    node _T_263 = or(isNaNOut, io.in.isZero) @[RoundAnyRawFNToRecFN.scala 278:22]
    node _T_264 = or(_T_263, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 278:38]
    node _T_265 = mux(isNaNOut, UInt<52>("h8000000000000"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 279:16]
    node _T_266 = mux(_T_264, _T_265, common_fractOut) @[RoundAnyRawFNToRecFN.scala 278:12]
    node _T_267 = bits(pegMaxFiniteMagOut, 0, 0) @[Bitwise.scala 72:15]
    node _T_268 = mux(_T_267, UInt<52>("hfffffffffffff"), UInt<52>("h0")) @[Bitwise.scala 72:12]
    node fractOut = or(_T_266, _T_268) @[RoundAnyRawFNToRecFN.scala 281:11]
    node _T_269 = cat(signOut, expOut) @[Cat.scala 29:58]
    node _T_270 = cat(_T_269, fractOut) @[Cat.scala 29:58]
    io.out <= _T_270 @[RoundAnyRawFNToRecFN.scala 284:12]
    node _T_271 = cat(underflow, inexact) @[Cat.scala 29:58]
    node _T_272 = cat(io.invalidExc, io.infiniteExc) @[Cat.scala 29:58]
    node _T_273 = cat(_T_272, overflow) @[Cat.scala 29:58]
    node _T_274 = cat(_T_273, _T_271) @[Cat.scala 29:58]
    io.exceptionFlags <= _T_274 @[RoundAnyRawFNToRecFN.scala 285:23]

  module RoundRawFNToRecFN :
    output io : { flip invalidExc : UInt<1>, flip infiniteExc : UInt<1>, flip in : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<13>, sig : UInt<56>}, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<65>, exceptionFlags : UInt<5>}
  
    io is invalid
    inst roundAnyRawFNToRecFN of RoundAnyRawFNToRecFN @[RoundAnyRawFNToRecFN.scala 307:15]
    roundAnyRawFNToRecFN.io is invalid
    roundAnyRawFNToRecFN.io.invalidExc <= io.invalidExc @[RoundAnyRawFNToRecFN.scala 310:44]
    roundAnyRawFNToRecFN.io.infiniteExc <= io.infiniteExc @[RoundAnyRawFNToRecFN.scala 311:44]
    roundAnyRawFNToRecFN.io.in <- io.in @[RoundAnyRawFNToRecFN.scala 312:44]
    roundAnyRawFNToRecFN.io.roundingMode <= io.roundingMode @[RoundAnyRawFNToRecFN.scala 313:44]
    roundAnyRawFNToRecFN.io.detectTininess <= io.detectTininess @[RoundAnyRawFNToRecFN.scala 314:44]
    io.out <= roundAnyRawFNToRecFN.io.out @[RoundAnyRawFNToRecFN.scala 315:23]
    io.exceptionFlags <= roundAnyRawFNToRecFN.io.exceptionFlags @[RoundAnyRawFNToRecFN.scala 316:23]

  module DivSqrtRecFN_small :
    input clock : Clock
    input reset : Reset
    output io : { inReady : UInt<1>, flip inValid : UInt<1>, flip sqrtOp : UInt<1>, flip a : UInt<65>, flip b : UInt<65>, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, outValid_div : UInt<1>, outValid_sqrt : UInt<1>, out : UInt<65>, exceptionFlags : UInt<5>}
  
    inst divSqrtRecFNToRaw of DivSqrtRecFNToRaw_small @[DivSqrtRecFN_small.scala 460:15]
    divSqrtRecFNToRaw.clock <= clock
    divSqrtRecFNToRaw.reset <= reset
    io.inReady <= divSqrtRecFNToRaw.io.inReady @[DivSqrtRecFN_small.scala 462:16]
    divSqrtRecFNToRaw.io.inValid <= io.inValid @[DivSqrtRecFN_small.scala 463:39]
    divSqrtRecFNToRaw.io.sqrtOp <= io.sqrtOp @[DivSqrtRecFN_small.scala 464:39]
    divSqrtRecFNToRaw.io.a <= io.a @[DivSqrtRecFN_small.scala 465:39]
    divSqrtRecFNToRaw.io.b <= io.b @[DivSqrtRecFN_small.scala 466:39]
    divSqrtRecFNToRaw.io.roundingMode <= io.roundingMode @[DivSqrtRecFN_small.scala 467:39]
    io.outValid_div <= divSqrtRecFNToRaw.io.rawOutValid_div @[DivSqrtRecFN_small.scala 471:22]
    io.outValid_sqrt <= divSqrtRecFNToRaw.io.rawOutValid_sqrt @[DivSqrtRecFN_small.scala 472:22]
    inst roundRawFNToRecFN of RoundRawFNToRecFN @[DivSqrtRecFN_small.scala 475:15]
    roundRawFNToRecFN.io.invalidExc <= divSqrtRecFNToRaw.io.invalidExc @[DivSqrtRecFN_small.scala 476:39]
    roundRawFNToRecFN.io.infiniteExc <= divSqrtRecFNToRaw.io.infiniteExc @[DivSqrtRecFN_small.scala 477:39]
    roundRawFNToRecFN.io.in.sig <= divSqrtRecFNToRaw.io.rawOut.sig @[DivSqrtRecFN_small.scala 478:39]
    roundRawFNToRecFN.io.in.sExp <= divSqrtRecFNToRaw.io.rawOut.sExp @[DivSqrtRecFN_small.scala 478:39]
    roundRawFNToRecFN.io.in.sign <= divSqrtRecFNToRaw.io.rawOut.sign @[DivSqrtRecFN_small.scala 478:39]
    roundRawFNToRecFN.io.in.isZero <= divSqrtRecFNToRaw.io.rawOut.isZero @[DivSqrtRecFN_small.scala 478:39]
    roundRawFNToRecFN.io.in.isInf <= divSqrtRecFNToRaw.io.rawOut.isInf @[DivSqrtRecFN_small.scala 478:39]
    roundRawFNToRecFN.io.in.isNaN <= divSqrtRecFNToRaw.io.rawOut.isNaN @[DivSqrtRecFN_small.scala 478:39]
    roundRawFNToRecFN.io.roundingMode <= divSqrtRecFNToRaw.io.roundingModeOut @[DivSqrtRecFN_small.scala 479:39]
    roundRawFNToRecFN.io.detectTininess <= io.detectTininess @[DivSqrtRecFN_small.scala 480:41]
    io.out <= roundRawFNToRecFN.io.out @[DivSqrtRecFN_small.scala 481:23]
    io.exceptionFlags <= roundRawFNToRecFN.io.exceptionFlags @[DivSqrtRecFN_small.scala 482:23]

  module QueueCompatibility :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { a : UInt<64>, roundingMode : UInt<3>, detectTininess : UInt<1>, out : UInt<64>, exceptionFlags : UInt<5>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { a : UInt<64>, roundingMode : UInt<3>, detectTininess : UInt<1>, out : UInt<64>, exceptionFlags : UInt<5>}}, count : UInt<3>}
  
    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { a : UInt<64>, roundingMode : UInt<3>, detectTininess : UInt<1>, out : UInt<64>, exceptionFlags : UInt<5>} [5] @[Decoupled.scala 218:16]
    reg enq_ptr_value : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[Counter.scala 29:33]
    reg deq_ptr_value : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[Counter.scala 29:33]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 223:33]
    node _T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _T_1 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq is invalid
    do_enq <= _T_1
    node _T_2 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq is invalid
    do_deq <= _T_2
    when do_enq : @[Decoupled.scala 229:17]
      infer mport _T_3 = ram[enq_ptr_value], clock @[Decoupled.scala 230:8]
      _T_3 <- io.enq.bits @[Decoupled.scala 230:24]
      node wrap = eq(enq_ptr_value, UInt<3>("h4")) @[Counter.scala 38:24]
      node _T_4 = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 39:22]
      node _T_5 = tail(_T_4, 1) @[Counter.scala 39:22]
      enq_ptr_value <= _T_5 @[Counter.scala 39:13]
      when wrap : @[Counter.scala 41:21]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 41:29]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(deq_ptr_value, UInt<3>("h4")) @[Counter.scala 38:24]
      node _T_6 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 39:22]
      node _T_7 = tail(_T_6, 1) @[Counter.scala 39:22]
      deq_ptr_value <= _T_7 @[Counter.scala 39:13]
      when wrap_1 : @[Counter.scala 41:21]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 41:29]
    node _T_8 = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T_8 : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _T_9 = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _T_9 @[Decoupled.scala 240:16]
    node _T_10 = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _T_10 @[Decoupled.scala 241:16]
    infer mport _T_11 = ram[deq_ptr_value], clock @[Decoupled.scala 242:21]
    io.deq.bits <- _T_11 @[Decoupled.scala 242:15]
    node _T_12 = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_T_12, 1) @[Decoupled.scala 257:32]
    node _T_13 = mux(maybe_full, UInt<3>("h5"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _T_14 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 264:39]
    node _T_15 = add(UInt<3>("h5"), ptr_diff) @[Decoupled.scala 265:38]
    node _T_16 = tail(_T_15, 1) @[Decoupled.scala 265:38]
    node _T_17 = mux(_T_14, _T_16, ptr_diff) @[Decoupled.scala 264:24]
    node _T_18 = mux(ptr_match, _T_13, _T_17) @[Decoupled.scala 261:20]
    io.count <= _T_18 @[Decoupled.scala 261:14]

  module ValExec_DivSqrtRecFN_small_sqrt :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip input : { flip ready : UInt<1>, valid : UInt<1>, bits : { a : UInt<64>, roundingMode : UInt<3>, detectTininess : UInt<1>, out : UInt<64>, exceptionFlags : UInt<5>}}, output : { a : UInt<64>, roundingMode : UInt<3>, detectTininess : UInt<1>}, expected : { out : UInt<64>, exceptionFlags : UInt<5>, recOut : UInt<65>}, actual : { out : UInt<65>, exceptionFlags : UInt<5>}, check : UInt<1>, pass : UInt<1>}
  
    clock is invalid
    reset is invalid
    io is invalid
    inst ds of DivSqrtRecFN_small @[ValExec_DivSqrtRecFN_small.scala 156:20]
    ds.io is invalid
    ds.clock <= clock
    ds.reset <= reset
    inst cq of QueueCompatibility @[ValExec_DivSqrtRecFN_small.scala 157:20]
    cq.io is invalid
    cq.clock <= clock
    cq.reset <= reset
    node _T = and(io.input.valid, ds.io.inReady) @[ValExec_DivSqrtRecFN_small.scala 159:39]
    cq.io.enq.valid <= _T @[ValExec_DivSqrtRecFN_small.scala 159:21]
    cq.io.enq.bits <- io.input.bits @[ValExec_DivSqrtRecFN_small.scala 160:20]
    node _T_1 = and(ds.io.inReady, cq.io.enq.ready) @[ValExec_DivSqrtRecFN_small.scala 162:37]
    io.input.ready <= _T_1 @[ValExec_DivSqrtRecFN_small.scala 162:20]
    node _T_2 = and(io.input.valid, cq.io.enq.ready) @[ValExec_DivSqrtRecFN_small.scala 163:37]
    ds.io.inValid <= _T_2 @[ValExec_DivSqrtRecFN_small.scala 163:19]
    ds.io.sqrtOp <= UInt<1>("h1") @[ValExec_DivSqrtRecFN_small.scala 164:18]
    node _T_3 = bits(io.input.bits.a, 63, 63) @[rawFloatFromFN.scala 46:22]
    node _T_4 = bits(io.input.bits.a, 62, 52) @[rawFloatFromFN.scala 47:23]
    node _T_5 = bits(io.input.bits.a, 51, 0) @[rawFloatFromFN.scala 48:25]
    node _T_6 = eq(_T_4, UInt<1>("h0")) @[rawFloatFromFN.scala 50:34]
    node _T_7 = eq(_T_5, UInt<1>("h0")) @[rawFloatFromFN.scala 51:38]
    node _T_8 = bits(_T_5, 0, 0) @[primitives.scala 92:52]
    node _T_9 = bits(_T_5, 1, 1) @[primitives.scala 92:52]
    node _T_10 = bits(_T_5, 2, 2) @[primitives.scala 92:52]
    node _T_11 = bits(_T_5, 3, 3) @[primitives.scala 92:52]
    node _T_12 = bits(_T_5, 4, 4) @[primitives.scala 92:52]
    node _T_13 = bits(_T_5, 5, 5) @[primitives.scala 92:52]
    node _T_14 = bits(_T_5, 6, 6) @[primitives.scala 92:52]
    node _T_15 = bits(_T_5, 7, 7) @[primitives.scala 92:52]
    node _T_16 = bits(_T_5, 8, 8) @[primitives.scala 92:52]
    node _T_17 = bits(_T_5, 9, 9) @[primitives.scala 92:52]
    node _T_18 = bits(_T_5, 10, 10) @[primitives.scala 92:52]
    node _T_19 = bits(_T_5, 11, 11) @[primitives.scala 92:52]
    node _T_20 = bits(_T_5, 12, 12) @[primitives.scala 92:52]
    node _T_21 = bits(_T_5, 13, 13) @[primitives.scala 92:52]
    node _T_22 = bits(_T_5, 14, 14) @[primitives.scala 92:52]
    node _T_23 = bits(_T_5, 15, 15) @[primitives.scala 92:52]
    node _T_24 = bits(_T_5, 16, 16) @[primitives.scala 92:52]
    node _T_25 = bits(_T_5, 17, 17) @[primitives.scala 92:52]
    node _T_26 = bits(_T_5, 18, 18) @[primitives.scala 92:52]
    node _T_27 = bits(_T_5, 19, 19) @[primitives.scala 92:52]
    node _T_28 = bits(_T_5, 20, 20) @[primitives.scala 92:52]
    node _T_29 = bits(_T_5, 21, 21) @[primitives.scala 92:52]
    node _T_30 = bits(_T_5, 22, 22) @[primitives.scala 92:52]
    node _T_31 = bits(_T_5, 23, 23) @[primitives.scala 92:52]
    node _T_32 = bits(_T_5, 24, 24) @[primitives.scala 92:52]
    node _T_33 = bits(_T_5, 25, 25) @[primitives.scala 92:52]
    node _T_34 = bits(_T_5, 26, 26) @[primitives.scala 92:52]
    node _T_35 = bits(_T_5, 27, 27) @[primitives.scala 92:52]
    node _T_36 = bits(_T_5, 28, 28) @[primitives.scala 92:52]
    node _T_37 = bits(_T_5, 29, 29) @[primitives.scala 92:52]
    node _T_38 = bits(_T_5, 30, 30) @[primitives.scala 92:52]
    node _T_39 = bits(_T_5, 31, 31) @[primitives.scala 92:52]
    node _T_40 = bits(_T_5, 32, 32) @[primitives.scala 92:52]
    node _T_41 = bits(_T_5, 33, 33) @[primitives.scala 92:52]
    node _T_42 = bits(_T_5, 34, 34) @[primitives.scala 92:52]
    node _T_43 = bits(_T_5, 35, 35) @[primitives.scala 92:52]
    node _T_44 = bits(_T_5, 36, 36) @[primitives.scala 92:52]
    node _T_45 = bits(_T_5, 37, 37) @[primitives.scala 92:52]
    node _T_46 = bits(_T_5, 38, 38) @[primitives.scala 92:52]
    node _T_47 = bits(_T_5, 39, 39) @[primitives.scala 92:52]
    node _T_48 = bits(_T_5, 40, 40) @[primitives.scala 92:52]
    node _T_49 = bits(_T_5, 41, 41) @[primitives.scala 92:52]
    node _T_50 = bits(_T_5, 42, 42) @[primitives.scala 92:52]
    node _T_51 = bits(_T_5, 43, 43) @[primitives.scala 92:52]
    node _T_52 = bits(_T_5, 44, 44) @[primitives.scala 92:52]
    node _T_53 = bits(_T_5, 45, 45) @[primitives.scala 92:52]
    node _T_54 = bits(_T_5, 46, 46) @[primitives.scala 92:52]
    node _T_55 = bits(_T_5, 47, 47) @[primitives.scala 92:52]
    node _T_56 = bits(_T_5, 48, 48) @[primitives.scala 92:52]
    node _T_57 = bits(_T_5, 49, 49) @[primitives.scala 92:52]
    node _T_58 = bits(_T_5, 50, 50) @[primitives.scala 92:52]
    node _T_59 = bits(_T_5, 51, 51) @[primitives.scala 92:52]
    node _T_60 = mux(_T_9, UInt<6>("h32"), UInt<6>("h33")) @[Mux.scala 47:69]
    node _T_61 = mux(_T_10, UInt<6>("h31"), _T_60) @[Mux.scala 47:69]
    node _T_62 = mux(_T_11, UInt<6>("h30"), _T_61) @[Mux.scala 47:69]
    node _T_63 = mux(_T_12, UInt<6>("h2f"), _T_62) @[Mux.scala 47:69]
    node _T_64 = mux(_T_13, UInt<6>("h2e"), _T_63) @[Mux.scala 47:69]
    node _T_65 = mux(_T_14, UInt<6>("h2d"), _T_64) @[Mux.scala 47:69]
    node _T_66 = mux(_T_15, UInt<6>("h2c"), _T_65) @[Mux.scala 47:69]
    node _T_67 = mux(_T_16, UInt<6>("h2b"), _T_66) @[Mux.scala 47:69]
    node _T_68 = mux(_T_17, UInt<6>("h2a"), _T_67) @[Mux.scala 47:69]
    node _T_69 = mux(_T_18, UInt<6>("h29"), _T_68) @[Mux.scala 47:69]
    node _T_70 = mux(_T_19, UInt<6>("h28"), _T_69) @[Mux.scala 47:69]
    node _T_71 = mux(_T_20, UInt<6>("h27"), _T_70) @[Mux.scala 47:69]
    node _T_72 = mux(_T_21, UInt<6>("h26"), _T_71) @[Mux.scala 47:69]
    node _T_73 = mux(_T_22, UInt<6>("h25"), _T_72) @[Mux.scala 47:69]
    node _T_74 = mux(_T_23, UInt<6>("h24"), _T_73) @[Mux.scala 47:69]
    node _T_75 = mux(_T_24, UInt<6>("h23"), _T_74) @[Mux.scala 47:69]
    node _T_76 = mux(_T_25, UInt<6>("h22"), _T_75) @[Mux.scala 47:69]
    node _T_77 = mux(_T_26, UInt<6>("h21"), _T_76) @[Mux.scala 47:69]
    node _T_78 = mux(_T_27, UInt<6>("h20"), _T_77) @[Mux.scala 47:69]
    node _T_79 = mux(_T_28, UInt<5>("h1f"), _T_78) @[Mux.scala 47:69]
    node _T_80 = mux(_T_29, UInt<5>("h1e"), _T_79) @[Mux.scala 47:69]
    node _T_81 = mux(_T_30, UInt<5>("h1d"), _T_80) @[Mux.scala 47:69]
    node _T_82 = mux(_T_31, UInt<5>("h1c"), _T_81) @[Mux.scala 47:69]
    node _T_83 = mux(_T_32, UInt<5>("h1b"), _T_82) @[Mux.scala 47:69]
    node _T_84 = mux(_T_33, UInt<5>("h1a"), _T_83) @[Mux.scala 47:69]
    node _T_85 = mux(_T_34, UInt<5>("h19"), _T_84) @[Mux.scala 47:69]
    node _T_86 = mux(_T_35, UInt<5>("h18"), _T_85) @[Mux.scala 47:69]
    node _T_87 = mux(_T_36, UInt<5>("h17"), _T_86) @[Mux.scala 47:69]
    node _T_88 = mux(_T_37, UInt<5>("h16"), _T_87) @[Mux.scala 47:69]
    node _T_89 = mux(_T_38, UInt<5>("h15"), _T_88) @[Mux.scala 47:69]
    node _T_90 = mux(_T_39, UInt<5>("h14"), _T_89) @[Mux.scala 47:69]
    node _T_91 = mux(_T_40, UInt<5>("h13"), _T_90) @[Mux.scala 47:69]
    node _T_92 = mux(_T_41, UInt<5>("h12"), _T_91) @[Mux.scala 47:69]
    node _T_93 = mux(_T_42, UInt<5>("h11"), _T_92) @[Mux.scala 47:69]
    node _T_94 = mux(_T_43, UInt<5>("h10"), _T_93) @[Mux.scala 47:69]
    node _T_95 = mux(_T_44, UInt<4>("hf"), _T_94) @[Mux.scala 47:69]
    node _T_96 = mux(_T_45, UInt<4>("he"), _T_95) @[Mux.scala 47:69]
    node _T_97 = mux(_T_46, UInt<4>("hd"), _T_96) @[Mux.scala 47:69]
    node _T_98 = mux(_T_47, UInt<4>("hc"), _T_97) @[Mux.scala 47:69]
    node _T_99 = mux(_T_48, UInt<4>("hb"), _T_98) @[Mux.scala 47:69]
    node _T_100 = mux(_T_49, UInt<4>("ha"), _T_99) @[Mux.scala 47:69]
    node _T_101 = mux(_T_50, UInt<4>("h9"), _T_100) @[Mux.scala 47:69]
    node _T_102 = mux(_T_51, UInt<4>("h8"), _T_101) @[Mux.scala 47:69]
    node _T_103 = mux(_T_52, UInt<3>("h7"), _T_102) @[Mux.scala 47:69]
    node _T_104 = mux(_T_53, UInt<3>("h6"), _T_103) @[Mux.scala 47:69]
    node _T_105 = mux(_T_54, UInt<3>("h5"), _T_104) @[Mux.scala 47:69]
    node _T_106 = mux(_T_55, UInt<3>("h4"), _T_105) @[Mux.scala 47:69]
    node _T_107 = mux(_T_56, UInt<2>("h3"), _T_106) @[Mux.scala 47:69]
    node _T_108 = mux(_T_57, UInt<2>("h2"), _T_107) @[Mux.scala 47:69]
    node _T_109 = mux(_T_58, UInt<1>("h1"), _T_108) @[Mux.scala 47:69]
    node _T_110 = mux(_T_59, UInt<1>("h0"), _T_109) @[Mux.scala 47:69]
    node _T_111 = dshl(_T_5, _T_110) @[rawFloatFromFN.scala 54:36]
    node _T_112 = bits(_T_111, 50, 0) @[rawFloatFromFN.scala 54:47]
    node _T_113 = shl(_T_112, 1) @[rawFloatFromFN.scala 54:64]
    node _T_114 = xor(_T_110, UInt<12>("hfff")) @[rawFloatFromFN.scala 57:26]
    node _T_115 = mux(_T_6, _T_114, _T_4) @[rawFloatFromFN.scala 56:16]
    node _T_116 = mux(_T_6, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 60:27]
    node _T_117 = or(UInt<11>("h400"), _T_116) @[rawFloatFromFN.scala 60:22]
    node _T_118 = add(_T_115, _T_117) @[rawFloatFromFN.scala 59:15]
    node _T_119 = tail(_T_118, 1) @[rawFloatFromFN.scala 59:15]
    node _T_120 = and(_T_6, _T_7) @[rawFloatFromFN.scala 62:34]
    node _T_121 = bits(_T_119, 11, 10) @[rawFloatFromFN.scala 63:37]
    node _T_122 = eq(_T_121, UInt<2>("h3")) @[rawFloatFromFN.scala 63:62]
    wire _T_123 : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<13>, sig : UInt<54>} @[rawFloatFromFN.scala 65:23]
    _T_123 is invalid @[rawFloatFromFN.scala 65:23]
    node _T_124 = eq(_T_7, UInt<1>("h0")) @[rawFloatFromFN.scala 66:36]
    node _T_125 = and(_T_122, _T_124) @[rawFloatFromFN.scala 66:33]
    _T_123.isNaN <= _T_125 @[rawFloatFromFN.scala 66:20]
    node _T_126 = and(_T_122, _T_7) @[rawFloatFromFN.scala 67:33]
    _T_123.isInf <= _T_126 @[rawFloatFromFN.scala 67:20]
    _T_123.isZero <= _T_120 @[rawFloatFromFN.scala 68:20]
    _T_123.sign <= _T_3 @[rawFloatFromFN.scala 69:20]
    node _T_127 = bits(_T_119, 11, 0) @[rawFloatFromFN.scala 70:34]
    node _T_128 = cvt(_T_127) @[rawFloatFromFN.scala 70:48]
    _T_123.sExp <= _T_128 @[rawFloatFromFN.scala 70:20]
    node _T_129 = eq(_T_120, UInt<1>("h0")) @[rawFloatFromFN.scala 72:29]
    node _T_130 = mux(_T_6, _T_113, _T_5) @[rawFloatFromFN.scala 72:42]
    node _T_131 = cat(UInt<1>("h0"), _T_129) @[Cat.scala 29:58]
    node _T_132 = cat(_T_131, _T_130) @[Cat.scala 29:58]
    _T_123.sig <= _T_132 @[rawFloatFromFN.scala 71:17]
    node _T_133 = bits(_T_123.sExp, 11, 9) @[recFNFromFN.scala 48:53]
    node _T_134 = mux(_T_123.isZero, UInt<3>("h0"), _T_133) @[recFNFromFN.scala 48:16]
    node _T_135 = mux(_T_123.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
    node _T_136 = or(_T_134, _T_135) @[recFNFromFN.scala 48:79]
    node _T_137 = bits(_T_123.sExp, 8, 0) @[recFNFromFN.scala 50:23]
    node _T_138 = bits(_T_123.sig, 51, 0) @[recFNFromFN.scala 51:22]
    node _T_139 = cat(_T_137, _T_138) @[Cat.scala 29:58]
    node _T_140 = cat(_T_123.sign, _T_136) @[Cat.scala 29:58]
    node _T_141 = cat(_T_140, _T_139) @[Cat.scala 29:58]
    ds.io.a <= _T_141 @[ValExec_DivSqrtRecFN_small.scala 165:13]
    ds.io.roundingMode <= io.input.bits.roundingMode @[ValExec_DivSqrtRecFN_small.scala 166:26]
    ds.io.detectTininess <= io.input.bits.detectTininess @[ValExec_DivSqrtRecFN_small.scala 167:26]
    io.output.a <= cq.io.deq.bits.a @[ValExec_DivSqrtRecFN_small.scala 169:17]
    io.output.roundingMode <= cq.io.deq.bits.roundingMode @[ValExec_DivSqrtRecFN_small.scala 170:30]
    io.output.detectTininess <= cq.io.deq.bits.detectTininess @[ValExec_DivSqrtRecFN_small.scala 171:30]
    io.expected.out <= cq.io.deq.bits.out @[ValExec_DivSqrtRecFN_small.scala 173:21]
    io.expected.exceptionFlags <= cq.io.deq.bits.exceptionFlags @[ValExec_DivSqrtRecFN_small.scala 174:32]
    node _T_142 = bits(cq.io.deq.bits.out, 63, 63) @[rawFloatFromFN.scala 46:22]
    node _T_143 = bits(cq.io.deq.bits.out, 62, 52) @[rawFloatFromFN.scala 47:23]
    node _T_144 = bits(cq.io.deq.bits.out, 51, 0) @[rawFloatFromFN.scala 48:25]
    node _T_145 = eq(_T_143, UInt<1>("h0")) @[rawFloatFromFN.scala 50:34]
    node _T_146 = eq(_T_144, UInt<1>("h0")) @[rawFloatFromFN.scala 51:38]
    node _T_147 = bits(_T_144, 0, 0) @[primitives.scala 92:52]
    node _T_148 = bits(_T_144, 1, 1) @[primitives.scala 92:52]
    node _T_149 = bits(_T_144, 2, 2) @[primitives.scala 92:52]
    node _T_150 = bits(_T_144, 3, 3) @[primitives.scala 92:52]
    node _T_151 = bits(_T_144, 4, 4) @[primitives.scala 92:52]
    node _T_152 = bits(_T_144, 5, 5) @[primitives.scala 92:52]
    node _T_153 = bits(_T_144, 6, 6) @[primitives.scala 92:52]
    node _T_154 = bits(_T_144, 7, 7) @[primitives.scala 92:52]
    node _T_155 = bits(_T_144, 8, 8) @[primitives.scala 92:52]
    node _T_156 = bits(_T_144, 9, 9) @[primitives.scala 92:52]
    node _T_157 = bits(_T_144, 10, 10) @[primitives.scala 92:52]
    node _T_158 = bits(_T_144, 11, 11) @[primitives.scala 92:52]
    node _T_159 = bits(_T_144, 12, 12) @[primitives.scala 92:52]
    node _T_160 = bits(_T_144, 13, 13) @[primitives.scala 92:52]
    node _T_161 = bits(_T_144, 14, 14) @[primitives.scala 92:52]
    node _T_162 = bits(_T_144, 15, 15) @[primitives.scala 92:52]
    node _T_163 = bits(_T_144, 16, 16) @[primitives.scala 92:52]
    node _T_164 = bits(_T_144, 17, 17) @[primitives.scala 92:52]
    node _T_165 = bits(_T_144, 18, 18) @[primitives.scala 92:52]
    node _T_166 = bits(_T_144, 19, 19) @[primitives.scala 92:52]
    node _T_167 = bits(_T_144, 20, 20) @[primitives.scala 92:52]
    node _T_168 = bits(_T_144, 21, 21) @[primitives.scala 92:52]
    node _T_169 = bits(_T_144, 22, 22) @[primitives.scala 92:52]
    node _T_170 = bits(_T_144, 23, 23) @[primitives.scala 92:52]
    node _T_171 = bits(_T_144, 24, 24) @[primitives.scala 92:52]
    node _T_172 = bits(_T_144, 25, 25) @[primitives.scala 92:52]
    node _T_173 = bits(_T_144, 26, 26) @[primitives.scala 92:52]
    node _T_174 = bits(_T_144, 27, 27) @[primitives.scala 92:52]
    node _T_175 = bits(_T_144, 28, 28) @[primitives.scala 92:52]
    node _T_176 = bits(_T_144, 29, 29) @[primitives.scala 92:52]
    node _T_177 = bits(_T_144, 30, 30) @[primitives.scala 92:52]
    node _T_178 = bits(_T_144, 31, 31) @[primitives.scala 92:52]
    node _T_179 = bits(_T_144, 32, 32) @[primitives.scala 92:52]
    node _T_180 = bits(_T_144, 33, 33) @[primitives.scala 92:52]
    node _T_181 = bits(_T_144, 34, 34) @[primitives.scala 92:52]
    node _T_182 = bits(_T_144, 35, 35) @[primitives.scala 92:52]
    node _T_183 = bits(_T_144, 36, 36) @[primitives.scala 92:52]
    node _T_184 = bits(_T_144, 37, 37) @[primitives.scala 92:52]
    node _T_185 = bits(_T_144, 38, 38) @[primitives.scala 92:52]
    node _T_186 = bits(_T_144, 39, 39) @[primitives.scala 92:52]
    node _T_187 = bits(_T_144, 40, 40) @[primitives.scala 92:52]
    node _T_188 = bits(_T_144, 41, 41) @[primitives.scala 92:52]
    node _T_189 = bits(_T_144, 42, 42) @[primitives.scala 92:52]
    node _T_190 = bits(_T_144, 43, 43) @[primitives.scala 92:52]
    node _T_191 = bits(_T_144, 44, 44) @[primitives.scala 92:52]
    node _T_192 = bits(_T_144, 45, 45) @[primitives.scala 92:52]
    node _T_193 = bits(_T_144, 46, 46) @[primitives.scala 92:52]
    node _T_194 = bits(_T_144, 47, 47) @[primitives.scala 92:52]
    node _T_195 = bits(_T_144, 48, 48) @[primitives.scala 92:52]
    node _T_196 = bits(_T_144, 49, 49) @[primitives.scala 92:52]
    node _T_197 = bits(_T_144, 50, 50) @[primitives.scala 92:52]
    node _T_198 = bits(_T_144, 51, 51) @[primitives.scala 92:52]
    node _T_199 = mux(_T_148, UInt<6>("h32"), UInt<6>("h33")) @[Mux.scala 47:69]
    node _T_200 = mux(_T_149, UInt<6>("h31"), _T_199) @[Mux.scala 47:69]
    node _T_201 = mux(_T_150, UInt<6>("h30"), _T_200) @[Mux.scala 47:69]
    node _T_202 = mux(_T_151, UInt<6>("h2f"), _T_201) @[Mux.scala 47:69]
    node _T_203 = mux(_T_152, UInt<6>("h2e"), _T_202) @[Mux.scala 47:69]
    node _T_204 = mux(_T_153, UInt<6>("h2d"), _T_203) @[Mux.scala 47:69]
    node _T_205 = mux(_T_154, UInt<6>("h2c"), _T_204) @[Mux.scala 47:69]
    node _T_206 = mux(_T_155, UInt<6>("h2b"), _T_205) @[Mux.scala 47:69]
    node _T_207 = mux(_T_156, UInt<6>("h2a"), _T_206) @[Mux.scala 47:69]
    node _T_208 = mux(_T_157, UInt<6>("h29"), _T_207) @[Mux.scala 47:69]
    node _T_209 = mux(_T_158, UInt<6>("h28"), _T_208) @[Mux.scala 47:69]
    node _T_210 = mux(_T_159, UInt<6>("h27"), _T_209) @[Mux.scala 47:69]
    node _T_211 = mux(_T_160, UInt<6>("h26"), _T_210) @[Mux.scala 47:69]
    node _T_212 = mux(_T_161, UInt<6>("h25"), _T_211) @[Mux.scala 47:69]
    node _T_213 = mux(_T_162, UInt<6>("h24"), _T_212) @[Mux.scala 47:69]
    node _T_214 = mux(_T_163, UInt<6>("h23"), _T_213) @[Mux.scala 47:69]
    node _T_215 = mux(_T_164, UInt<6>("h22"), _T_214) @[Mux.scala 47:69]
    node _T_216 = mux(_T_165, UInt<6>("h21"), _T_215) @[Mux.scala 47:69]
    node _T_217 = mux(_T_166, UInt<6>("h20"), _T_216) @[Mux.scala 47:69]
    node _T_218 = mux(_T_167, UInt<5>("h1f"), _T_217) @[Mux.scala 47:69]
    node _T_219 = mux(_T_168, UInt<5>("h1e"), _T_218) @[Mux.scala 47:69]
    node _T_220 = mux(_T_169, UInt<5>("h1d"), _T_219) @[Mux.scala 47:69]
    node _T_221 = mux(_T_170, UInt<5>("h1c"), _T_220) @[Mux.scala 47:69]
    node _T_222 = mux(_T_171, UInt<5>("h1b"), _T_221) @[Mux.scala 47:69]
    node _T_223 = mux(_T_172, UInt<5>("h1a"), _T_222) @[Mux.scala 47:69]
    node _T_224 = mux(_T_173, UInt<5>("h19"), _T_223) @[Mux.scala 47:69]
    node _T_225 = mux(_T_174, UInt<5>("h18"), _T_224) @[Mux.scala 47:69]
    node _T_226 = mux(_T_175, UInt<5>("h17"), _T_225) @[Mux.scala 47:69]
    node _T_227 = mux(_T_176, UInt<5>("h16"), _T_226) @[Mux.scala 47:69]
    node _T_228 = mux(_T_177, UInt<5>("h15"), _T_227) @[Mux.scala 47:69]
    node _T_229 = mux(_T_178, UInt<5>("h14"), _T_228) @[Mux.scala 47:69]
    node _T_230 = mux(_T_179, UInt<5>("h13"), _T_229) @[Mux.scala 47:69]
    node _T_231 = mux(_T_180, UInt<5>("h12"), _T_230) @[Mux.scala 47:69]
    node _T_232 = mux(_T_181, UInt<5>("h11"), _T_231) @[Mux.scala 47:69]
    node _T_233 = mux(_T_182, UInt<5>("h10"), _T_232) @[Mux.scala 47:69]
    node _T_234 = mux(_T_183, UInt<4>("hf"), _T_233) @[Mux.scala 47:69]
    node _T_235 = mux(_T_184, UInt<4>("he"), _T_234) @[Mux.scala 47:69]
    node _T_236 = mux(_T_185, UInt<4>("hd"), _T_235) @[Mux.scala 47:69]
    node _T_237 = mux(_T_186, UInt<4>("hc"), _T_236) @[Mux.scala 47:69]
    node _T_238 = mux(_T_187, UInt<4>("hb"), _T_237) @[Mux.scala 47:69]
    node _T_239 = mux(_T_188, UInt<4>("ha"), _T_238) @[Mux.scala 47:69]
    node _T_240 = mux(_T_189, UInt<4>("h9"), _T_239) @[Mux.scala 47:69]
    node _T_241 = mux(_T_190, UInt<4>("h8"), _T_240) @[Mux.scala 47:69]
    node _T_242 = mux(_T_191, UInt<3>("h7"), _T_241) @[Mux.scala 47:69]
    node _T_243 = mux(_T_192, UInt<3>("h6"), _T_242) @[Mux.scala 47:69]
    node _T_244 = mux(_T_193, UInt<3>("h5"), _T_243) @[Mux.scala 47:69]
    node _T_245 = mux(_T_194, UInt<3>("h4"), _T_244) @[Mux.scala 47:69]
    node _T_246 = mux(_T_195, UInt<2>("h3"), _T_245) @[Mux.scala 47:69]
    node _T_247 = mux(_T_196, UInt<2>("h2"), _T_246) @[Mux.scala 47:69]
    node _T_248 = mux(_T_197, UInt<1>("h1"), _T_247) @[Mux.scala 47:69]
    node _T_249 = mux(_T_198, UInt<1>("h0"), _T_248) @[Mux.scala 47:69]
    node _T_250 = dshl(_T_144, _T_249) @[rawFloatFromFN.scala 54:36]
    node _T_251 = bits(_T_250, 50, 0) @[rawFloatFromFN.scala 54:47]
    node _T_252 = shl(_T_251, 1) @[rawFloatFromFN.scala 54:64]
    node _T_253 = xor(_T_249, UInt<12>("hfff")) @[rawFloatFromFN.scala 57:26]
    node _T_254 = mux(_T_145, _T_253, _T_143) @[rawFloatFromFN.scala 56:16]
    node _T_255 = mux(_T_145, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 60:27]
    node _T_256 = or(UInt<11>("h400"), _T_255) @[rawFloatFromFN.scala 60:22]
    node _T_257 = add(_T_254, _T_256) @[rawFloatFromFN.scala 59:15]
    node _T_258 = tail(_T_257, 1) @[rawFloatFromFN.scala 59:15]
    node _T_259 = and(_T_145, _T_146) @[rawFloatFromFN.scala 62:34]
    node _T_260 = bits(_T_258, 11, 10) @[rawFloatFromFN.scala 63:37]
    node _T_261 = eq(_T_260, UInt<2>("h3")) @[rawFloatFromFN.scala 63:62]
    wire _T_262 : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<13>, sig : UInt<54>} @[rawFloatFromFN.scala 65:23]
    _T_262 is invalid @[rawFloatFromFN.scala 65:23]
    node _T_263 = eq(_T_146, UInt<1>("h0")) @[rawFloatFromFN.scala 66:36]
    node _T_264 = and(_T_261, _T_263) @[rawFloatFromFN.scala 66:33]
    _T_262.isNaN <= _T_264 @[rawFloatFromFN.scala 66:20]
    node _T_265 = and(_T_261, _T_146) @[rawFloatFromFN.scala 67:33]
    _T_262.isInf <= _T_265 @[rawFloatFromFN.scala 67:20]
    _T_262.isZero <= _T_259 @[rawFloatFromFN.scala 68:20]
    _T_262.sign <= _T_142 @[rawFloatFromFN.scala 69:20]
    node _T_266 = bits(_T_258, 11, 0) @[rawFloatFromFN.scala 70:34]
    node _T_267 = cvt(_T_266) @[rawFloatFromFN.scala 70:48]
    _T_262.sExp <= _T_267 @[rawFloatFromFN.scala 70:20]
    node _T_268 = eq(_T_259, UInt<1>("h0")) @[rawFloatFromFN.scala 72:29]
    node _T_269 = mux(_T_145, _T_252, _T_144) @[rawFloatFromFN.scala 72:42]
    node _T_270 = cat(UInt<1>("h0"), _T_268) @[Cat.scala 29:58]
    node _T_271 = cat(_T_270, _T_269) @[Cat.scala 29:58]
    _T_262.sig <= _T_271 @[rawFloatFromFN.scala 71:17]
    node _T_272 = bits(_T_262.sExp, 11, 9) @[recFNFromFN.scala 48:53]
    node _T_273 = mux(_T_262.isZero, UInt<3>("h0"), _T_272) @[recFNFromFN.scala 48:16]
    node _T_274 = mux(_T_262.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
    node _T_275 = or(_T_273, _T_274) @[recFNFromFN.scala 48:79]
    node _T_276 = bits(_T_262.sExp, 8, 0) @[recFNFromFN.scala 50:23]
    node _T_277 = bits(_T_262.sig, 51, 0) @[recFNFromFN.scala 51:22]
    node _T_278 = cat(_T_276, _T_277) @[Cat.scala 29:58]
    node _T_279 = cat(_T_262.sign, _T_275) @[Cat.scala 29:58]
    node _T_280 = cat(_T_279, _T_278) @[Cat.scala 29:58]
    io.expected.recOut <= _T_280 @[ValExec_DivSqrtRecFN_small.scala 175:24]
    io.actual.exceptionFlags <= ds.io.exceptionFlags @[ValExec_DivSqrtRecFN_small.scala 177:30]
    io.actual.out <= ds.io.out @[ValExec_DivSqrtRecFN_small.scala 178:19]
    cq.io.deq.ready <= ds.io.outValid_sqrt @[ValExec_DivSqrtRecFN_small.scala 180:21]
    io.check <= ds.io.outValid_sqrt @[ValExec_DivSqrtRecFN_small.scala 182:14]
    node _T_281 = bits(io.actual.out, 64, 61) @[package.scala 46:22]
    node _T_282 = bits(io.expected.recOut, 64, 61) @[package.scala 47:22]
    node _T_283 = bits(_T_281, 2, 0) @[package.scala 48:19]
    node _T_284 = eq(_T_283, UInt<1>("h0")) @[package.scala 48:26]
    node _T_285 = bits(_T_281, 2, 0) @[package.scala 48:44]
    node _T_286 = eq(_T_285, UInt<3>("h7")) @[package.scala 48:51]
    node _T_287 = or(_T_284, _T_286) @[package.scala 48:35]
    node _T_288 = eq(_T_281, _T_282) @[package.scala 49:20]
    node _T_289 = bits(io.actual.out, 51, 0) @[package.scala 49:36]
    node _T_290 = bits(io.expected.recOut, 51, 0) @[package.scala 49:59]
    node _T_291 = eq(_T_289, _T_290) @[package.scala 49:54]
    node _T_292 = and(_T_288, _T_291) @[package.scala 49:31]
    node _T_293 = bits(_T_281, 2, 0) @[package.scala 50:23]
    node _T_294 = eq(_T_293, UInt<3>("h6")) @[package.scala 50:30]
    node _T_295 = eq(_T_281, _T_282) @[package.scala 50:47]
    node _T_296 = eq(io.actual.out, io.expected.recOut) @[package.scala 50:62]
    node _T_297 = mux(_T_294, _T_295, _T_296) @[package.scala 50:16]
    node _T_298 = mux(_T_287, _T_292, _T_297) @[package.scala 48:12]
    node _T_299 = and(cq.io.deq.valid, _T_298) @[ValExec_DivSqrtRecFN_small.scala 184:25]
    node _T_300 = eq(io.actual.exceptionFlags, io.expected.exceptionFlags) @[ValExec_DivSqrtRecFN_small.scala 186:35]
    node _T_301 = and(_T_299, _T_300) @[ValExec_DivSqrtRecFN_small.scala 185:75]
    io.pass <= _T_301 @[ValExec_DivSqrtRecFN_small.scala 183:13]
