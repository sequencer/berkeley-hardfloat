circuit ValExec_fNFromRecFN :
  module ValExec_fNFromRecFN :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip a : UInt<32>, out : UInt<32>, check : UInt<1>, pass : UInt<1>}
  
    clock is invalid
    reset is invalid
    io is invalid
    node _T = bits(io.a, 31, 31) @[rawFloatFromFN.scala 46:22]
    node _T_1 = bits(io.a, 30, 23) @[rawFloatFromFN.scala 47:23]
    node _T_2 = bits(io.a, 22, 0) @[rawFloatFromFN.scala 48:25]
    node _T_3 = eq(_T_1, UInt<1>("h0")) @[rawFloatFromFN.scala 50:34]
    node _T_4 = eq(_T_2, UInt<1>("h0")) @[rawFloatFromFN.scala 51:38]
    node _T_5 = bits(_T_2, 0, 0) @[primitives.scala 92:52]
    node _T_6 = bits(_T_2, 1, 1) @[primitives.scala 92:52]
    node _T_7 = bits(_T_2, 2, 2) @[primitives.scala 92:52]
    node _T_8 = bits(_T_2, 3, 3) @[primitives.scala 92:52]
    node _T_9 = bits(_T_2, 4, 4) @[primitives.scala 92:52]
    node _T_10 = bits(_T_2, 5, 5) @[primitives.scala 92:52]
    node _T_11 = bits(_T_2, 6, 6) @[primitives.scala 92:52]
    node _T_12 = bits(_T_2, 7, 7) @[primitives.scala 92:52]
    node _T_13 = bits(_T_2, 8, 8) @[primitives.scala 92:52]
    node _T_14 = bits(_T_2, 9, 9) @[primitives.scala 92:52]
    node _T_15 = bits(_T_2, 10, 10) @[primitives.scala 92:52]
    node _T_16 = bits(_T_2, 11, 11) @[primitives.scala 92:52]
    node _T_17 = bits(_T_2, 12, 12) @[primitives.scala 92:52]
    node _T_18 = bits(_T_2, 13, 13) @[primitives.scala 92:52]
    node _T_19 = bits(_T_2, 14, 14) @[primitives.scala 92:52]
    node _T_20 = bits(_T_2, 15, 15) @[primitives.scala 92:52]
    node _T_21 = bits(_T_2, 16, 16) @[primitives.scala 92:52]
    node _T_22 = bits(_T_2, 17, 17) @[primitives.scala 92:52]
    node _T_23 = bits(_T_2, 18, 18) @[primitives.scala 92:52]
    node _T_24 = bits(_T_2, 19, 19) @[primitives.scala 92:52]
    node _T_25 = bits(_T_2, 20, 20) @[primitives.scala 92:52]
    node _T_26 = bits(_T_2, 21, 21) @[primitives.scala 92:52]
    node _T_27 = bits(_T_2, 22, 22) @[primitives.scala 92:52]
    node _T_28 = mux(_T_6, UInt<5>("h15"), UInt<5>("h16")) @[Mux.scala 47:69]
    node _T_29 = mux(_T_7, UInt<5>("h14"), _T_28) @[Mux.scala 47:69]
    node _T_30 = mux(_T_8, UInt<5>("h13"), _T_29) @[Mux.scala 47:69]
    node _T_31 = mux(_T_9, UInt<5>("h12"), _T_30) @[Mux.scala 47:69]
    node _T_32 = mux(_T_10, UInt<5>("h11"), _T_31) @[Mux.scala 47:69]
    node _T_33 = mux(_T_11, UInt<5>("h10"), _T_32) @[Mux.scala 47:69]
    node _T_34 = mux(_T_12, UInt<4>("hf"), _T_33) @[Mux.scala 47:69]
    node _T_35 = mux(_T_13, UInt<4>("he"), _T_34) @[Mux.scala 47:69]
    node _T_36 = mux(_T_14, UInt<4>("hd"), _T_35) @[Mux.scala 47:69]
    node _T_37 = mux(_T_15, UInt<4>("hc"), _T_36) @[Mux.scala 47:69]
    node _T_38 = mux(_T_16, UInt<4>("hb"), _T_37) @[Mux.scala 47:69]
    node _T_39 = mux(_T_17, UInt<4>("ha"), _T_38) @[Mux.scala 47:69]
    node _T_40 = mux(_T_18, UInt<4>("h9"), _T_39) @[Mux.scala 47:69]
    node _T_41 = mux(_T_19, UInt<4>("h8"), _T_40) @[Mux.scala 47:69]
    node _T_42 = mux(_T_20, UInt<3>("h7"), _T_41) @[Mux.scala 47:69]
    node _T_43 = mux(_T_21, UInt<3>("h6"), _T_42) @[Mux.scala 47:69]
    node _T_44 = mux(_T_22, UInt<3>("h5"), _T_43) @[Mux.scala 47:69]
    node _T_45 = mux(_T_23, UInt<3>("h4"), _T_44) @[Mux.scala 47:69]
    node _T_46 = mux(_T_24, UInt<2>("h3"), _T_45) @[Mux.scala 47:69]
    node _T_47 = mux(_T_25, UInt<2>("h2"), _T_46) @[Mux.scala 47:69]
    node _T_48 = mux(_T_26, UInt<1>("h1"), _T_47) @[Mux.scala 47:69]
    node _T_49 = mux(_T_27, UInt<1>("h0"), _T_48) @[Mux.scala 47:69]
    node _T_50 = dshl(_T_2, _T_49) @[rawFloatFromFN.scala 54:36]
    node _T_51 = bits(_T_50, 21, 0) @[rawFloatFromFN.scala 54:47]
    node _T_52 = shl(_T_51, 1) @[rawFloatFromFN.scala 54:64]
    node _T_53 = xor(_T_49, UInt<9>("h1ff")) @[rawFloatFromFN.scala 57:26]
    node _T_54 = mux(_T_3, _T_53, _T_1) @[rawFloatFromFN.scala 56:16]
    node _T_55 = mux(_T_3, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 60:27]
    node _T_56 = or(UInt<8>("h80"), _T_55) @[rawFloatFromFN.scala 60:22]
    node _T_57 = add(_T_54, _T_56) @[rawFloatFromFN.scala 59:15]
    node _T_58 = tail(_T_57, 1) @[rawFloatFromFN.scala 59:15]
    node _T_59 = and(_T_3, _T_4) @[rawFloatFromFN.scala 62:34]
    node _T_60 = bits(_T_58, 8, 7) @[rawFloatFromFN.scala 63:37]
    node _T_61 = eq(_T_60, UInt<2>("h3")) @[rawFloatFromFN.scala 63:62]
    wire _T_62 : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromFN.scala 65:23]
    _T_62 is invalid @[rawFloatFromFN.scala 65:23]
    node _T_63 = eq(_T_4, UInt<1>("h0")) @[rawFloatFromFN.scala 66:36]
    node _T_64 = and(_T_61, _T_63) @[rawFloatFromFN.scala 66:33]
    _T_62.isNaN <= _T_64 @[rawFloatFromFN.scala 66:20]
    node _T_65 = and(_T_61, _T_4) @[rawFloatFromFN.scala 67:33]
    _T_62.isInf <= _T_65 @[rawFloatFromFN.scala 67:20]
    _T_62.isZero <= _T_59 @[rawFloatFromFN.scala 68:20]
    _T_62.sign <= _T @[rawFloatFromFN.scala 69:20]
    node _T_66 = bits(_T_58, 8, 0) @[rawFloatFromFN.scala 70:34]
    node _T_67 = cvt(_T_66) @[rawFloatFromFN.scala 70:48]
    _T_62.sExp <= _T_67 @[rawFloatFromFN.scala 70:20]
    node _T_68 = eq(_T_59, UInt<1>("h0")) @[rawFloatFromFN.scala 72:29]
    node _T_69 = mux(_T_3, _T_52, _T_2) @[rawFloatFromFN.scala 72:42]
    node _T_70 = cat(UInt<1>("h0"), _T_68) @[Cat.scala 29:58]
    node _T_71 = cat(_T_70, _T_69) @[Cat.scala 29:58]
    _T_62.sig <= _T_71 @[rawFloatFromFN.scala 71:17]
    node _T_72 = bits(_T_62.sExp, 8, 6) @[recFNFromFN.scala 48:53]
    node _T_73 = mux(_T_62.isZero, UInt<3>("h0"), _T_72) @[recFNFromFN.scala 48:16]
    node _T_74 = mux(_T_62.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
    node _T_75 = or(_T_73, _T_74) @[recFNFromFN.scala 48:79]
    node _T_76 = bits(_T_62.sExp, 5, 0) @[recFNFromFN.scala 50:23]
    node _T_77 = bits(_T_62.sig, 22, 0) @[recFNFromFN.scala 51:22]
    node _T_78 = cat(_T_76, _T_77) @[Cat.scala 29:58]
    node _T_79 = cat(_T_62.sign, _T_75) @[Cat.scala 29:58]
    node _T_80 = cat(_T_79, _T_78) @[Cat.scala 29:58]
    node _T_81 = bits(_T_80, 31, 23) @[rawFloatFromRecFN.scala 50:21]
    node _T_82 = bits(_T_81, 8, 6) @[rawFloatFromRecFN.scala 51:29]
    node _T_83 = eq(_T_82, UInt<1>("h0")) @[rawFloatFromRecFN.scala 51:54]
    node _T_84 = bits(_T_81, 8, 7) @[rawFloatFromRecFN.scala 52:29]
    node _T_85 = eq(_T_84, UInt<2>("h3")) @[rawFloatFromRecFN.scala 52:54]
    wire _T_86 : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromRecFN.scala 54:23]
    _T_86 is invalid @[rawFloatFromRecFN.scala 54:23]
    node _T_87 = bits(_T_81, 6, 6) @[rawFloatFromRecFN.scala 55:41]
    node _T_88 = and(_T_85, _T_87) @[rawFloatFromRecFN.scala 55:33]
    _T_86.isNaN <= _T_88 @[rawFloatFromRecFN.scala 55:20]
    node _T_89 = bits(_T_81, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _T_90 = eq(_T_89, UInt<1>("h0")) @[rawFloatFromRecFN.scala 56:36]
    node _T_91 = and(_T_85, _T_90) @[rawFloatFromRecFN.scala 56:33]
    _T_86.isInf <= _T_91 @[rawFloatFromRecFN.scala 56:20]
    _T_86.isZero <= _T_83 @[rawFloatFromRecFN.scala 57:20]
    node _T_92 = bits(_T_80, 32, 32) @[rawFloatFromRecFN.scala 58:25]
    _T_86.sign <= _T_92 @[rawFloatFromRecFN.scala 58:20]
    node _T_93 = cvt(_T_81) @[rawFloatFromRecFN.scala 59:27]
    _T_86.sExp <= _T_93 @[rawFloatFromRecFN.scala 59:20]
    node _T_94 = eq(_T_83, UInt<1>("h0")) @[rawFloatFromRecFN.scala 60:39]
    node _T_95 = bits(_T_80, 22, 0) @[rawFloatFromRecFN.scala 60:51]
    node _T_96 = cat(UInt<1>("h0"), _T_94) @[Cat.scala 29:58]
    node _T_97 = cat(_T_96, _T_95) @[Cat.scala 29:58]
    _T_86.sig <= _T_97 @[rawFloatFromRecFN.scala 60:20]
    node _T_98 = lt(_T_86.sExp, asSInt(UInt<9>("h82"))) @[fNFromRecFN.scala 50:39]
    node _T_99 = bits(_T_86.sExp, 4, 0) @[fNFromRecFN.scala 51:51]
    node _T_100 = sub(UInt<1>("h1"), _T_99) @[fNFromRecFN.scala 51:39]
    node _T_101 = tail(_T_100, 1) @[fNFromRecFN.scala 51:39]
    node _T_102 = shr(_T_86.sig, 1) @[fNFromRecFN.scala 52:38]
    node _T_103 = dshr(_T_102, _T_101) @[fNFromRecFN.scala 52:42]
    node _T_104 = bits(_T_103, 22, 0) @[fNFromRecFN.scala 52:60]
    node _T_105 = bits(_T_86.sExp, 7, 0) @[fNFromRecFN.scala 57:27]
    node _T_106 = sub(_T_105, UInt<8>("h81")) @[fNFromRecFN.scala 57:45]
    node _T_107 = tail(_T_106, 1) @[fNFromRecFN.scala 57:45]
    node _T_108 = mux(_T_98, UInt<1>("h0"), _T_107) @[fNFromRecFN.scala 55:16]
    node _T_109 = or(_T_86.isNaN, _T_86.isInf) @[fNFromRecFN.scala 59:44]
    node _T_110 = bits(_T_109, 0, 0) @[Bitwise.scala 72:15]
    node _T_111 = mux(_T_110, UInt<8>("hff"), UInt<8>("h0")) @[Bitwise.scala 72:12]
    node _T_112 = or(_T_108, _T_111) @[fNFromRecFN.scala 59:15]
    node _T_113 = bits(_T_86.sig, 22, 0) @[fNFromRecFN.scala 63:52]
    node _T_114 = mux(_T_86.isInf, UInt<1>("h0"), _T_113) @[fNFromRecFN.scala 63:20]
    node _T_115 = mux(_T_98, _T_104, _T_114) @[fNFromRecFN.scala 61:16]
    node _T_116 = cat(_T_86.sign, _T_112) @[Cat.scala 29:58]
    node _T_117 = cat(_T_116, _T_115) @[Cat.scala 29:58]
    io.out <= _T_117 @[ValExec_fNFromRecFN.scala 52:12]
    io.check <= UInt<1>("h1") @[ValExec_fNFromRecFN.scala 55:14]
    node _T_118 = eq(io.out, io.a) @[ValExec_fNFromRecFN.scala 56:24]
    io.pass <= _T_118 @[ValExec_fNFromRecFN.scala 56:13]
