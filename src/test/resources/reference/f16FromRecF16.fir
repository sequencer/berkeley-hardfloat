circuit ValExec_fNFromRecFN :
  module ValExec_fNFromRecFN :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip a : UInt<16>, out : UInt<16>, check : UInt<1>, pass : UInt<1>}
  
    clock is invalid
    reset is invalid
    io is invalid
    node _T = bits(io.a, 15, 15) @[rawFloatFromFN.scala 46:22]
    node _T_1 = bits(io.a, 14, 10) @[rawFloatFromFN.scala 47:23]
    node _T_2 = bits(io.a, 9, 0) @[rawFloatFromFN.scala 48:25]
    node _T_3 = eq(_T_1, UInt<1>("h0")) @[rawFloatFromFN.scala 50:34]
    node _T_4 = eq(_T_2, UInt<1>("h0")) @[rawFloatFromFN.scala 51:38]
    node _T_5 = bits(_T_2, 0, 0) @[primitives.scala 92:52]
    node _T_6 = bits(_T_2, 1, 1) @[primitives.scala 92:52]
    node _T_7 = bits(_T_2, 2, 2) @[primitives.scala 92:52]
    node _T_8 = bits(_T_2, 3, 3) @[primitives.scala 92:52]
    node _T_9 = bits(_T_2, 4, 4) @[primitives.scala 92:52]
    node _T_10 = bits(_T_2, 5, 5) @[primitives.scala 92:52]
    node _T_11 = bits(_T_2, 6, 6) @[primitives.scala 92:52]
    node _T_12 = bits(_T_2, 7, 7) @[primitives.scala 92:52]
    node _T_13 = bits(_T_2, 8, 8) @[primitives.scala 92:52]
    node _T_14 = bits(_T_2, 9, 9) @[primitives.scala 92:52]
    node _T_15 = mux(_T_6, UInt<4>("h8"), UInt<4>("h9")) @[Mux.scala 47:69]
    node _T_16 = mux(_T_7, UInt<3>("h7"), _T_15) @[Mux.scala 47:69]
    node _T_17 = mux(_T_8, UInt<3>("h6"), _T_16) @[Mux.scala 47:69]
    node _T_18 = mux(_T_9, UInt<3>("h5"), _T_17) @[Mux.scala 47:69]
    node _T_19 = mux(_T_10, UInt<3>("h4"), _T_18) @[Mux.scala 47:69]
    node _T_20 = mux(_T_11, UInt<2>("h3"), _T_19) @[Mux.scala 47:69]
    node _T_21 = mux(_T_12, UInt<2>("h2"), _T_20) @[Mux.scala 47:69]
    node _T_22 = mux(_T_13, UInt<1>("h1"), _T_21) @[Mux.scala 47:69]
    node _T_23 = mux(_T_14, UInt<1>("h0"), _T_22) @[Mux.scala 47:69]
    node _T_24 = dshl(_T_2, _T_23) @[rawFloatFromFN.scala 54:36]
    node _T_25 = bits(_T_24, 8, 0) @[rawFloatFromFN.scala 54:47]
    node _T_26 = shl(_T_25, 1) @[rawFloatFromFN.scala 54:64]
    node _T_27 = xor(_T_23, UInt<6>("h3f")) @[rawFloatFromFN.scala 57:26]
    node _T_28 = mux(_T_3, _T_27, _T_1) @[rawFloatFromFN.scala 56:16]
    node _T_29 = mux(_T_3, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 60:27]
    node _T_30 = or(UInt<5>("h10"), _T_29) @[rawFloatFromFN.scala 60:22]
    node _T_31 = add(_T_28, _T_30) @[rawFloatFromFN.scala 59:15]
    node _T_32 = tail(_T_31, 1) @[rawFloatFromFN.scala 59:15]
    node _T_33 = and(_T_3, _T_4) @[rawFloatFromFN.scala 62:34]
    node _T_34 = bits(_T_32, 5, 4) @[rawFloatFromFN.scala 63:37]
    node _T_35 = eq(_T_34, UInt<2>("h3")) @[rawFloatFromFN.scala 63:62]
    wire _T_36 : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<7>, sig : UInt<12>} @[rawFloatFromFN.scala 65:23]
    _T_36 is invalid @[rawFloatFromFN.scala 65:23]
    node _T_37 = eq(_T_4, UInt<1>("h0")) @[rawFloatFromFN.scala 66:36]
    node _T_38 = and(_T_35, _T_37) @[rawFloatFromFN.scala 66:33]
    _T_36.isNaN <= _T_38 @[rawFloatFromFN.scala 66:20]
    node _T_39 = and(_T_35, _T_4) @[rawFloatFromFN.scala 67:33]
    _T_36.isInf <= _T_39 @[rawFloatFromFN.scala 67:20]
    _T_36.isZero <= _T_33 @[rawFloatFromFN.scala 68:20]
    _T_36.sign <= _T @[rawFloatFromFN.scala 69:20]
    node _T_40 = bits(_T_32, 5, 0) @[rawFloatFromFN.scala 70:34]
    node _T_41 = cvt(_T_40) @[rawFloatFromFN.scala 70:48]
    _T_36.sExp <= _T_41 @[rawFloatFromFN.scala 70:20]
    node _T_42 = eq(_T_33, UInt<1>("h0")) @[rawFloatFromFN.scala 72:29]
    node _T_43 = mux(_T_3, _T_26, _T_2) @[rawFloatFromFN.scala 72:42]
    node _T_44 = cat(UInt<1>("h0"), _T_42) @[Cat.scala 29:58]
    node _T_45 = cat(_T_44, _T_43) @[Cat.scala 29:58]
    _T_36.sig <= _T_45 @[rawFloatFromFN.scala 71:17]
    node _T_46 = bits(_T_36.sExp, 5, 3) @[recFNFromFN.scala 48:53]
    node _T_47 = mux(_T_36.isZero, UInt<3>("h0"), _T_46) @[recFNFromFN.scala 48:16]
    node _T_48 = mux(_T_36.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
    node _T_49 = or(_T_47, _T_48) @[recFNFromFN.scala 48:79]
    node _T_50 = bits(_T_36.sExp, 2, 0) @[recFNFromFN.scala 50:23]
    node _T_51 = bits(_T_36.sig, 9, 0) @[recFNFromFN.scala 51:22]
    node _T_52 = cat(_T_50, _T_51) @[Cat.scala 29:58]
    node _T_53 = cat(_T_36.sign, _T_49) @[Cat.scala 29:58]
    node _T_54 = cat(_T_53, _T_52) @[Cat.scala 29:58]
    node _T_55 = bits(_T_54, 15, 10) @[rawFloatFromRecFN.scala 50:21]
    node _T_56 = bits(_T_55, 5, 3) @[rawFloatFromRecFN.scala 51:29]
    node _T_57 = eq(_T_56, UInt<1>("h0")) @[rawFloatFromRecFN.scala 51:54]
    node _T_58 = bits(_T_55, 5, 4) @[rawFloatFromRecFN.scala 52:29]
    node _T_59 = eq(_T_58, UInt<2>("h3")) @[rawFloatFromRecFN.scala 52:54]
    wire _T_60 : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<7>, sig : UInt<12>} @[rawFloatFromRecFN.scala 54:23]
    _T_60 is invalid @[rawFloatFromRecFN.scala 54:23]
    node _T_61 = bits(_T_55, 3, 3) @[rawFloatFromRecFN.scala 55:41]
    node _T_62 = and(_T_59, _T_61) @[rawFloatFromRecFN.scala 55:33]
    _T_60.isNaN <= _T_62 @[rawFloatFromRecFN.scala 55:20]
    node _T_63 = bits(_T_55, 3, 3) @[rawFloatFromRecFN.scala 56:41]
    node _T_64 = eq(_T_63, UInt<1>("h0")) @[rawFloatFromRecFN.scala 56:36]
    node _T_65 = and(_T_59, _T_64) @[rawFloatFromRecFN.scala 56:33]
    _T_60.isInf <= _T_65 @[rawFloatFromRecFN.scala 56:20]
    _T_60.isZero <= _T_57 @[rawFloatFromRecFN.scala 57:20]
    node _T_66 = bits(_T_54, 16, 16) @[rawFloatFromRecFN.scala 58:25]
    _T_60.sign <= _T_66 @[rawFloatFromRecFN.scala 58:20]
    node _T_67 = cvt(_T_55) @[rawFloatFromRecFN.scala 59:27]
    _T_60.sExp <= _T_67 @[rawFloatFromRecFN.scala 59:20]
    node _T_68 = eq(_T_57, UInt<1>("h0")) @[rawFloatFromRecFN.scala 60:39]
    node _T_69 = bits(_T_54, 9, 0) @[rawFloatFromRecFN.scala 60:51]
    node _T_70 = cat(UInt<1>("h0"), _T_68) @[Cat.scala 29:58]
    node _T_71 = cat(_T_70, _T_69) @[Cat.scala 29:58]
    _T_60.sig <= _T_71 @[rawFloatFromRecFN.scala 60:20]
    node _T_72 = lt(_T_60.sExp, asSInt(UInt<6>("h12"))) @[fNFromRecFN.scala 50:39]
    node _T_73 = bits(_T_60.sExp, 3, 0) @[fNFromRecFN.scala 51:51]
    node _T_74 = sub(UInt<1>("h1"), _T_73) @[fNFromRecFN.scala 51:39]
    node _T_75 = tail(_T_74, 1) @[fNFromRecFN.scala 51:39]
    node _T_76 = shr(_T_60.sig, 1) @[fNFromRecFN.scala 52:38]
    node _T_77 = dshr(_T_76, _T_75) @[fNFromRecFN.scala 52:42]
    node _T_78 = bits(_T_77, 9, 0) @[fNFromRecFN.scala 52:60]
    node _T_79 = bits(_T_60.sExp, 4, 0) @[fNFromRecFN.scala 57:27]
    node _T_80 = sub(_T_79, UInt<5>("h11")) @[fNFromRecFN.scala 57:45]
    node _T_81 = tail(_T_80, 1) @[fNFromRecFN.scala 57:45]
    node _T_82 = mux(_T_72, UInt<1>("h0"), _T_81) @[fNFromRecFN.scala 55:16]
    node _T_83 = or(_T_60.isNaN, _T_60.isInf) @[fNFromRecFN.scala 59:44]
    node _T_84 = bits(_T_83, 0, 0) @[Bitwise.scala 72:15]
    node _T_85 = mux(_T_84, UInt<5>("h1f"), UInt<5>("h0")) @[Bitwise.scala 72:12]
    node _T_86 = or(_T_82, _T_85) @[fNFromRecFN.scala 59:15]
    node _T_87 = bits(_T_60.sig, 9, 0) @[fNFromRecFN.scala 63:52]
    node _T_88 = mux(_T_60.isInf, UInt<1>("h0"), _T_87) @[fNFromRecFN.scala 63:20]
    node _T_89 = mux(_T_72, _T_78, _T_88) @[fNFromRecFN.scala 61:16]
    node _T_90 = cat(_T_60.sign, _T_86) @[Cat.scala 29:58]
    node _T_91 = cat(_T_90, _T_89) @[Cat.scala 29:58]
    io.out <= _T_91 @[ValExec_fNFromRecFN.scala 52:12]
    io.check <= UInt<1>("h1") @[ValExec_fNFromRecFN.scala 55:14]
    node _T_92 = eq(io.out, io.a) @[ValExec_fNFromRecFN.scala 56:24]
    io.pass <= _T_92 @[ValExec_fNFromRecFN.scala 56:13]
