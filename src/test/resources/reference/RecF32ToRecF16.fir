circuit ValExec_RecFNToRecFN :
  module RoundAnyRawFNToRecFN :
    output io : { flip invalidExc : UInt<1>, flip infiniteExc : UInt<1>, flip in : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>}, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<17>, exceptionFlags : UInt<5>}
  
    io is invalid
    node roundingMode_near_even = eq(io.roundingMode, UInt<3>("h0")) @[RoundAnyRawFNToRecFN.scala 88:53]
    node roundingMode_minMag = eq(io.roundingMode, UInt<3>("h1")) @[RoundAnyRawFNToRecFN.scala 89:53]
    node roundingMode_min = eq(io.roundingMode, UInt<3>("h2")) @[RoundAnyRawFNToRecFN.scala 90:53]
    node roundingMode_max = eq(io.roundingMode, UInt<3>("h3")) @[RoundAnyRawFNToRecFN.scala 91:53]
    node roundingMode_near_maxMag = eq(io.roundingMode, UInt<3>("h4")) @[RoundAnyRawFNToRecFN.scala 92:53]
    node roundingMode_odd = eq(io.roundingMode, UInt<3>("h6")) @[RoundAnyRawFNToRecFN.scala 93:53]
    node _T = and(roundingMode_min, io.in.sign) @[RoundAnyRawFNToRecFN.scala 96:27]
    node _T_1 = eq(io.in.sign, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 96:66]
    node _T_2 = and(roundingMode_max, _T_1) @[RoundAnyRawFNToRecFN.scala 96:63]
    node roundMagUp = or(_T, _T_2) @[RoundAnyRawFNToRecFN.scala 96:42]
    node sAdjustedExp = add(io.in.sExp, asSInt(UInt<9>("h120"))) @[RoundAnyRawFNToRecFN.scala 108:24]
    node _T_3 = bits(io.in.sig, 24, 12) @[RoundAnyRawFNToRecFN.scala 114:26]
    node _T_4 = bits(io.in.sig, 11, 0) @[RoundAnyRawFNToRecFN.scala 115:26]
    node _T_5 = orr(_T_4) @[RoundAnyRawFNToRecFN.scala 115:60]
    node adjustedSig = cat(_T_3, _T_5) @[Cat.scala 29:58]
    wire common_expOut : UInt<6> @[RoundAnyRawFNToRecFN.scala 120:31]
    common_expOut is invalid @[RoundAnyRawFNToRecFN.scala 120:31]
    wire common_fractOut : UInt<10> @[RoundAnyRawFNToRecFN.scala 121:31]
    common_fractOut is invalid @[RoundAnyRawFNToRecFN.scala 121:31]
    wire common_overflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 122:37]
    common_overflow is invalid @[RoundAnyRawFNToRecFN.scala 122:37]
    wire common_totalUnderflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 123:37]
    common_totalUnderflow is invalid @[RoundAnyRawFNToRecFN.scala 123:37]
    wire common_underflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 124:37]
    common_underflow is invalid @[RoundAnyRawFNToRecFN.scala 124:37]
    wire common_inexact : UInt<1> @[RoundAnyRawFNToRecFN.scala 125:37]
    common_inexact is invalid @[RoundAnyRawFNToRecFN.scala 125:37]
    node _T_6 = bits(sAdjustedExp, 5, 0) @[RoundAnyRawFNToRecFN.scala 154:37]
    node _T_7 = not(_T_6) @[primitives.scala 51:21]
    node _T_8 = dshr(asSInt(UInt<65>("h10000000000000000")), _T_7) @[primitives.scala 77:58]
    node _T_9 = bits(_T_8, 18, 7) @[primitives.scala 79:22]
    node _T_10 = bits(_T_9, 7, 0) @[Bitwise.scala 109:18]
    node _T_11 = shl(UInt<4>("hf"), 4) @[Bitwise.scala 102:47]
    node _T_12 = xor(UInt<8>("hff"), _T_11) @[Bitwise.scala 102:21]
    node _T_13 = shr(_T_10, 4) @[Bitwise.scala 103:21]
    node _T_14 = and(_T_13, _T_12) @[Bitwise.scala 103:31]
    node _T_15 = bits(_T_10, 3, 0) @[Bitwise.scala 103:46]
    node _T_16 = shl(_T_15, 4) @[Bitwise.scala 103:65]
    node _T_17 = not(_T_12) @[Bitwise.scala 103:77]
    node _T_18 = and(_T_16, _T_17) @[Bitwise.scala 103:75]
    node _T_19 = or(_T_14, _T_18) @[Bitwise.scala 103:39]
    node _T_20 = bits(_T_12, 5, 0) @[Bitwise.scala 102:28]
    node _T_21 = shl(_T_20, 2) @[Bitwise.scala 102:47]
    node _T_22 = xor(_T_12, _T_21) @[Bitwise.scala 102:21]
    node _T_23 = shr(_T_19, 2) @[Bitwise.scala 103:21]
    node _T_24 = and(_T_23, _T_22) @[Bitwise.scala 103:31]
    node _T_25 = bits(_T_19, 5, 0) @[Bitwise.scala 103:46]
    node _T_26 = shl(_T_25, 2) @[Bitwise.scala 103:65]
    node _T_27 = not(_T_22) @[Bitwise.scala 103:77]
    node _T_28 = and(_T_26, _T_27) @[Bitwise.scala 103:75]
    node _T_29 = or(_T_24, _T_28) @[Bitwise.scala 103:39]
    node _T_30 = bits(_T_22, 6, 0) @[Bitwise.scala 102:28]
    node _T_31 = shl(_T_30, 1) @[Bitwise.scala 102:47]
    node _T_32 = xor(_T_22, _T_31) @[Bitwise.scala 102:21]
    node _T_33 = shr(_T_29, 1) @[Bitwise.scala 103:21]
    node _T_34 = and(_T_33, _T_32) @[Bitwise.scala 103:31]
    node _T_35 = bits(_T_29, 6, 0) @[Bitwise.scala 103:46]
    node _T_36 = shl(_T_35, 1) @[Bitwise.scala 103:65]
    node _T_37 = not(_T_32) @[Bitwise.scala 103:77]
    node _T_38 = and(_T_36, _T_37) @[Bitwise.scala 103:75]
    node _T_39 = or(_T_34, _T_38) @[Bitwise.scala 103:39]
    node _T_40 = bits(_T_9, 11, 8) @[Bitwise.scala 109:44]
    node _T_41 = bits(_T_40, 1, 0) @[Bitwise.scala 109:18]
    node _T_42 = bits(_T_41, 0, 0) @[Bitwise.scala 109:18]
    node _T_43 = bits(_T_41, 1, 1) @[Bitwise.scala 109:44]
    node _T_44 = cat(_T_42, _T_43) @[Cat.scala 29:58]
    node _T_45 = bits(_T_40, 3, 2) @[Bitwise.scala 109:44]
    node _T_46 = bits(_T_45, 0, 0) @[Bitwise.scala 109:18]
    node _T_47 = bits(_T_45, 1, 1) @[Bitwise.scala 109:44]
    node _T_48 = cat(_T_46, _T_47) @[Cat.scala 29:58]
    node _T_49 = cat(_T_44, _T_48) @[Cat.scala 29:58]
    node _T_50 = cat(_T_39, _T_49) @[Cat.scala 29:58]
    node _T_51 = or(_T_50, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 157:23]
    node _T_52 = cat(_T_51, UInt<2>("h3")) @[Cat.scala 29:58]
    node _T_53 = shr(_T_52, 1) @[RoundAnyRawFNToRecFN.scala 160:57]
    node _T_54 = cat(UInt<1>("h0"), _T_53) @[Cat.scala 29:58]
    node _T_55 = not(_T_54) @[RoundAnyRawFNToRecFN.scala 161:28]
    node _T_56 = and(_T_55, _T_52) @[RoundAnyRawFNToRecFN.scala 161:46]
    node _T_57 = and(adjustedSig, _T_56) @[RoundAnyRawFNToRecFN.scala 162:40]
    node _T_58 = orr(_T_57) @[RoundAnyRawFNToRecFN.scala 162:56]
    node _T_59 = and(adjustedSig, _T_54) @[RoundAnyRawFNToRecFN.scala 163:42]
    node _T_60 = orr(_T_59) @[RoundAnyRawFNToRecFN.scala 163:62]
    node _T_61 = or(_T_58, _T_60) @[RoundAnyRawFNToRecFN.scala 164:36]
    node _T_62 = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 167:38]
    node _T_63 = and(_T_62, _T_58) @[RoundAnyRawFNToRecFN.scala 167:67]
    node _T_64 = and(roundMagUp, _T_61) @[RoundAnyRawFNToRecFN.scala 169:29]
    node _T_65 = or(_T_63, _T_64) @[RoundAnyRawFNToRecFN.scala 168:31]
    node _T_66 = or(adjustedSig, _T_52) @[RoundAnyRawFNToRecFN.scala 172:32]
    node _T_67 = shr(_T_66, 2) @[RoundAnyRawFNToRecFN.scala 172:44]
    node _T_68 = add(_T_67, UInt<1>("h1")) @[RoundAnyRawFNToRecFN.scala 172:49]
    node _T_69 = and(roundingMode_near_even, _T_58) @[RoundAnyRawFNToRecFN.scala 173:49]
    node _T_70 = eq(_T_60, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 174:30]
    node _T_71 = and(_T_69, _T_70) @[RoundAnyRawFNToRecFN.scala 173:64]
    node _T_72 = shr(_T_52, 1) @[RoundAnyRawFNToRecFN.scala 175:35]
    node _T_73 = mux(_T_71, _T_72, UInt<13>("h0")) @[RoundAnyRawFNToRecFN.scala 173:25]
    node _T_74 = not(_T_73) @[RoundAnyRawFNToRecFN.scala 173:21]
    node _T_75 = and(_T_68, _T_74) @[RoundAnyRawFNToRecFN.scala 172:61]
    node _T_76 = not(_T_52) @[RoundAnyRawFNToRecFN.scala 178:32]
    node _T_77 = and(adjustedSig, _T_76) @[RoundAnyRawFNToRecFN.scala 178:30]
    node _T_78 = shr(_T_77, 2) @[RoundAnyRawFNToRecFN.scala 178:43]
    node _T_79 = and(roundingMode_odd, _T_61) @[RoundAnyRawFNToRecFN.scala 179:42]
    node _T_80 = shr(_T_56, 1) @[RoundAnyRawFNToRecFN.scala 179:67]
    node _T_81 = mux(_T_79, _T_80, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 179:24]
    node _T_82 = or(_T_78, _T_81) @[RoundAnyRawFNToRecFN.scala 178:47]
    node _T_83 = mux(_T_65, _T_75, _T_82) @[RoundAnyRawFNToRecFN.scala 171:16]
    node _T_84 = shr(_T_83, 11) @[RoundAnyRawFNToRecFN.scala 183:54]
    node _T_85 = cvt(_T_84) @[RoundAnyRawFNToRecFN.scala 183:69]
    node _T_86 = add(sAdjustedExp, _T_85) @[RoundAnyRawFNToRecFN.scala 183:40]
    node _T_87 = bits(_T_86, 5, 0) @[RoundAnyRawFNToRecFN.scala 185:37]
    common_expOut <= _T_87 @[RoundAnyRawFNToRecFN.scala 185:23]
    node _T_88 = bits(_T_83, 10, 1) @[RoundAnyRawFNToRecFN.scala 188:27]
    node _T_89 = bits(_T_83, 9, 0) @[RoundAnyRawFNToRecFN.scala 189:27]
    node _T_90 = mux(UInt<1>("h0"), _T_88, _T_89) @[RoundAnyRawFNToRecFN.scala 187:16]
    common_fractOut <= _T_90 @[RoundAnyRawFNToRecFN.scala 186:25]
    node _T_91 = shr(_T_86, 4) @[RoundAnyRawFNToRecFN.scala 194:30]
    node _T_92 = geq(_T_91, asSInt(UInt<3>("h3"))) @[RoundAnyRawFNToRecFN.scala 194:50]
    common_overflow <= _T_92 @[RoundAnyRawFNToRecFN.scala 191:25]
    node _T_93 = lt(_T_86, asSInt(UInt<5>("h8"))) @[RoundAnyRawFNToRecFN.scala 198:31]
    common_totalUnderflow <= _T_93 @[RoundAnyRawFNToRecFN.scala 195:31]
    node _T_94 = bits(adjustedSig, 2, 2) @[RoundAnyRawFNToRecFN.scala 201:45]
    node _T_95 = bits(adjustedSig, 1, 1) @[RoundAnyRawFNToRecFN.scala 201:61]
    node _T_96 = mux(UInt<1>("h0"), _T_94, _T_95) @[RoundAnyRawFNToRecFN.scala 201:16]
    node _T_97 = bits(adjustedSig, 2, 2) @[RoundAnyRawFNToRecFN.scala 203:44]
    node _T_98 = and(UInt<1>("h0"), _T_97) @[RoundAnyRawFNToRecFN.scala 203:30]
    node _T_99 = bits(adjustedSig, 1, 0) @[RoundAnyRawFNToRecFN.scala 203:63]
    node _T_100 = orr(_T_99) @[RoundAnyRawFNToRecFN.scala 203:70]
    node _T_101 = or(_T_98, _T_100) @[RoundAnyRawFNToRecFN.scala 203:49]
    node _T_102 = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 205:38]
    node _T_103 = and(_T_102, _T_96) @[RoundAnyRawFNToRecFN.scala 205:67]
    node _T_104 = and(roundMagUp, _T_101) @[RoundAnyRawFNToRecFN.scala 207:29]
    node _T_105 = or(_T_103, _T_104) @[RoundAnyRawFNToRecFN.scala 206:46]
    node _T_106 = bits(_T_83, 12, 12) @[RoundAnyRawFNToRecFN.scala 210:27]
    node _T_107 = bits(_T_83, 11, 11) @[RoundAnyRawFNToRecFN.scala 211:27]
    node _T_108 = mux(UInt<1>("h0"), _T_106, _T_107) @[RoundAnyRawFNToRecFN.scala 209:16]
    node _T_109 = shr(sAdjustedExp, 5) @[RoundAnyRawFNToRecFN.scala 218:48]
    node _T_110 = leq(_T_109, asSInt(UInt<1>("h0"))) @[RoundAnyRawFNToRecFN.scala 218:62]
    node _T_111 = and(_T_61, _T_110) @[RoundAnyRawFNToRecFN.scala 218:32]
    node _T_112 = bits(_T_52, 3, 3) @[RoundAnyRawFNToRecFN.scala 219:57]
    node _T_113 = bits(_T_52, 2, 2) @[RoundAnyRawFNToRecFN.scala 219:71]
    node _T_114 = mux(UInt<1>("h0"), _T_112, _T_113) @[RoundAnyRawFNToRecFN.scala 219:30]
    node _T_115 = and(_T_111, _T_114) @[RoundAnyRawFNToRecFN.scala 218:74]
    node _T_116 = eq(io.detectTininess, UInt<1>("h1")) @[RoundAnyRawFNToRecFN.scala 220:49]
    node _T_117 = bits(_T_52, 4, 4) @[RoundAnyRawFNToRecFN.scala 222:49]
    node _T_118 = bits(_T_52, 3, 3) @[RoundAnyRawFNToRecFN.scala 223:49]
    node _T_119 = mux(UInt<1>("h0"), _T_117, _T_118) @[RoundAnyRawFNToRecFN.scala 221:39]
    node _T_120 = eq(_T_119, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 221:34]
    node _T_121 = and(_T_116, _T_120) @[RoundAnyRawFNToRecFN.scala 220:77]
    node _T_122 = and(_T_121, _T_108) @[RoundAnyRawFNToRecFN.scala 224:38]
    node _T_123 = and(_T_122, _T_58) @[RoundAnyRawFNToRecFN.scala 225:45]
    node _T_124 = and(_T_123, _T_105) @[RoundAnyRawFNToRecFN.scala 225:60]
    node _T_125 = eq(_T_124, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 220:27]
    node _T_126 = and(_T_115, _T_125) @[RoundAnyRawFNToRecFN.scala 219:76]
    node _T_127 = or(common_totalUnderflow, _T_126) @[RoundAnyRawFNToRecFN.scala 215:40]
    common_underflow <= _T_127 @[RoundAnyRawFNToRecFN.scala 213:26]
    node _T_128 = or(common_totalUnderflow, _T_61) @[RoundAnyRawFNToRecFN.scala 228:49]
    common_inexact <= _T_128 @[RoundAnyRawFNToRecFN.scala 228:24]
    node isNaNOut = or(io.invalidExc, io.in.isNaN) @[RoundAnyRawFNToRecFN.scala 233:34]
    node notNaN_isSpecialInfOut = or(io.infiniteExc, io.in.isInf) @[RoundAnyRawFNToRecFN.scala 234:49]
    node _T_129 = eq(isNaNOut, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 235:22]
    node _T_130 = eq(notNaN_isSpecialInfOut, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 235:36]
    node _T_131 = and(_T_129, _T_130) @[RoundAnyRawFNToRecFN.scala 235:33]
    node _T_132 = eq(io.in.isZero, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 235:64]
    node commonCase = and(_T_131, _T_132) @[RoundAnyRawFNToRecFN.scala 235:61]
    node overflow = and(commonCase, common_overflow) @[RoundAnyRawFNToRecFN.scala 236:32]
    node underflow = and(commonCase, common_underflow) @[RoundAnyRawFNToRecFN.scala 237:32]
    node _T_133 = and(commonCase, common_inexact) @[RoundAnyRawFNToRecFN.scala 238:43]
    node inexact = or(overflow, _T_133) @[RoundAnyRawFNToRecFN.scala 238:28]
    node _T_134 = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 241:32]
    node overflow_roundMagUp = or(_T_134, roundMagUp) @[RoundAnyRawFNToRecFN.scala 241:60]
    node _T_135 = and(commonCase, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 243:20]
    node _T_136 = or(roundMagUp, roundingMode_odd) @[RoundAnyRawFNToRecFN.scala 243:60]
    node pegMinNonzeroMagOut = and(_T_135, _T_136) @[RoundAnyRawFNToRecFN.scala 243:45]
    node _T_137 = eq(overflow_roundMagUp, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 244:42]
    node pegMaxFiniteMagOut = and(overflow, _T_137) @[RoundAnyRawFNToRecFN.scala 244:39]
    node _T_138 = and(overflow, overflow_roundMagUp) @[RoundAnyRawFNToRecFN.scala 246:45]
    node notNaN_isInfOut = or(notNaN_isSpecialInfOut, _T_138) @[RoundAnyRawFNToRecFN.scala 246:32]
    node signOut = mux(isNaNOut, UInt<1>("h0"), io.in.sign) @[RoundAnyRawFNToRecFN.scala 248:22]
    node _T_139 = or(io.in.isZero, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 251:32]
    node _T_140 = mux(_T_139, UInt<6>("h38"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 251:18]
    node _T_141 = not(_T_140) @[RoundAnyRawFNToRecFN.scala 251:14]
    node _T_142 = and(common_expOut, _T_141) @[RoundAnyRawFNToRecFN.scala 250:24]
    node _T_143 = not(UInt<6>("h8")) @[RoundAnyRawFNToRecFN.scala 256:19]
    node _T_144 = mux(pegMinNonzeroMagOut, _T_143, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 255:18]
    node _T_145 = not(_T_144) @[RoundAnyRawFNToRecFN.scala 255:14]
    node _T_146 = and(_T_142, _T_145) @[RoundAnyRawFNToRecFN.scala 254:17]
    node _T_147 = mux(pegMaxFiniteMagOut, UInt<6>("h10"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 259:18]
    node _T_148 = not(_T_147) @[RoundAnyRawFNToRecFN.scala 259:14]
    node _T_149 = and(_T_146, _T_148) @[RoundAnyRawFNToRecFN.scala 258:17]
    node _T_150 = mux(notNaN_isInfOut, UInt<6>("h8"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 263:18]
    node _T_151 = not(_T_150) @[RoundAnyRawFNToRecFN.scala 263:14]
    node _T_152 = and(_T_149, _T_151) @[RoundAnyRawFNToRecFN.scala 262:17]
    node _T_153 = mux(pegMinNonzeroMagOut, UInt<6>("h8"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 267:16]
    node _T_154 = or(_T_152, _T_153) @[RoundAnyRawFNToRecFN.scala 266:18]
    node _T_155 = mux(pegMaxFiniteMagOut, UInt<6>("h2f"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 271:16]
    node _T_156 = or(_T_154, _T_155) @[RoundAnyRawFNToRecFN.scala 270:15]
    node _T_157 = mux(notNaN_isInfOut, UInt<6>("h30"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 275:16]
    node _T_158 = or(_T_156, _T_157) @[RoundAnyRawFNToRecFN.scala 274:15]
    node _T_159 = mux(isNaNOut, UInt<6>("h38"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 276:16]
    node expOut = or(_T_158, _T_159) @[RoundAnyRawFNToRecFN.scala 275:77]
    node _T_160 = or(isNaNOut, io.in.isZero) @[RoundAnyRawFNToRecFN.scala 278:22]
    node _T_161 = or(_T_160, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 278:38]
    node _T_162 = mux(isNaNOut, UInt<10>("h200"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 279:16]
    node _T_163 = mux(_T_161, _T_162, common_fractOut) @[RoundAnyRawFNToRecFN.scala 278:12]
    node _T_164 = bits(pegMaxFiniteMagOut, 0, 0) @[Bitwise.scala 72:15]
    node _T_165 = mux(_T_164, UInt<10>("h3ff"), UInt<10>("h0")) @[Bitwise.scala 72:12]
    node fractOut = or(_T_163, _T_165) @[RoundAnyRawFNToRecFN.scala 281:11]
    node _T_166 = cat(signOut, expOut) @[Cat.scala 29:58]
    node _T_167 = cat(_T_166, fractOut) @[Cat.scala 29:58]
    io.out <= _T_167 @[RoundAnyRawFNToRecFN.scala 284:12]
    node _T_168 = cat(underflow, inexact) @[Cat.scala 29:58]
    node _T_169 = cat(io.invalidExc, io.infiniteExc) @[Cat.scala 29:58]
    node _T_170 = cat(_T_169, overflow) @[Cat.scala 29:58]
    node _T_171 = cat(_T_170, _T_168) @[Cat.scala 29:58]
    io.exceptionFlags <= _T_171 @[RoundAnyRawFNToRecFN.scala 285:23]

  module RecFNToRecFN :
    output io : { flip in : UInt<33>, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<17>, exceptionFlags : UInt<5>}
  
    io is invalid
    node _T = bits(io.in, 31, 23) @[rawFloatFromRecFN.scala 50:21]
    node _T_1 = bits(_T, 8, 6) @[rawFloatFromRecFN.scala 51:29]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[rawFloatFromRecFN.scala 51:54]
    node _T_3 = bits(_T, 8, 7) @[rawFloatFromRecFN.scala 52:29]
    node _T_4 = eq(_T_3, UInt<2>("h3")) @[rawFloatFromRecFN.scala 52:54]
    wire rawIn : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromRecFN.scala 54:23]
    rawIn is invalid @[rawFloatFromRecFN.scala 54:23]
    node _T_5 = bits(_T, 6, 6) @[rawFloatFromRecFN.scala 55:41]
    node _T_6 = and(_T_4, _T_5) @[rawFloatFromRecFN.scala 55:33]
    rawIn.isNaN <= _T_6 @[rawFloatFromRecFN.scala 55:20]
    node _T_7 = bits(_T, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _T_8 = eq(_T_7, UInt<1>("h0")) @[rawFloatFromRecFN.scala 56:36]
    node _T_9 = and(_T_4, _T_8) @[rawFloatFromRecFN.scala 56:33]
    rawIn.isInf <= _T_9 @[rawFloatFromRecFN.scala 56:20]
    rawIn.isZero <= _T_2 @[rawFloatFromRecFN.scala 57:20]
    node _T_10 = bits(io.in, 32, 32) @[rawFloatFromRecFN.scala 58:25]
    rawIn.sign <= _T_10 @[rawFloatFromRecFN.scala 58:20]
    node _T_11 = cvt(_T) @[rawFloatFromRecFN.scala 59:27]
    rawIn.sExp <= _T_11 @[rawFloatFromRecFN.scala 59:20]
    node _T_12 = eq(_T_2, UInt<1>("h0")) @[rawFloatFromRecFN.scala 60:39]
    node _T_13 = bits(io.in, 22, 0) @[rawFloatFromRecFN.scala 60:51]
    node _T_14 = cat(UInt<1>("h0"), _T_12) @[Cat.scala 29:58]
    node _T_15 = cat(_T_14, _T_13) @[Cat.scala 29:58]
    rawIn.sig <= _T_15 @[rawFloatFromRecFN.scala 60:20]
    inst RoundAnyRawFNToRecFN of RoundAnyRawFNToRecFN @[RecFNToRecFN.scala 72:19]
    RoundAnyRawFNToRecFN.io is invalid
    node _T_16 = bits(rawIn.sig, 22, 22) @[common.scala 81:56]
    node _T_17 = eq(_T_16, UInt<1>("h0")) @[common.scala 81:49]
    node _T_18 = and(rawIn.isNaN, _T_17) @[common.scala 81:46]
    RoundAnyRawFNToRecFN.io.invalidExc <= _T_18 @[RecFNToRecFN.scala 80:48]
    RoundAnyRawFNToRecFN.io.infiniteExc <= UInt<1>("h0") @[RecFNToRecFN.scala 81:48]
    RoundAnyRawFNToRecFN.io.in <- rawIn @[RecFNToRecFN.scala 82:48]
    RoundAnyRawFNToRecFN.io.roundingMode <= io.roundingMode @[RecFNToRecFN.scala 83:48]
    RoundAnyRawFNToRecFN.io.detectTininess <= io.detectTininess @[RecFNToRecFN.scala 84:48]
    io.out <= RoundAnyRawFNToRecFN.io.out @[RecFNToRecFN.scala 85:27]
    io.exceptionFlags <= RoundAnyRawFNToRecFN.io.exceptionFlags @[RecFNToRecFN.scala 86:27]

  module ValExec_RecFNToRecFN :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip in : UInt<32>, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, expected : { flip out : UInt<16>, flip exceptionFlags : UInt<5>, recOut : UInt<17>}, actual : { out : UInt<17>, exceptionFlags : UInt<5>}, check : UInt<1>, pass : UInt<1>}
  
    clock is invalid
    reset is invalid
    io is invalid
    inst recFNToRecFN of RecFNToRecFN @[ValExec_RecFNToRecFN.scala 69:15]
    recFNToRecFN.io is invalid
    node _T = bits(io.in, 31, 31) @[rawFloatFromFN.scala 46:22]
    node _T_1 = bits(io.in, 30, 23) @[rawFloatFromFN.scala 47:23]
    node _T_2 = bits(io.in, 22, 0) @[rawFloatFromFN.scala 48:25]
    node _T_3 = eq(_T_1, UInt<1>("h0")) @[rawFloatFromFN.scala 50:34]
    node _T_4 = eq(_T_2, UInt<1>("h0")) @[rawFloatFromFN.scala 51:38]
    node _T_5 = bits(_T_2, 0, 0) @[primitives.scala 92:52]
    node _T_6 = bits(_T_2, 1, 1) @[primitives.scala 92:52]
    node _T_7 = bits(_T_2, 2, 2) @[primitives.scala 92:52]
    node _T_8 = bits(_T_2, 3, 3) @[primitives.scala 92:52]
    node _T_9 = bits(_T_2, 4, 4) @[primitives.scala 92:52]
    node _T_10 = bits(_T_2, 5, 5) @[primitives.scala 92:52]
    node _T_11 = bits(_T_2, 6, 6) @[primitives.scala 92:52]
    node _T_12 = bits(_T_2, 7, 7) @[primitives.scala 92:52]
    node _T_13 = bits(_T_2, 8, 8) @[primitives.scala 92:52]
    node _T_14 = bits(_T_2, 9, 9) @[primitives.scala 92:52]
    node _T_15 = bits(_T_2, 10, 10) @[primitives.scala 92:52]
    node _T_16 = bits(_T_2, 11, 11) @[primitives.scala 92:52]
    node _T_17 = bits(_T_2, 12, 12) @[primitives.scala 92:52]
    node _T_18 = bits(_T_2, 13, 13) @[primitives.scala 92:52]
    node _T_19 = bits(_T_2, 14, 14) @[primitives.scala 92:52]
    node _T_20 = bits(_T_2, 15, 15) @[primitives.scala 92:52]
    node _T_21 = bits(_T_2, 16, 16) @[primitives.scala 92:52]
    node _T_22 = bits(_T_2, 17, 17) @[primitives.scala 92:52]
    node _T_23 = bits(_T_2, 18, 18) @[primitives.scala 92:52]
    node _T_24 = bits(_T_2, 19, 19) @[primitives.scala 92:52]
    node _T_25 = bits(_T_2, 20, 20) @[primitives.scala 92:52]
    node _T_26 = bits(_T_2, 21, 21) @[primitives.scala 92:52]
    node _T_27 = bits(_T_2, 22, 22) @[primitives.scala 92:52]
    node _T_28 = mux(_T_6, UInt<5>("h15"), UInt<5>("h16")) @[Mux.scala 47:69]
    node _T_29 = mux(_T_7, UInt<5>("h14"), _T_28) @[Mux.scala 47:69]
    node _T_30 = mux(_T_8, UInt<5>("h13"), _T_29) @[Mux.scala 47:69]
    node _T_31 = mux(_T_9, UInt<5>("h12"), _T_30) @[Mux.scala 47:69]
    node _T_32 = mux(_T_10, UInt<5>("h11"), _T_31) @[Mux.scala 47:69]
    node _T_33 = mux(_T_11, UInt<5>("h10"), _T_32) @[Mux.scala 47:69]
    node _T_34 = mux(_T_12, UInt<4>("hf"), _T_33) @[Mux.scala 47:69]
    node _T_35 = mux(_T_13, UInt<4>("he"), _T_34) @[Mux.scala 47:69]
    node _T_36 = mux(_T_14, UInt<4>("hd"), _T_35) @[Mux.scala 47:69]
    node _T_37 = mux(_T_15, UInt<4>("hc"), _T_36) @[Mux.scala 47:69]
    node _T_38 = mux(_T_16, UInt<4>("hb"), _T_37) @[Mux.scala 47:69]
    node _T_39 = mux(_T_17, UInt<4>("ha"), _T_38) @[Mux.scala 47:69]
    node _T_40 = mux(_T_18, UInt<4>("h9"), _T_39) @[Mux.scala 47:69]
    node _T_41 = mux(_T_19, UInt<4>("h8"), _T_40) @[Mux.scala 47:69]
    node _T_42 = mux(_T_20, UInt<3>("h7"), _T_41) @[Mux.scala 47:69]
    node _T_43 = mux(_T_21, UInt<3>("h6"), _T_42) @[Mux.scala 47:69]
    node _T_44 = mux(_T_22, UInt<3>("h5"), _T_43) @[Mux.scala 47:69]
    node _T_45 = mux(_T_23, UInt<3>("h4"), _T_44) @[Mux.scala 47:69]
    node _T_46 = mux(_T_24, UInt<2>("h3"), _T_45) @[Mux.scala 47:69]
    node _T_47 = mux(_T_25, UInt<2>("h2"), _T_46) @[Mux.scala 47:69]
    node _T_48 = mux(_T_26, UInt<1>("h1"), _T_47) @[Mux.scala 47:69]
    node _T_49 = mux(_T_27, UInt<1>("h0"), _T_48) @[Mux.scala 47:69]
    node _T_50 = dshl(_T_2, _T_49) @[rawFloatFromFN.scala 54:36]
    node _T_51 = bits(_T_50, 21, 0) @[rawFloatFromFN.scala 54:47]
    node _T_52 = shl(_T_51, 1) @[rawFloatFromFN.scala 54:64]
    node _T_53 = xor(_T_49, UInt<9>("h1ff")) @[rawFloatFromFN.scala 57:26]
    node _T_54 = mux(_T_3, _T_53, _T_1) @[rawFloatFromFN.scala 56:16]
    node _T_55 = mux(_T_3, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 60:27]
    node _T_56 = or(UInt<8>("h80"), _T_55) @[rawFloatFromFN.scala 60:22]
    node _T_57 = add(_T_54, _T_56) @[rawFloatFromFN.scala 59:15]
    node _T_58 = tail(_T_57, 1) @[rawFloatFromFN.scala 59:15]
    node _T_59 = and(_T_3, _T_4) @[rawFloatFromFN.scala 62:34]
    node _T_60 = bits(_T_58, 8, 7) @[rawFloatFromFN.scala 63:37]
    node _T_61 = eq(_T_60, UInt<2>("h3")) @[rawFloatFromFN.scala 63:62]
    wire _T_62 : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromFN.scala 65:23]
    _T_62 is invalid @[rawFloatFromFN.scala 65:23]
    node _T_63 = eq(_T_4, UInt<1>("h0")) @[rawFloatFromFN.scala 66:36]
    node _T_64 = and(_T_61, _T_63) @[rawFloatFromFN.scala 66:33]
    _T_62.isNaN <= _T_64 @[rawFloatFromFN.scala 66:20]
    node _T_65 = and(_T_61, _T_4) @[rawFloatFromFN.scala 67:33]
    _T_62.isInf <= _T_65 @[rawFloatFromFN.scala 67:20]
    _T_62.isZero <= _T_59 @[rawFloatFromFN.scala 68:20]
    _T_62.sign <= _T @[rawFloatFromFN.scala 69:20]
    node _T_66 = bits(_T_58, 8, 0) @[rawFloatFromFN.scala 70:34]
    node _T_67 = cvt(_T_66) @[rawFloatFromFN.scala 70:48]
    _T_62.sExp <= _T_67 @[rawFloatFromFN.scala 70:20]
    node _T_68 = eq(_T_59, UInt<1>("h0")) @[rawFloatFromFN.scala 72:29]
    node _T_69 = mux(_T_3, _T_52, _T_2) @[rawFloatFromFN.scala 72:42]
    node _T_70 = cat(UInt<1>("h0"), _T_68) @[Cat.scala 29:58]
    node _T_71 = cat(_T_70, _T_69) @[Cat.scala 29:58]
    _T_62.sig <= _T_71 @[rawFloatFromFN.scala 71:17]
    node _T_72 = bits(_T_62.sExp, 8, 6) @[recFNFromFN.scala 48:53]
    node _T_73 = mux(_T_62.isZero, UInt<3>("h0"), _T_72) @[recFNFromFN.scala 48:16]
    node _T_74 = mux(_T_62.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
    node _T_75 = or(_T_73, _T_74) @[recFNFromFN.scala 48:79]
    node _T_76 = bits(_T_62.sExp, 5, 0) @[recFNFromFN.scala 50:23]
    node _T_77 = bits(_T_62.sig, 22, 0) @[recFNFromFN.scala 51:22]
    node _T_78 = cat(_T_76, _T_77) @[Cat.scala 29:58]
    node _T_79 = cat(_T_62.sign, _T_75) @[Cat.scala 29:58]
    node _T_80 = cat(_T_79, _T_78) @[Cat.scala 29:58]
    recFNToRecFN.io.in <= _T_80 @[ValExec_RecFNToRecFN.scala 71:24]
    recFNToRecFN.io.roundingMode <= io.roundingMode @[ValExec_RecFNToRecFN.scala 72:36]
    recFNToRecFN.io.detectTininess <= io.detectTininess @[ValExec_RecFNToRecFN.scala 73:36]
    node _T_81 = bits(io.expected.out, 15, 15) @[rawFloatFromFN.scala 46:22]
    node _T_82 = bits(io.expected.out, 14, 10) @[rawFloatFromFN.scala 47:23]
    node _T_83 = bits(io.expected.out, 9, 0) @[rawFloatFromFN.scala 48:25]
    node _T_84 = eq(_T_82, UInt<1>("h0")) @[rawFloatFromFN.scala 50:34]
    node _T_85 = eq(_T_83, UInt<1>("h0")) @[rawFloatFromFN.scala 51:38]
    node _T_86 = bits(_T_83, 0, 0) @[primitives.scala 92:52]
    node _T_87 = bits(_T_83, 1, 1) @[primitives.scala 92:52]
    node _T_88 = bits(_T_83, 2, 2) @[primitives.scala 92:52]
    node _T_89 = bits(_T_83, 3, 3) @[primitives.scala 92:52]
    node _T_90 = bits(_T_83, 4, 4) @[primitives.scala 92:52]
    node _T_91 = bits(_T_83, 5, 5) @[primitives.scala 92:52]
    node _T_92 = bits(_T_83, 6, 6) @[primitives.scala 92:52]
    node _T_93 = bits(_T_83, 7, 7) @[primitives.scala 92:52]
    node _T_94 = bits(_T_83, 8, 8) @[primitives.scala 92:52]
    node _T_95 = bits(_T_83, 9, 9) @[primitives.scala 92:52]
    node _T_96 = mux(_T_87, UInt<4>("h8"), UInt<4>("h9")) @[Mux.scala 47:69]
    node _T_97 = mux(_T_88, UInt<3>("h7"), _T_96) @[Mux.scala 47:69]
    node _T_98 = mux(_T_89, UInt<3>("h6"), _T_97) @[Mux.scala 47:69]
    node _T_99 = mux(_T_90, UInt<3>("h5"), _T_98) @[Mux.scala 47:69]
    node _T_100 = mux(_T_91, UInt<3>("h4"), _T_99) @[Mux.scala 47:69]
    node _T_101 = mux(_T_92, UInt<2>("h3"), _T_100) @[Mux.scala 47:69]
    node _T_102 = mux(_T_93, UInt<2>("h2"), _T_101) @[Mux.scala 47:69]
    node _T_103 = mux(_T_94, UInt<1>("h1"), _T_102) @[Mux.scala 47:69]
    node _T_104 = mux(_T_95, UInt<1>("h0"), _T_103) @[Mux.scala 47:69]
    node _T_105 = dshl(_T_83, _T_104) @[rawFloatFromFN.scala 54:36]
    node _T_106 = bits(_T_105, 8, 0) @[rawFloatFromFN.scala 54:47]
    node _T_107 = shl(_T_106, 1) @[rawFloatFromFN.scala 54:64]
    node _T_108 = xor(_T_104, UInt<6>("h3f")) @[rawFloatFromFN.scala 57:26]
    node _T_109 = mux(_T_84, _T_108, _T_82) @[rawFloatFromFN.scala 56:16]
    node _T_110 = mux(_T_84, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 60:27]
    node _T_111 = or(UInt<5>("h10"), _T_110) @[rawFloatFromFN.scala 60:22]
    node _T_112 = add(_T_109, _T_111) @[rawFloatFromFN.scala 59:15]
    node _T_113 = tail(_T_112, 1) @[rawFloatFromFN.scala 59:15]
    node _T_114 = and(_T_84, _T_85) @[rawFloatFromFN.scala 62:34]
    node _T_115 = bits(_T_113, 5, 4) @[rawFloatFromFN.scala 63:37]
    node _T_116 = eq(_T_115, UInt<2>("h3")) @[rawFloatFromFN.scala 63:62]
    wire _T_117 : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<7>, sig : UInt<12>} @[rawFloatFromFN.scala 65:23]
    _T_117 is invalid @[rawFloatFromFN.scala 65:23]
    node _T_118 = eq(_T_85, UInt<1>("h0")) @[rawFloatFromFN.scala 66:36]
    node _T_119 = and(_T_116, _T_118) @[rawFloatFromFN.scala 66:33]
    _T_117.isNaN <= _T_119 @[rawFloatFromFN.scala 66:20]
    node _T_120 = and(_T_116, _T_85) @[rawFloatFromFN.scala 67:33]
    _T_117.isInf <= _T_120 @[rawFloatFromFN.scala 67:20]
    _T_117.isZero <= _T_114 @[rawFloatFromFN.scala 68:20]
    _T_117.sign <= _T_81 @[rawFloatFromFN.scala 69:20]
    node _T_121 = bits(_T_113, 5, 0) @[rawFloatFromFN.scala 70:34]
    node _T_122 = cvt(_T_121) @[rawFloatFromFN.scala 70:48]
    _T_117.sExp <= _T_122 @[rawFloatFromFN.scala 70:20]
    node _T_123 = eq(_T_114, UInt<1>("h0")) @[rawFloatFromFN.scala 72:29]
    node _T_124 = mux(_T_84, _T_107, _T_83) @[rawFloatFromFN.scala 72:42]
    node _T_125 = cat(UInt<1>("h0"), _T_123) @[Cat.scala 29:58]
    node _T_126 = cat(_T_125, _T_124) @[Cat.scala 29:58]
    _T_117.sig <= _T_126 @[rawFloatFromFN.scala 71:17]
    node _T_127 = bits(_T_117.sExp, 5, 3) @[recFNFromFN.scala 48:53]
    node _T_128 = mux(_T_117.isZero, UInt<3>("h0"), _T_127) @[recFNFromFN.scala 48:16]
    node _T_129 = mux(_T_117.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
    node _T_130 = or(_T_128, _T_129) @[recFNFromFN.scala 48:79]
    node _T_131 = bits(_T_117.sExp, 2, 0) @[recFNFromFN.scala 50:23]
    node _T_132 = bits(_T_117.sig, 9, 0) @[recFNFromFN.scala 51:22]
    node _T_133 = cat(_T_131, _T_132) @[Cat.scala 29:58]
    node _T_134 = cat(_T_117.sign, _T_130) @[Cat.scala 29:58]
    node _T_135 = cat(_T_134, _T_133) @[Cat.scala 29:58]
    io.expected.recOut <= _T_135 @[ValExec_RecFNToRecFN.scala 75:24]
    io.actual.out <= recFNToRecFN.io.out @[ValExec_RecFNToRecFN.scala 78:19]
    io.actual.exceptionFlags <= recFNToRecFN.io.exceptionFlags @[ValExec_RecFNToRecFN.scala 79:30]
    io.check <= UInt<1>("h1") @[ValExec_RecFNToRecFN.scala 81:14]
    node _T_136 = bits(io.actual.out, 16, 13) @[package.scala 46:22]
    node _T_137 = bits(io.expected.recOut, 16, 13) @[package.scala 47:22]
    node _T_138 = bits(_T_136, 2, 0) @[package.scala 48:19]
    node _T_139 = eq(_T_138, UInt<1>("h0")) @[package.scala 48:26]
    node _T_140 = bits(_T_136, 2, 0) @[package.scala 48:44]
    node _T_141 = eq(_T_140, UInt<3>("h7")) @[package.scala 48:51]
    node _T_142 = or(_T_139, _T_141) @[package.scala 48:35]
    node _T_143 = eq(_T_136, _T_137) @[package.scala 49:20]
    node _T_144 = bits(io.actual.out, 9, 0) @[package.scala 49:36]
    node _T_145 = bits(io.expected.recOut, 9, 0) @[package.scala 49:59]
    node _T_146 = eq(_T_144, _T_145) @[package.scala 49:54]
    node _T_147 = and(_T_143, _T_146) @[package.scala 49:31]
    node _T_148 = bits(_T_136, 2, 0) @[package.scala 50:23]
    node _T_149 = eq(_T_148, UInt<3>("h6")) @[package.scala 50:30]
    node _T_150 = eq(_T_136, _T_137) @[package.scala 50:47]
    node _T_151 = eq(io.actual.out, io.expected.recOut) @[package.scala 50:62]
    node _T_152 = mux(_T_149, _T_150, _T_151) @[package.scala 50:16]
    node _T_153 = mux(_T_142, _T_147, _T_152) @[package.scala 48:12]
    node _T_154 = eq(io.actual.exceptionFlags, io.expected.exceptionFlags) @[ValExec_RecFNToRecFN.scala 85:35]
    node _T_155 = and(_T_153, _T_154) @[ValExec_RecFNToRecFN.scala 84:74]
    io.pass <= _T_155 @[ValExec_RecFNToRecFN.scala 82:13]
