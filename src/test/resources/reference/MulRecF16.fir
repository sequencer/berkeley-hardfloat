circuit ValExec_MulRecFN :
  module MulFullRawFN :
    output io : { flip a : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<7>, sig : UInt<12>}, flip b : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<7>, sig : UInt<12>}, invalidExc : UInt<1>, rawOut : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<7>, sig : UInt<22>}}
  
    node _T = and(io.a.isInf, io.b.isZero) @[MulRecFN.scala 58:44]
    node _T_1 = and(io.a.isZero, io.b.isInf) @[MulRecFN.scala 58:76]
    node notSigNaN_invalidExc = or(_T, _T_1) @[MulRecFN.scala 58:60]
    node notNaN_isInfOut = or(io.a.isInf, io.b.isInf) @[MulRecFN.scala 59:38]
    node notNaN_isZeroOut = or(io.a.isZero, io.b.isZero) @[MulRecFN.scala 60:40]
    node notNaN_signOut = xor(io.a.sign, io.b.sign) @[MulRecFN.scala 61:36]
    node _T_2 = add(io.a.sExp, io.b.sExp) @[MulRecFN.scala 62:36]
    node _T_3 = tail(_T_2, 1) @[MulRecFN.scala 62:36]
    node _T_4 = asSInt(_T_3) @[MulRecFN.scala 62:36]
    node _T_5 = sub(_T_4, asSInt(UInt<7>("h20"))) @[MulRecFN.scala 62:48]
    node _T_6 = tail(_T_5, 1) @[MulRecFN.scala 62:48]
    node common_sExpOut = asSInt(_T_6) @[MulRecFN.scala 62:48]
    node _T_7 = mul(io.a.sig, io.b.sig) @[MulRecFN.scala 63:35]
    node common_sigOut = bits(_T_7, 21, 0) @[MulRecFN.scala 63:46]
    node _T_8 = bits(io.a.sig, 9, 9) @[common.scala 81:56]
    node _T_9 = eq(_T_8, UInt<1>("h0")) @[common.scala 81:49]
    node _T_10 = and(io.a.isNaN, _T_9) @[common.scala 81:46]
    node _T_11 = bits(io.b.sig, 9, 9) @[common.scala 81:56]
    node _T_12 = eq(_T_11, UInt<1>("h0")) @[common.scala 81:49]
    node _T_13 = and(io.b.isNaN, _T_12) @[common.scala 81:46]
    node _T_14 = or(_T_10, _T_13) @[MulRecFN.scala 66:45]
    node _T_15 = or(_T_14, notSigNaN_invalidExc) @[MulRecFN.scala 66:71]
    io.invalidExc <= _T_15 @[MulRecFN.scala 66:19]
    io.rawOut.isInf <= notNaN_isInfOut @[MulRecFN.scala 67:21]
    io.rawOut.isZero <= notNaN_isZeroOut @[MulRecFN.scala 68:22]
    io.rawOut.sExp <= common_sExpOut @[MulRecFN.scala 69:20]
    node _T_16 = or(io.a.isNaN, io.b.isNaN) @[MulRecFN.scala 70:35]
    io.rawOut.isNaN <= _T_16 @[MulRecFN.scala 70:21]
    io.rawOut.sign <= notNaN_signOut @[MulRecFN.scala 71:20]
    io.rawOut.sig <= common_sigOut @[MulRecFN.scala 72:19]

  module MulRawFN :
    output io : { flip a : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<7>, sig : UInt<12>}, flip b : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<7>, sig : UInt<12>}, invalidExc : UInt<1>, rawOut : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<7>, sig : UInt<14>}}
  
    inst mulFullRaw of MulFullRawFN @[MulRecFN.scala 84:28]
    mulFullRaw.io.a.sig <= io.a.sig @[MulRecFN.scala 86:21]
    mulFullRaw.io.a.sExp <= io.a.sExp @[MulRecFN.scala 86:21]
    mulFullRaw.io.a.sign <= io.a.sign @[MulRecFN.scala 86:21]
    mulFullRaw.io.a.isZero <= io.a.isZero @[MulRecFN.scala 86:21]
    mulFullRaw.io.a.isInf <= io.a.isInf @[MulRecFN.scala 86:21]
    mulFullRaw.io.a.isNaN <= io.a.isNaN @[MulRecFN.scala 86:21]
    mulFullRaw.io.b.sig <= io.b.sig @[MulRecFN.scala 87:21]
    mulFullRaw.io.b.sExp <= io.b.sExp @[MulRecFN.scala 87:21]
    mulFullRaw.io.b.sign <= io.b.sign @[MulRecFN.scala 87:21]
    mulFullRaw.io.b.isZero <= io.b.isZero @[MulRecFN.scala 87:21]
    mulFullRaw.io.b.isInf <= io.b.isInf @[MulRecFN.scala 87:21]
    mulFullRaw.io.b.isNaN <= io.b.isNaN @[MulRecFN.scala 87:21]
    io.invalidExc <= mulFullRaw.io.invalidExc @[MulRecFN.scala 89:19]
    io.rawOut.sig <= mulFullRaw.io.rawOut.sig @[MulRecFN.scala 90:15]
    io.rawOut.sExp <= mulFullRaw.io.rawOut.sExp @[MulRecFN.scala 90:15]
    io.rawOut.sign <= mulFullRaw.io.rawOut.sign @[MulRecFN.scala 90:15]
    io.rawOut.isZero <= mulFullRaw.io.rawOut.isZero @[MulRecFN.scala 90:15]
    io.rawOut.isInf <= mulFullRaw.io.rawOut.isInf @[MulRecFN.scala 90:15]
    io.rawOut.isNaN <= mulFullRaw.io.rawOut.isNaN @[MulRecFN.scala 90:15]
    node _T = shr(mulFullRaw.io.rawOut.sig, 9) @[MulRecFN.scala 93:15]
    node _T_1 = bits(mulFullRaw.io.rawOut.sig, 8, 0) @[MulRecFN.scala 93:37]
    node _T_2 = orr(_T_1) @[MulRecFN.scala 93:55]
    node _T_3 = cat(_T, _T_2) @[Cat.scala 29:58]
    io.rawOut.sig <= _T_3 @[MulRecFN.scala 91:19]

  module RoundAnyRawFNToRecFN :
    output io : { flip invalidExc : UInt<1>, flip infiniteExc : UInt<1>, flip in : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<7>, sig : UInt<14>}, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<17>, exceptionFlags : UInt<5>}
  
    io is invalid
    node roundingMode_near_even = eq(io.roundingMode, UInt<3>("h0")) @[RoundAnyRawFNToRecFN.scala 88:53]
    node roundingMode_minMag = eq(io.roundingMode, UInt<3>("h1")) @[RoundAnyRawFNToRecFN.scala 89:53]
    node roundingMode_min = eq(io.roundingMode, UInt<3>("h2")) @[RoundAnyRawFNToRecFN.scala 90:53]
    node roundingMode_max = eq(io.roundingMode, UInt<3>("h3")) @[RoundAnyRawFNToRecFN.scala 91:53]
    node roundingMode_near_maxMag = eq(io.roundingMode, UInt<3>("h4")) @[RoundAnyRawFNToRecFN.scala 92:53]
    node roundingMode_odd = eq(io.roundingMode, UInt<3>("h6")) @[RoundAnyRawFNToRecFN.scala 93:53]
    node _T = and(roundingMode_min, io.in.sign) @[RoundAnyRawFNToRecFN.scala 96:27]
    node _T_1 = eq(io.in.sign, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 96:66]
    node _T_2 = and(roundingMode_max, _T_1) @[RoundAnyRawFNToRecFN.scala 96:63]
    node roundMagUp = or(_T, _T_2) @[RoundAnyRawFNToRecFN.scala 96:42]
    node adjustedSig = shl(io.in.sig, 0) @[RoundAnyRawFNToRecFN.scala 112:22]
    node doShiftSigDown1 = bits(adjustedSig, 13, 13) @[RoundAnyRawFNToRecFN.scala 118:61]
    wire common_expOut : UInt<6> @[RoundAnyRawFNToRecFN.scala 120:31]
    common_expOut is invalid @[RoundAnyRawFNToRecFN.scala 120:31]
    wire common_fractOut : UInt<10> @[RoundAnyRawFNToRecFN.scala 121:31]
    common_fractOut is invalid @[RoundAnyRawFNToRecFN.scala 121:31]
    wire common_overflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 122:37]
    common_overflow is invalid @[RoundAnyRawFNToRecFN.scala 122:37]
    wire common_totalUnderflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 123:37]
    common_totalUnderflow is invalid @[RoundAnyRawFNToRecFN.scala 123:37]
    wire common_underflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 124:37]
    common_underflow is invalid @[RoundAnyRawFNToRecFN.scala 124:37]
    wire common_inexact : UInt<1> @[RoundAnyRawFNToRecFN.scala 125:37]
    common_inexact is invalid @[RoundAnyRawFNToRecFN.scala 125:37]
    node _T_3 = bits(io.in.sExp, 5, 0) @[RoundAnyRawFNToRecFN.scala 154:37]
    node _T_4 = not(_T_3) @[primitives.scala 51:21]
    node _T_5 = dshr(asSInt(UInt<65>("h10000000000000000")), _T_4) @[primitives.scala 77:58]
    node _T_6 = bits(_T_5, 18, 7) @[primitives.scala 79:22]
    node _T_7 = bits(_T_6, 7, 0) @[Bitwise.scala 109:18]
    node _T_8 = shl(UInt<4>("hf"), 4) @[Bitwise.scala 102:47]
    node _T_9 = xor(UInt<8>("hff"), _T_8) @[Bitwise.scala 102:21]
    node _T_10 = shr(_T_7, 4) @[Bitwise.scala 103:21]
    node _T_11 = and(_T_10, _T_9) @[Bitwise.scala 103:31]
    node _T_12 = bits(_T_7, 3, 0) @[Bitwise.scala 103:46]
    node _T_13 = shl(_T_12, 4) @[Bitwise.scala 103:65]
    node _T_14 = not(_T_9) @[Bitwise.scala 103:77]
    node _T_15 = and(_T_13, _T_14) @[Bitwise.scala 103:75]
    node _T_16 = or(_T_11, _T_15) @[Bitwise.scala 103:39]
    node _T_17 = bits(_T_9, 5, 0) @[Bitwise.scala 102:28]
    node _T_18 = shl(_T_17, 2) @[Bitwise.scala 102:47]
    node _T_19 = xor(_T_9, _T_18) @[Bitwise.scala 102:21]
    node _T_20 = shr(_T_16, 2) @[Bitwise.scala 103:21]
    node _T_21 = and(_T_20, _T_19) @[Bitwise.scala 103:31]
    node _T_22 = bits(_T_16, 5, 0) @[Bitwise.scala 103:46]
    node _T_23 = shl(_T_22, 2) @[Bitwise.scala 103:65]
    node _T_24 = not(_T_19) @[Bitwise.scala 103:77]
    node _T_25 = and(_T_23, _T_24) @[Bitwise.scala 103:75]
    node _T_26 = or(_T_21, _T_25) @[Bitwise.scala 103:39]
    node _T_27 = bits(_T_19, 6, 0) @[Bitwise.scala 102:28]
    node _T_28 = shl(_T_27, 1) @[Bitwise.scala 102:47]
    node _T_29 = xor(_T_19, _T_28) @[Bitwise.scala 102:21]
    node _T_30 = shr(_T_26, 1) @[Bitwise.scala 103:21]
    node _T_31 = and(_T_30, _T_29) @[Bitwise.scala 103:31]
    node _T_32 = bits(_T_26, 6, 0) @[Bitwise.scala 103:46]
    node _T_33 = shl(_T_32, 1) @[Bitwise.scala 103:65]
    node _T_34 = not(_T_29) @[Bitwise.scala 103:77]
    node _T_35 = and(_T_33, _T_34) @[Bitwise.scala 103:75]
    node _T_36 = or(_T_31, _T_35) @[Bitwise.scala 103:39]
    node _T_37 = bits(_T_6, 11, 8) @[Bitwise.scala 109:44]
    node _T_38 = bits(_T_37, 1, 0) @[Bitwise.scala 109:18]
    node _T_39 = bits(_T_38, 0, 0) @[Bitwise.scala 109:18]
    node _T_40 = bits(_T_38, 1, 1) @[Bitwise.scala 109:44]
    node _T_41 = cat(_T_39, _T_40) @[Cat.scala 29:58]
    node _T_42 = bits(_T_37, 3, 2) @[Bitwise.scala 109:44]
    node _T_43 = bits(_T_42, 0, 0) @[Bitwise.scala 109:18]
    node _T_44 = bits(_T_42, 1, 1) @[Bitwise.scala 109:44]
    node _T_45 = cat(_T_43, _T_44) @[Cat.scala 29:58]
    node _T_46 = cat(_T_41, _T_45) @[Cat.scala 29:58]
    node _T_47 = cat(_T_36, _T_46) @[Cat.scala 29:58]
    node _T_48 = or(_T_47, doShiftSigDown1) @[RoundAnyRawFNToRecFN.scala 157:23]
    node _T_49 = cat(_T_48, UInt<2>("h3")) @[Cat.scala 29:58]
    node _T_50 = shr(_T_49, 1) @[RoundAnyRawFNToRecFN.scala 160:57]
    node _T_51 = cat(UInt<1>("h0"), _T_50) @[Cat.scala 29:58]
    node _T_52 = not(_T_51) @[RoundAnyRawFNToRecFN.scala 161:28]
    node _T_53 = and(_T_52, _T_49) @[RoundAnyRawFNToRecFN.scala 161:46]
    node _T_54 = and(adjustedSig, _T_53) @[RoundAnyRawFNToRecFN.scala 162:40]
    node _T_55 = orr(_T_54) @[RoundAnyRawFNToRecFN.scala 162:56]
    node _T_56 = and(adjustedSig, _T_51) @[RoundAnyRawFNToRecFN.scala 163:42]
    node _T_57 = orr(_T_56) @[RoundAnyRawFNToRecFN.scala 163:62]
    node _T_58 = or(_T_55, _T_57) @[RoundAnyRawFNToRecFN.scala 164:36]
    node _T_59 = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 167:38]
    node _T_60 = and(_T_59, _T_55) @[RoundAnyRawFNToRecFN.scala 167:67]
    node _T_61 = and(roundMagUp, _T_58) @[RoundAnyRawFNToRecFN.scala 169:29]
    node _T_62 = or(_T_60, _T_61) @[RoundAnyRawFNToRecFN.scala 168:31]
    node _T_63 = or(adjustedSig, _T_49) @[RoundAnyRawFNToRecFN.scala 172:32]
    node _T_64 = shr(_T_63, 2) @[RoundAnyRawFNToRecFN.scala 172:44]
    node _T_65 = add(_T_64, UInt<1>("h1")) @[RoundAnyRawFNToRecFN.scala 172:49]
    node _T_66 = and(roundingMode_near_even, _T_55) @[RoundAnyRawFNToRecFN.scala 173:49]
    node _T_67 = eq(_T_57, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 174:30]
    node _T_68 = and(_T_66, _T_67) @[RoundAnyRawFNToRecFN.scala 173:64]
    node _T_69 = shr(_T_49, 1) @[RoundAnyRawFNToRecFN.scala 175:35]
    node _T_70 = mux(_T_68, _T_69, UInt<13>("h0")) @[RoundAnyRawFNToRecFN.scala 173:25]
    node _T_71 = not(_T_70) @[RoundAnyRawFNToRecFN.scala 173:21]
    node _T_72 = and(_T_65, _T_71) @[RoundAnyRawFNToRecFN.scala 172:61]
    node _T_73 = not(_T_49) @[RoundAnyRawFNToRecFN.scala 178:32]
    node _T_74 = and(adjustedSig, _T_73) @[RoundAnyRawFNToRecFN.scala 178:30]
    node _T_75 = shr(_T_74, 2) @[RoundAnyRawFNToRecFN.scala 178:43]
    node _T_76 = and(roundingMode_odd, _T_58) @[RoundAnyRawFNToRecFN.scala 179:42]
    node _T_77 = shr(_T_53, 1) @[RoundAnyRawFNToRecFN.scala 179:67]
    node _T_78 = mux(_T_76, _T_77, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 179:24]
    node _T_79 = or(_T_75, _T_78) @[RoundAnyRawFNToRecFN.scala 178:47]
    node _T_80 = mux(_T_62, _T_72, _T_79) @[RoundAnyRawFNToRecFN.scala 171:16]
    node _T_81 = shr(_T_80, 11) @[RoundAnyRawFNToRecFN.scala 183:54]
    node _T_82 = cvt(_T_81) @[RoundAnyRawFNToRecFN.scala 183:69]
    node _T_83 = add(io.in.sExp, _T_82) @[RoundAnyRawFNToRecFN.scala 183:40]
    node _T_84 = bits(_T_83, 5, 0) @[RoundAnyRawFNToRecFN.scala 185:37]
    common_expOut <= _T_84 @[RoundAnyRawFNToRecFN.scala 185:23]
    node _T_85 = bits(_T_80, 10, 1) @[RoundAnyRawFNToRecFN.scala 188:27]
    node _T_86 = bits(_T_80, 9, 0) @[RoundAnyRawFNToRecFN.scala 189:27]
    node _T_87 = mux(doShiftSigDown1, _T_85, _T_86) @[RoundAnyRawFNToRecFN.scala 187:16]
    common_fractOut <= _T_87 @[RoundAnyRawFNToRecFN.scala 186:25]
    node _T_88 = shr(_T_83, 4) @[RoundAnyRawFNToRecFN.scala 194:30]
    node _T_89 = geq(_T_88, asSInt(UInt<3>("h3"))) @[RoundAnyRawFNToRecFN.scala 194:50]
    common_overflow <= _T_89 @[RoundAnyRawFNToRecFN.scala 191:25]
    node _T_90 = lt(_T_83, asSInt(UInt<5>("h8"))) @[RoundAnyRawFNToRecFN.scala 198:31]
    common_totalUnderflow <= _T_90 @[RoundAnyRawFNToRecFN.scala 195:31]
    node _T_91 = bits(adjustedSig, 2, 2) @[RoundAnyRawFNToRecFN.scala 201:45]
    node _T_92 = bits(adjustedSig, 1, 1) @[RoundAnyRawFNToRecFN.scala 201:61]
    node _T_93 = mux(doShiftSigDown1, _T_91, _T_92) @[RoundAnyRawFNToRecFN.scala 201:16]
    node _T_94 = bits(adjustedSig, 2, 2) @[RoundAnyRawFNToRecFN.scala 203:44]
    node _T_95 = and(doShiftSigDown1, _T_94) @[RoundAnyRawFNToRecFN.scala 203:30]
    node _T_96 = bits(adjustedSig, 1, 0) @[RoundAnyRawFNToRecFN.scala 203:63]
    node _T_97 = orr(_T_96) @[RoundAnyRawFNToRecFN.scala 203:70]
    node _T_98 = or(_T_95, _T_97) @[RoundAnyRawFNToRecFN.scala 203:49]
    node _T_99 = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 205:38]
    node _T_100 = and(_T_99, _T_93) @[RoundAnyRawFNToRecFN.scala 205:67]
    node _T_101 = and(roundMagUp, _T_98) @[RoundAnyRawFNToRecFN.scala 207:29]
    node _T_102 = or(_T_100, _T_101) @[RoundAnyRawFNToRecFN.scala 206:46]
    node _T_103 = bits(_T_80, 12, 12) @[RoundAnyRawFNToRecFN.scala 210:27]
    node _T_104 = bits(_T_80, 11, 11) @[RoundAnyRawFNToRecFN.scala 211:27]
    node _T_105 = mux(doShiftSigDown1, _T_103, _T_104) @[RoundAnyRawFNToRecFN.scala 209:16]
    node _T_106 = shr(io.in.sExp, 5) @[RoundAnyRawFNToRecFN.scala 218:48]
    node _T_107 = leq(_T_106, asSInt(UInt<1>("h0"))) @[RoundAnyRawFNToRecFN.scala 218:62]
    node _T_108 = and(_T_58, _T_107) @[RoundAnyRawFNToRecFN.scala 218:32]
    node _T_109 = bits(_T_49, 3, 3) @[RoundAnyRawFNToRecFN.scala 219:57]
    node _T_110 = bits(_T_49, 2, 2) @[RoundAnyRawFNToRecFN.scala 219:71]
    node _T_111 = mux(doShiftSigDown1, _T_109, _T_110) @[RoundAnyRawFNToRecFN.scala 219:30]
    node _T_112 = and(_T_108, _T_111) @[RoundAnyRawFNToRecFN.scala 218:74]
    node _T_113 = eq(io.detectTininess, UInt<1>("h1")) @[RoundAnyRawFNToRecFN.scala 220:49]
    node _T_114 = bits(_T_49, 4, 4) @[RoundAnyRawFNToRecFN.scala 222:49]
    node _T_115 = bits(_T_49, 3, 3) @[RoundAnyRawFNToRecFN.scala 223:49]
    node _T_116 = mux(doShiftSigDown1, _T_114, _T_115) @[RoundAnyRawFNToRecFN.scala 221:39]
    node _T_117 = eq(_T_116, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 221:34]
    node _T_118 = and(_T_113, _T_117) @[RoundAnyRawFNToRecFN.scala 220:77]
    node _T_119 = and(_T_118, _T_105) @[RoundAnyRawFNToRecFN.scala 224:38]
    node _T_120 = and(_T_119, _T_55) @[RoundAnyRawFNToRecFN.scala 225:45]
    node _T_121 = and(_T_120, _T_102) @[RoundAnyRawFNToRecFN.scala 225:60]
    node _T_122 = eq(_T_121, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 220:27]
    node _T_123 = and(_T_112, _T_122) @[RoundAnyRawFNToRecFN.scala 219:76]
    node _T_124 = or(common_totalUnderflow, _T_123) @[RoundAnyRawFNToRecFN.scala 215:40]
    common_underflow <= _T_124 @[RoundAnyRawFNToRecFN.scala 213:26]
    node _T_125 = or(common_totalUnderflow, _T_58) @[RoundAnyRawFNToRecFN.scala 228:49]
    common_inexact <= _T_125 @[RoundAnyRawFNToRecFN.scala 228:24]
    node isNaNOut = or(io.invalidExc, io.in.isNaN) @[RoundAnyRawFNToRecFN.scala 233:34]
    node notNaN_isSpecialInfOut = or(io.infiniteExc, io.in.isInf) @[RoundAnyRawFNToRecFN.scala 234:49]
    node _T_126 = eq(isNaNOut, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 235:22]
    node _T_127 = eq(notNaN_isSpecialInfOut, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 235:36]
    node _T_128 = and(_T_126, _T_127) @[RoundAnyRawFNToRecFN.scala 235:33]
    node _T_129 = eq(io.in.isZero, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 235:64]
    node commonCase = and(_T_128, _T_129) @[RoundAnyRawFNToRecFN.scala 235:61]
    node overflow = and(commonCase, common_overflow) @[RoundAnyRawFNToRecFN.scala 236:32]
    node underflow = and(commonCase, common_underflow) @[RoundAnyRawFNToRecFN.scala 237:32]
    node _T_130 = and(commonCase, common_inexact) @[RoundAnyRawFNToRecFN.scala 238:43]
    node inexact = or(overflow, _T_130) @[RoundAnyRawFNToRecFN.scala 238:28]
    node _T_131 = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 241:32]
    node overflow_roundMagUp = or(_T_131, roundMagUp) @[RoundAnyRawFNToRecFN.scala 241:60]
    node _T_132 = and(commonCase, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 243:20]
    node _T_133 = or(roundMagUp, roundingMode_odd) @[RoundAnyRawFNToRecFN.scala 243:60]
    node pegMinNonzeroMagOut = and(_T_132, _T_133) @[RoundAnyRawFNToRecFN.scala 243:45]
    node _T_134 = eq(overflow_roundMagUp, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 244:42]
    node pegMaxFiniteMagOut = and(overflow, _T_134) @[RoundAnyRawFNToRecFN.scala 244:39]
    node _T_135 = and(overflow, overflow_roundMagUp) @[RoundAnyRawFNToRecFN.scala 246:45]
    node notNaN_isInfOut = or(notNaN_isSpecialInfOut, _T_135) @[RoundAnyRawFNToRecFN.scala 246:32]
    node signOut = mux(isNaNOut, UInt<1>("h0"), io.in.sign) @[RoundAnyRawFNToRecFN.scala 248:22]
    node _T_136 = or(io.in.isZero, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 251:32]
    node _T_137 = mux(_T_136, UInt<6>("h38"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 251:18]
    node _T_138 = not(_T_137) @[RoundAnyRawFNToRecFN.scala 251:14]
    node _T_139 = and(common_expOut, _T_138) @[RoundAnyRawFNToRecFN.scala 250:24]
    node _T_140 = not(UInt<6>("h8")) @[RoundAnyRawFNToRecFN.scala 256:19]
    node _T_141 = mux(pegMinNonzeroMagOut, _T_140, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 255:18]
    node _T_142 = not(_T_141) @[RoundAnyRawFNToRecFN.scala 255:14]
    node _T_143 = and(_T_139, _T_142) @[RoundAnyRawFNToRecFN.scala 254:17]
    node _T_144 = mux(pegMaxFiniteMagOut, UInt<6>("h10"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 259:18]
    node _T_145 = not(_T_144) @[RoundAnyRawFNToRecFN.scala 259:14]
    node _T_146 = and(_T_143, _T_145) @[RoundAnyRawFNToRecFN.scala 258:17]
    node _T_147 = mux(notNaN_isInfOut, UInt<6>("h8"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 263:18]
    node _T_148 = not(_T_147) @[RoundAnyRawFNToRecFN.scala 263:14]
    node _T_149 = and(_T_146, _T_148) @[RoundAnyRawFNToRecFN.scala 262:17]
    node _T_150 = mux(pegMinNonzeroMagOut, UInt<6>("h8"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 267:16]
    node _T_151 = or(_T_149, _T_150) @[RoundAnyRawFNToRecFN.scala 266:18]
    node _T_152 = mux(pegMaxFiniteMagOut, UInt<6>("h2f"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 271:16]
    node _T_153 = or(_T_151, _T_152) @[RoundAnyRawFNToRecFN.scala 270:15]
    node _T_154 = mux(notNaN_isInfOut, UInt<6>("h30"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 275:16]
    node _T_155 = or(_T_153, _T_154) @[RoundAnyRawFNToRecFN.scala 274:15]
    node _T_156 = mux(isNaNOut, UInt<6>("h38"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 276:16]
    node expOut = or(_T_155, _T_156) @[RoundAnyRawFNToRecFN.scala 275:77]
    node _T_157 = or(isNaNOut, io.in.isZero) @[RoundAnyRawFNToRecFN.scala 278:22]
    node _T_158 = or(_T_157, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 278:38]
    node _T_159 = mux(isNaNOut, UInt<10>("h200"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 279:16]
    node _T_160 = mux(_T_158, _T_159, common_fractOut) @[RoundAnyRawFNToRecFN.scala 278:12]
    node _T_161 = bits(pegMaxFiniteMagOut, 0, 0) @[Bitwise.scala 72:15]
    node _T_162 = mux(_T_161, UInt<10>("h3ff"), UInt<10>("h0")) @[Bitwise.scala 72:12]
    node fractOut = or(_T_160, _T_162) @[RoundAnyRawFNToRecFN.scala 281:11]
    node _T_163 = cat(signOut, expOut) @[Cat.scala 29:58]
    node _T_164 = cat(_T_163, fractOut) @[Cat.scala 29:58]
    io.out <= _T_164 @[RoundAnyRawFNToRecFN.scala 284:12]
    node _T_165 = cat(underflow, inexact) @[Cat.scala 29:58]
    node _T_166 = cat(io.invalidExc, io.infiniteExc) @[Cat.scala 29:58]
    node _T_167 = cat(_T_166, overflow) @[Cat.scala 29:58]
    node _T_168 = cat(_T_167, _T_165) @[Cat.scala 29:58]
    io.exceptionFlags <= _T_168 @[RoundAnyRawFNToRecFN.scala 285:23]

  module RoundRawFNToRecFN :
    output io : { flip invalidExc : UInt<1>, flip infiniteExc : UInt<1>, flip in : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<7>, sig : UInt<14>}, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<17>, exceptionFlags : UInt<5>}
  
    io is invalid
    inst roundAnyRawFNToRecFN of RoundAnyRawFNToRecFN @[RoundAnyRawFNToRecFN.scala 307:15]
    roundAnyRawFNToRecFN.io is invalid
    roundAnyRawFNToRecFN.io.invalidExc <= io.invalidExc @[RoundAnyRawFNToRecFN.scala 310:44]
    roundAnyRawFNToRecFN.io.infiniteExc <= io.infiniteExc @[RoundAnyRawFNToRecFN.scala 311:44]
    roundAnyRawFNToRecFN.io.in <- io.in @[RoundAnyRawFNToRecFN.scala 312:44]
    roundAnyRawFNToRecFN.io.roundingMode <= io.roundingMode @[RoundAnyRawFNToRecFN.scala 313:44]
    roundAnyRawFNToRecFN.io.detectTininess <= io.detectTininess @[RoundAnyRawFNToRecFN.scala 314:44]
    io.out <= roundAnyRawFNToRecFN.io.out @[RoundAnyRawFNToRecFN.scala 315:23]
    io.exceptionFlags <= roundAnyRawFNToRecFN.io.exceptionFlags @[RoundAnyRawFNToRecFN.scala 316:23]

  module MulRecFN :
    output io : { flip a : UInt<17>, flip b : UInt<17>, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<17>, exceptionFlags : UInt<5>}
  
    inst mulRawFN of MulRawFN @[MulRecFN.scala 113:26]
    node _T = bits(io.a, 15, 10) @[rawFloatFromRecFN.scala 50:21]
    node _T_1 = bits(_T, 5, 3) @[rawFloatFromRecFN.scala 51:29]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[rawFloatFromRecFN.scala 51:54]
    node _T_3 = bits(_T, 5, 4) @[rawFloatFromRecFN.scala 52:29]
    node _T_4 = eq(_T_3, UInt<2>("h3")) @[rawFloatFromRecFN.scala 52:54]
    wire _T_5 : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<7>, sig : UInt<12>} @[rawFloatFromRecFN.scala 54:23]
    _T_5 is invalid @[rawFloatFromRecFN.scala 54:23]
    node _T_6 = bits(_T, 3, 3) @[rawFloatFromRecFN.scala 55:41]
    node _T_7 = and(_T_4, _T_6) @[rawFloatFromRecFN.scala 55:33]
    _T_5.isNaN <= _T_7 @[rawFloatFromRecFN.scala 55:20]
    node _T_8 = bits(_T, 3, 3) @[rawFloatFromRecFN.scala 56:41]
    node _T_9 = eq(_T_8, UInt<1>("h0")) @[rawFloatFromRecFN.scala 56:36]
    node _T_10 = and(_T_4, _T_9) @[rawFloatFromRecFN.scala 56:33]
    _T_5.isInf <= _T_10 @[rawFloatFromRecFN.scala 56:20]
    _T_5.isZero <= _T_2 @[rawFloatFromRecFN.scala 57:20]
    node _T_11 = bits(io.a, 16, 16) @[rawFloatFromRecFN.scala 58:25]
    _T_5.sign <= _T_11 @[rawFloatFromRecFN.scala 58:20]
    node _T_12 = cvt(_T) @[rawFloatFromRecFN.scala 59:27]
    _T_5.sExp <= _T_12 @[rawFloatFromRecFN.scala 59:20]
    node _T_13 = eq(_T_2, UInt<1>("h0")) @[rawFloatFromRecFN.scala 60:39]
    node _T_14 = bits(io.a, 9, 0) @[rawFloatFromRecFN.scala 60:51]
    node _T_15 = cat(UInt<1>("h0"), _T_13) @[Cat.scala 29:58]
    node _T_16 = cat(_T_15, _T_14) @[Cat.scala 29:58]
    _T_5.sig <= _T_16 @[rawFloatFromRecFN.scala 60:20]
    mulRawFN.io.a.sig <= _T_5.sig @[MulRecFN.scala 115:19]
    mulRawFN.io.a.sExp <= _T_5.sExp @[MulRecFN.scala 115:19]
    mulRawFN.io.a.sign <= _T_5.sign @[MulRecFN.scala 115:19]
    mulRawFN.io.a.isZero <= _T_5.isZero @[MulRecFN.scala 115:19]
    mulRawFN.io.a.isInf <= _T_5.isInf @[MulRecFN.scala 115:19]
    mulRawFN.io.a.isNaN <= _T_5.isNaN @[MulRecFN.scala 115:19]
    node _T_17 = bits(io.b, 15, 10) @[rawFloatFromRecFN.scala 50:21]
    node _T_18 = bits(_T_17, 5, 3) @[rawFloatFromRecFN.scala 51:29]
    node _T_19 = eq(_T_18, UInt<1>("h0")) @[rawFloatFromRecFN.scala 51:54]
    node _T_20 = bits(_T_17, 5, 4) @[rawFloatFromRecFN.scala 52:29]
    node _T_21 = eq(_T_20, UInt<2>("h3")) @[rawFloatFromRecFN.scala 52:54]
    wire _T_22 : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<7>, sig : UInt<12>} @[rawFloatFromRecFN.scala 54:23]
    _T_22 is invalid @[rawFloatFromRecFN.scala 54:23]
    node _T_23 = bits(_T_17, 3, 3) @[rawFloatFromRecFN.scala 55:41]
    node _T_24 = and(_T_21, _T_23) @[rawFloatFromRecFN.scala 55:33]
    _T_22.isNaN <= _T_24 @[rawFloatFromRecFN.scala 55:20]
    node _T_25 = bits(_T_17, 3, 3) @[rawFloatFromRecFN.scala 56:41]
    node _T_26 = eq(_T_25, UInt<1>("h0")) @[rawFloatFromRecFN.scala 56:36]
    node _T_27 = and(_T_21, _T_26) @[rawFloatFromRecFN.scala 56:33]
    _T_22.isInf <= _T_27 @[rawFloatFromRecFN.scala 56:20]
    _T_22.isZero <= _T_19 @[rawFloatFromRecFN.scala 57:20]
    node _T_28 = bits(io.b, 16, 16) @[rawFloatFromRecFN.scala 58:25]
    _T_22.sign <= _T_28 @[rawFloatFromRecFN.scala 58:20]
    node _T_29 = cvt(_T_17) @[rawFloatFromRecFN.scala 59:27]
    _T_22.sExp <= _T_29 @[rawFloatFromRecFN.scala 59:20]
    node _T_30 = eq(_T_19, UInt<1>("h0")) @[rawFloatFromRecFN.scala 60:39]
    node _T_31 = bits(io.b, 9, 0) @[rawFloatFromRecFN.scala 60:51]
    node _T_32 = cat(UInt<1>("h0"), _T_30) @[Cat.scala 29:58]
    node _T_33 = cat(_T_32, _T_31) @[Cat.scala 29:58]
    _T_22.sig <= _T_33 @[rawFloatFromRecFN.scala 60:20]
    mulRawFN.io.b.sig <= _T_22.sig @[MulRecFN.scala 116:19]
    mulRawFN.io.b.sExp <= _T_22.sExp @[MulRecFN.scala 116:19]
    mulRawFN.io.b.sign <= _T_22.sign @[MulRecFN.scala 116:19]
    mulRawFN.io.b.isZero <= _T_22.isZero @[MulRecFN.scala 116:19]
    mulRawFN.io.b.isInf <= _T_22.isInf @[MulRecFN.scala 116:19]
    mulRawFN.io.b.isNaN <= _T_22.isNaN @[MulRecFN.scala 116:19]
    inst roundRawFNToRecFN of RoundRawFNToRecFN @[MulRecFN.scala 121:15]
    roundRawFNToRecFN.io.invalidExc <= mulRawFN.io.invalidExc @[MulRecFN.scala 122:39]
    roundRawFNToRecFN.io.infiniteExc <= UInt<1>("h0") @[MulRecFN.scala 123:39]
    roundRawFNToRecFN.io.in.sig <= mulRawFN.io.rawOut.sig @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.in.sExp <= mulRawFN.io.rawOut.sExp @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.in.sign <= mulRawFN.io.rawOut.sign @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.in.isZero <= mulRawFN.io.rawOut.isZero @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.in.isInf <= mulRawFN.io.rawOut.isInf @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.in.isNaN <= mulRawFN.io.rawOut.isNaN @[MulRecFN.scala 124:39]
    roundRawFNToRecFN.io.roundingMode <= io.roundingMode @[MulRecFN.scala 125:39]
    roundRawFNToRecFN.io.detectTininess <= io.detectTininess @[MulRecFN.scala 126:41]
    io.out <= roundRawFNToRecFN.io.out @[MulRecFN.scala 127:23]
    io.exceptionFlags <= roundRawFNToRecFN.io.exceptionFlags @[MulRecFN.scala 128:23]

  module ValExec_MulRecFN :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip a : UInt<16>, flip b : UInt<16>, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, expected : { flip out : UInt<16>, flip exceptionFlags : UInt<5>, recOut : UInt<17>}, actual : { out : UInt<17>, exceptionFlags : UInt<5>}, check : UInt<1>, pass : UInt<1>}
  
    clock is invalid
    reset is invalid
    io is invalid
    inst mulRecFN of MulRecFN @[ValExec_MulRecFN.scala 66:26]
    mulRecFN.io is invalid
    node _T = bits(io.a, 15, 15) @[rawFloatFromFN.scala 46:22]
    node _T_1 = bits(io.a, 14, 10) @[rawFloatFromFN.scala 47:23]
    node _T_2 = bits(io.a, 9, 0) @[rawFloatFromFN.scala 48:25]
    node _T_3 = eq(_T_1, UInt<1>("h0")) @[rawFloatFromFN.scala 50:34]
    node _T_4 = eq(_T_2, UInt<1>("h0")) @[rawFloatFromFN.scala 51:38]
    node _T_5 = bits(_T_2, 0, 0) @[primitives.scala 92:52]
    node _T_6 = bits(_T_2, 1, 1) @[primitives.scala 92:52]
    node _T_7 = bits(_T_2, 2, 2) @[primitives.scala 92:52]
    node _T_8 = bits(_T_2, 3, 3) @[primitives.scala 92:52]
    node _T_9 = bits(_T_2, 4, 4) @[primitives.scala 92:52]
    node _T_10 = bits(_T_2, 5, 5) @[primitives.scala 92:52]
    node _T_11 = bits(_T_2, 6, 6) @[primitives.scala 92:52]
    node _T_12 = bits(_T_2, 7, 7) @[primitives.scala 92:52]
    node _T_13 = bits(_T_2, 8, 8) @[primitives.scala 92:52]
    node _T_14 = bits(_T_2, 9, 9) @[primitives.scala 92:52]
    node _T_15 = mux(_T_6, UInt<4>("h8"), UInt<4>("h9")) @[Mux.scala 47:69]
    node _T_16 = mux(_T_7, UInt<3>("h7"), _T_15) @[Mux.scala 47:69]
    node _T_17 = mux(_T_8, UInt<3>("h6"), _T_16) @[Mux.scala 47:69]
    node _T_18 = mux(_T_9, UInt<3>("h5"), _T_17) @[Mux.scala 47:69]
    node _T_19 = mux(_T_10, UInt<3>("h4"), _T_18) @[Mux.scala 47:69]
    node _T_20 = mux(_T_11, UInt<2>("h3"), _T_19) @[Mux.scala 47:69]
    node _T_21 = mux(_T_12, UInt<2>("h2"), _T_20) @[Mux.scala 47:69]
    node _T_22 = mux(_T_13, UInt<1>("h1"), _T_21) @[Mux.scala 47:69]
    node _T_23 = mux(_T_14, UInt<1>("h0"), _T_22) @[Mux.scala 47:69]
    node _T_24 = dshl(_T_2, _T_23) @[rawFloatFromFN.scala 54:36]
    node _T_25 = bits(_T_24, 8, 0) @[rawFloatFromFN.scala 54:47]
    node _T_26 = shl(_T_25, 1) @[rawFloatFromFN.scala 54:64]
    node _T_27 = xor(_T_23, UInt<6>("h3f")) @[rawFloatFromFN.scala 57:26]
    node _T_28 = mux(_T_3, _T_27, _T_1) @[rawFloatFromFN.scala 56:16]
    node _T_29 = mux(_T_3, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 60:27]
    node _T_30 = or(UInt<5>("h10"), _T_29) @[rawFloatFromFN.scala 60:22]
    node _T_31 = add(_T_28, _T_30) @[rawFloatFromFN.scala 59:15]
    node _T_32 = tail(_T_31, 1) @[rawFloatFromFN.scala 59:15]
    node _T_33 = and(_T_3, _T_4) @[rawFloatFromFN.scala 62:34]
    node _T_34 = bits(_T_32, 5, 4) @[rawFloatFromFN.scala 63:37]
    node _T_35 = eq(_T_34, UInt<2>("h3")) @[rawFloatFromFN.scala 63:62]
    wire _T_36 : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<7>, sig : UInt<12>} @[rawFloatFromFN.scala 65:23]
    _T_36 is invalid @[rawFloatFromFN.scala 65:23]
    node _T_37 = eq(_T_4, UInt<1>("h0")) @[rawFloatFromFN.scala 66:36]
    node _T_38 = and(_T_35, _T_37) @[rawFloatFromFN.scala 66:33]
    _T_36.isNaN <= _T_38 @[rawFloatFromFN.scala 66:20]
    node _T_39 = and(_T_35, _T_4) @[rawFloatFromFN.scala 67:33]
    _T_36.isInf <= _T_39 @[rawFloatFromFN.scala 67:20]
    _T_36.isZero <= _T_33 @[rawFloatFromFN.scala 68:20]
    _T_36.sign <= _T @[rawFloatFromFN.scala 69:20]
    node _T_40 = bits(_T_32, 5, 0) @[rawFloatFromFN.scala 70:34]
    node _T_41 = cvt(_T_40) @[rawFloatFromFN.scala 70:48]
    _T_36.sExp <= _T_41 @[rawFloatFromFN.scala 70:20]
    node _T_42 = eq(_T_33, UInt<1>("h0")) @[rawFloatFromFN.scala 72:29]
    node _T_43 = mux(_T_3, _T_26, _T_2) @[rawFloatFromFN.scala 72:42]
    node _T_44 = cat(UInt<1>("h0"), _T_42) @[Cat.scala 29:58]
    node _T_45 = cat(_T_44, _T_43) @[Cat.scala 29:58]
    _T_36.sig <= _T_45 @[rawFloatFromFN.scala 71:17]
    node _T_46 = bits(_T_36.sExp, 5, 3) @[recFNFromFN.scala 48:53]
    node _T_47 = mux(_T_36.isZero, UInt<3>("h0"), _T_46) @[recFNFromFN.scala 48:16]
    node _T_48 = mux(_T_36.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
    node _T_49 = or(_T_47, _T_48) @[recFNFromFN.scala 48:79]
    node _T_50 = bits(_T_36.sExp, 2, 0) @[recFNFromFN.scala 50:23]
    node _T_51 = bits(_T_36.sig, 9, 0) @[recFNFromFN.scala 51:22]
    node _T_52 = cat(_T_50, _T_51) @[Cat.scala 29:58]
    node _T_53 = cat(_T_36.sign, _T_49) @[Cat.scala 29:58]
    node _T_54 = cat(_T_53, _T_52) @[Cat.scala 29:58]
    mulRecFN.io.a <= _T_54 @[ValExec_MulRecFN.scala 67:19]
    node _T_55 = bits(io.b, 15, 15) @[rawFloatFromFN.scala 46:22]
    node _T_56 = bits(io.b, 14, 10) @[rawFloatFromFN.scala 47:23]
    node _T_57 = bits(io.b, 9, 0) @[rawFloatFromFN.scala 48:25]
    node _T_58 = eq(_T_56, UInt<1>("h0")) @[rawFloatFromFN.scala 50:34]
    node _T_59 = eq(_T_57, UInt<1>("h0")) @[rawFloatFromFN.scala 51:38]
    node _T_60 = bits(_T_57, 0, 0) @[primitives.scala 92:52]
    node _T_61 = bits(_T_57, 1, 1) @[primitives.scala 92:52]
    node _T_62 = bits(_T_57, 2, 2) @[primitives.scala 92:52]
    node _T_63 = bits(_T_57, 3, 3) @[primitives.scala 92:52]
    node _T_64 = bits(_T_57, 4, 4) @[primitives.scala 92:52]
    node _T_65 = bits(_T_57, 5, 5) @[primitives.scala 92:52]
    node _T_66 = bits(_T_57, 6, 6) @[primitives.scala 92:52]
    node _T_67 = bits(_T_57, 7, 7) @[primitives.scala 92:52]
    node _T_68 = bits(_T_57, 8, 8) @[primitives.scala 92:52]
    node _T_69 = bits(_T_57, 9, 9) @[primitives.scala 92:52]
    node _T_70 = mux(_T_61, UInt<4>("h8"), UInt<4>("h9")) @[Mux.scala 47:69]
    node _T_71 = mux(_T_62, UInt<3>("h7"), _T_70) @[Mux.scala 47:69]
    node _T_72 = mux(_T_63, UInt<3>("h6"), _T_71) @[Mux.scala 47:69]
    node _T_73 = mux(_T_64, UInt<3>("h5"), _T_72) @[Mux.scala 47:69]
    node _T_74 = mux(_T_65, UInt<3>("h4"), _T_73) @[Mux.scala 47:69]
    node _T_75 = mux(_T_66, UInt<2>("h3"), _T_74) @[Mux.scala 47:69]
    node _T_76 = mux(_T_67, UInt<2>("h2"), _T_75) @[Mux.scala 47:69]
    node _T_77 = mux(_T_68, UInt<1>("h1"), _T_76) @[Mux.scala 47:69]
    node _T_78 = mux(_T_69, UInt<1>("h0"), _T_77) @[Mux.scala 47:69]
    node _T_79 = dshl(_T_57, _T_78) @[rawFloatFromFN.scala 54:36]
    node _T_80 = bits(_T_79, 8, 0) @[rawFloatFromFN.scala 54:47]
    node _T_81 = shl(_T_80, 1) @[rawFloatFromFN.scala 54:64]
    node _T_82 = xor(_T_78, UInt<6>("h3f")) @[rawFloatFromFN.scala 57:26]
    node _T_83 = mux(_T_58, _T_82, _T_56) @[rawFloatFromFN.scala 56:16]
    node _T_84 = mux(_T_58, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 60:27]
    node _T_85 = or(UInt<5>("h10"), _T_84) @[rawFloatFromFN.scala 60:22]
    node _T_86 = add(_T_83, _T_85) @[rawFloatFromFN.scala 59:15]
    node _T_87 = tail(_T_86, 1) @[rawFloatFromFN.scala 59:15]
    node _T_88 = and(_T_58, _T_59) @[rawFloatFromFN.scala 62:34]
    node _T_89 = bits(_T_87, 5, 4) @[rawFloatFromFN.scala 63:37]
    node _T_90 = eq(_T_89, UInt<2>("h3")) @[rawFloatFromFN.scala 63:62]
    wire _T_91 : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<7>, sig : UInt<12>} @[rawFloatFromFN.scala 65:23]
    _T_91 is invalid @[rawFloatFromFN.scala 65:23]
    node _T_92 = eq(_T_59, UInt<1>("h0")) @[rawFloatFromFN.scala 66:36]
    node _T_93 = and(_T_90, _T_92) @[rawFloatFromFN.scala 66:33]
    _T_91.isNaN <= _T_93 @[rawFloatFromFN.scala 66:20]
    node _T_94 = and(_T_90, _T_59) @[rawFloatFromFN.scala 67:33]
    _T_91.isInf <= _T_94 @[rawFloatFromFN.scala 67:20]
    _T_91.isZero <= _T_88 @[rawFloatFromFN.scala 68:20]
    _T_91.sign <= _T_55 @[rawFloatFromFN.scala 69:20]
    node _T_95 = bits(_T_87, 5, 0) @[rawFloatFromFN.scala 70:34]
    node _T_96 = cvt(_T_95) @[rawFloatFromFN.scala 70:48]
    _T_91.sExp <= _T_96 @[rawFloatFromFN.scala 70:20]
    node _T_97 = eq(_T_88, UInt<1>("h0")) @[rawFloatFromFN.scala 72:29]
    node _T_98 = mux(_T_58, _T_81, _T_57) @[rawFloatFromFN.scala 72:42]
    node _T_99 = cat(UInt<1>("h0"), _T_97) @[Cat.scala 29:58]
    node _T_100 = cat(_T_99, _T_98) @[Cat.scala 29:58]
    _T_91.sig <= _T_100 @[rawFloatFromFN.scala 71:17]
    node _T_101 = bits(_T_91.sExp, 5, 3) @[recFNFromFN.scala 48:53]
    node _T_102 = mux(_T_91.isZero, UInt<3>("h0"), _T_101) @[recFNFromFN.scala 48:16]
    node _T_103 = mux(_T_91.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
    node _T_104 = or(_T_102, _T_103) @[recFNFromFN.scala 48:79]
    node _T_105 = bits(_T_91.sExp, 2, 0) @[recFNFromFN.scala 50:23]
    node _T_106 = bits(_T_91.sig, 9, 0) @[recFNFromFN.scala 51:22]
    node _T_107 = cat(_T_105, _T_106) @[Cat.scala 29:58]
    node _T_108 = cat(_T_91.sign, _T_104) @[Cat.scala 29:58]
    node _T_109 = cat(_T_108, _T_107) @[Cat.scala 29:58]
    mulRecFN.io.b <= _T_109 @[ValExec_MulRecFN.scala 68:19]
    mulRecFN.io.roundingMode <= io.roundingMode @[ValExec_MulRecFN.scala 69:32]
    mulRecFN.io.detectTininess <= io.detectTininess @[ValExec_MulRecFN.scala 70:32]
    node _T_110 = bits(io.expected.out, 15, 15) @[rawFloatFromFN.scala 46:22]
    node _T_111 = bits(io.expected.out, 14, 10) @[rawFloatFromFN.scala 47:23]
    node _T_112 = bits(io.expected.out, 9, 0) @[rawFloatFromFN.scala 48:25]
    node _T_113 = eq(_T_111, UInt<1>("h0")) @[rawFloatFromFN.scala 50:34]
    node _T_114 = eq(_T_112, UInt<1>("h0")) @[rawFloatFromFN.scala 51:38]
    node _T_115 = bits(_T_112, 0, 0) @[primitives.scala 92:52]
    node _T_116 = bits(_T_112, 1, 1) @[primitives.scala 92:52]
    node _T_117 = bits(_T_112, 2, 2) @[primitives.scala 92:52]
    node _T_118 = bits(_T_112, 3, 3) @[primitives.scala 92:52]
    node _T_119 = bits(_T_112, 4, 4) @[primitives.scala 92:52]
    node _T_120 = bits(_T_112, 5, 5) @[primitives.scala 92:52]
    node _T_121 = bits(_T_112, 6, 6) @[primitives.scala 92:52]
    node _T_122 = bits(_T_112, 7, 7) @[primitives.scala 92:52]
    node _T_123 = bits(_T_112, 8, 8) @[primitives.scala 92:52]
    node _T_124 = bits(_T_112, 9, 9) @[primitives.scala 92:52]
    node _T_125 = mux(_T_116, UInt<4>("h8"), UInt<4>("h9")) @[Mux.scala 47:69]
    node _T_126 = mux(_T_117, UInt<3>("h7"), _T_125) @[Mux.scala 47:69]
    node _T_127 = mux(_T_118, UInt<3>("h6"), _T_126) @[Mux.scala 47:69]
    node _T_128 = mux(_T_119, UInt<3>("h5"), _T_127) @[Mux.scala 47:69]
    node _T_129 = mux(_T_120, UInt<3>("h4"), _T_128) @[Mux.scala 47:69]
    node _T_130 = mux(_T_121, UInt<2>("h3"), _T_129) @[Mux.scala 47:69]
    node _T_131 = mux(_T_122, UInt<2>("h2"), _T_130) @[Mux.scala 47:69]
    node _T_132 = mux(_T_123, UInt<1>("h1"), _T_131) @[Mux.scala 47:69]
    node _T_133 = mux(_T_124, UInt<1>("h0"), _T_132) @[Mux.scala 47:69]
    node _T_134 = dshl(_T_112, _T_133) @[rawFloatFromFN.scala 54:36]
    node _T_135 = bits(_T_134, 8, 0) @[rawFloatFromFN.scala 54:47]
    node _T_136 = shl(_T_135, 1) @[rawFloatFromFN.scala 54:64]
    node _T_137 = xor(_T_133, UInt<6>("h3f")) @[rawFloatFromFN.scala 57:26]
    node _T_138 = mux(_T_113, _T_137, _T_111) @[rawFloatFromFN.scala 56:16]
    node _T_139 = mux(_T_113, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 60:27]
    node _T_140 = or(UInt<5>("h10"), _T_139) @[rawFloatFromFN.scala 60:22]
    node _T_141 = add(_T_138, _T_140) @[rawFloatFromFN.scala 59:15]
    node _T_142 = tail(_T_141, 1) @[rawFloatFromFN.scala 59:15]
    node _T_143 = and(_T_113, _T_114) @[rawFloatFromFN.scala 62:34]
    node _T_144 = bits(_T_142, 5, 4) @[rawFloatFromFN.scala 63:37]
    node _T_145 = eq(_T_144, UInt<2>("h3")) @[rawFloatFromFN.scala 63:62]
    wire _T_146 : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<7>, sig : UInt<12>} @[rawFloatFromFN.scala 65:23]
    _T_146 is invalid @[rawFloatFromFN.scala 65:23]
    node _T_147 = eq(_T_114, UInt<1>("h0")) @[rawFloatFromFN.scala 66:36]
    node _T_148 = and(_T_145, _T_147) @[rawFloatFromFN.scala 66:33]
    _T_146.isNaN <= _T_148 @[rawFloatFromFN.scala 66:20]
    node _T_149 = and(_T_145, _T_114) @[rawFloatFromFN.scala 67:33]
    _T_146.isInf <= _T_149 @[rawFloatFromFN.scala 67:20]
    _T_146.isZero <= _T_143 @[rawFloatFromFN.scala 68:20]
    _T_146.sign <= _T_110 @[rawFloatFromFN.scala 69:20]
    node _T_150 = bits(_T_142, 5, 0) @[rawFloatFromFN.scala 70:34]
    node _T_151 = cvt(_T_150) @[rawFloatFromFN.scala 70:48]
    _T_146.sExp <= _T_151 @[rawFloatFromFN.scala 70:20]
    node _T_152 = eq(_T_143, UInt<1>("h0")) @[rawFloatFromFN.scala 72:29]
    node _T_153 = mux(_T_113, _T_136, _T_112) @[rawFloatFromFN.scala 72:42]
    node _T_154 = cat(UInt<1>("h0"), _T_152) @[Cat.scala 29:58]
    node _T_155 = cat(_T_154, _T_153) @[Cat.scala 29:58]
    _T_146.sig <= _T_155 @[rawFloatFromFN.scala 71:17]
    node _T_156 = bits(_T_146.sExp, 5, 3) @[recFNFromFN.scala 48:53]
    node _T_157 = mux(_T_146.isZero, UInt<3>("h0"), _T_156) @[recFNFromFN.scala 48:16]
    node _T_158 = mux(_T_146.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
    node _T_159 = or(_T_157, _T_158) @[recFNFromFN.scala 48:79]
    node _T_160 = bits(_T_146.sExp, 2, 0) @[recFNFromFN.scala 50:23]
    node _T_161 = bits(_T_146.sig, 9, 0) @[recFNFromFN.scala 51:22]
    node _T_162 = cat(_T_160, _T_161) @[Cat.scala 29:58]
    node _T_163 = cat(_T_146.sign, _T_159) @[Cat.scala 29:58]
    node _T_164 = cat(_T_163, _T_162) @[Cat.scala 29:58]
    io.expected.recOut <= _T_164 @[ValExec_MulRecFN.scala 72:24]
    io.actual.out <= mulRecFN.io.out @[ValExec_MulRecFN.scala 74:19]
    io.actual.exceptionFlags <= mulRecFN.io.exceptionFlags @[ValExec_MulRecFN.scala 75:30]
    io.check <= UInt<1>("h1") @[ValExec_MulRecFN.scala 77:14]
    node _T_165 = bits(io.actual.out, 16, 13) @[package.scala 46:22]
    node _T_166 = bits(io.expected.recOut, 16, 13) @[package.scala 47:22]
    node _T_167 = bits(_T_165, 2, 0) @[package.scala 48:19]
    node _T_168 = eq(_T_167, UInt<1>("h0")) @[package.scala 48:26]
    node _T_169 = bits(_T_165, 2, 0) @[package.scala 48:44]
    node _T_170 = eq(_T_169, UInt<3>("h7")) @[package.scala 48:51]
    node _T_171 = or(_T_168, _T_170) @[package.scala 48:35]
    node _T_172 = eq(_T_165, _T_166) @[package.scala 49:20]
    node _T_173 = bits(io.actual.out, 9, 0) @[package.scala 49:36]
    node _T_174 = bits(io.expected.recOut, 9, 0) @[package.scala 49:59]
    node _T_175 = eq(_T_173, _T_174) @[package.scala 49:54]
    node _T_176 = and(_T_172, _T_175) @[package.scala 49:31]
    node _T_177 = bits(_T_165, 2, 0) @[package.scala 50:23]
    node _T_178 = eq(_T_177, UInt<3>("h6")) @[package.scala 50:30]
    node _T_179 = eq(_T_165, _T_166) @[package.scala 50:47]
    node _T_180 = eq(io.actual.out, io.expected.recOut) @[package.scala 50:62]
    node _T_181 = mux(_T_178, _T_179, _T_180) @[package.scala 50:16]
    node _T_182 = mux(_T_171, _T_176, _T_181) @[package.scala 48:12]
    node _T_183 = eq(io.actual.exceptionFlags, io.expected.exceptionFlags) @[ValExec_MulRecFN.scala 80:35]
    node _T_184 = and(_T_182, _T_183) @[ValExec_MulRecFN.scala 79:75]
    io.pass <= _T_184 @[ValExec_MulRecFN.scala 78:13]
