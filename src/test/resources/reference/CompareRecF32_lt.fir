circuit ValExec_CompareRecFN_lt :
  module CompareRecFN :
    output io : { flip a : UInt<33>, flip b : UInt<33>, flip signaling : UInt<1>, lt : UInt<1>, eq : UInt<1>, gt : UInt<1>, exceptionFlags : UInt<5>}
  
    io is invalid
    node _T = bits(io.a, 31, 23) @[rawFloatFromRecFN.scala 50:21]
    node _T_1 = bits(_T, 8, 6) @[rawFloatFromRecFN.scala 51:29]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[rawFloatFromRecFN.scala 51:54]
    node _T_3 = bits(_T, 8, 7) @[rawFloatFromRecFN.scala 52:29]
    node _T_4 = eq(_T_3, UInt<2>("h3")) @[rawFloatFromRecFN.scala 52:54]
    wire rawA : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromRecFN.scala 54:23]
    rawA is invalid @[rawFloatFromRecFN.scala 54:23]
    node _T_5 = bits(_T, 6, 6) @[rawFloatFromRecFN.scala 55:41]
    node _T_6 = and(_T_4, _T_5) @[rawFloatFromRecFN.scala 55:33]
    rawA.isNaN <= _T_6 @[rawFloatFromRecFN.scala 55:20]
    node _T_7 = bits(_T, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _T_8 = eq(_T_7, UInt<1>("h0")) @[rawFloatFromRecFN.scala 56:36]
    node _T_9 = and(_T_4, _T_8) @[rawFloatFromRecFN.scala 56:33]
    rawA.isInf <= _T_9 @[rawFloatFromRecFN.scala 56:20]
    rawA.isZero <= _T_2 @[rawFloatFromRecFN.scala 57:20]
    node _T_10 = bits(io.a, 32, 32) @[rawFloatFromRecFN.scala 58:25]
    rawA.sign <= _T_10 @[rawFloatFromRecFN.scala 58:20]
    node _T_11 = cvt(_T) @[rawFloatFromRecFN.scala 59:27]
    rawA.sExp <= _T_11 @[rawFloatFromRecFN.scala 59:20]
    node _T_12 = eq(_T_2, UInt<1>("h0")) @[rawFloatFromRecFN.scala 60:39]
    node _T_13 = bits(io.a, 22, 0) @[rawFloatFromRecFN.scala 60:51]
    node _T_14 = cat(UInt<1>("h0"), _T_12) @[Cat.scala 29:58]
    node _T_15 = cat(_T_14, _T_13) @[Cat.scala 29:58]
    rawA.sig <= _T_15 @[rawFloatFromRecFN.scala 60:20]
    node _T_16 = bits(io.b, 31, 23) @[rawFloatFromRecFN.scala 50:21]
    node _T_17 = bits(_T_16, 8, 6) @[rawFloatFromRecFN.scala 51:29]
    node _T_18 = eq(_T_17, UInt<1>("h0")) @[rawFloatFromRecFN.scala 51:54]
    node _T_19 = bits(_T_16, 8, 7) @[rawFloatFromRecFN.scala 52:29]
    node _T_20 = eq(_T_19, UInt<2>("h3")) @[rawFloatFromRecFN.scala 52:54]
    wire rawB : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromRecFN.scala 54:23]
    rawB is invalid @[rawFloatFromRecFN.scala 54:23]
    node _T_21 = bits(_T_16, 6, 6) @[rawFloatFromRecFN.scala 55:41]
    node _T_22 = and(_T_20, _T_21) @[rawFloatFromRecFN.scala 55:33]
    rawB.isNaN <= _T_22 @[rawFloatFromRecFN.scala 55:20]
    node _T_23 = bits(_T_16, 6, 6) @[rawFloatFromRecFN.scala 56:41]
    node _T_24 = eq(_T_23, UInt<1>("h0")) @[rawFloatFromRecFN.scala 56:36]
    node _T_25 = and(_T_20, _T_24) @[rawFloatFromRecFN.scala 56:33]
    rawB.isInf <= _T_25 @[rawFloatFromRecFN.scala 56:20]
    rawB.isZero <= _T_18 @[rawFloatFromRecFN.scala 57:20]
    node _T_26 = bits(io.b, 32, 32) @[rawFloatFromRecFN.scala 58:25]
    rawB.sign <= _T_26 @[rawFloatFromRecFN.scala 58:20]
    node _T_27 = cvt(_T_16) @[rawFloatFromRecFN.scala 59:27]
    rawB.sExp <= _T_27 @[rawFloatFromRecFN.scala 59:20]
    node _T_28 = eq(_T_18, UInt<1>("h0")) @[rawFloatFromRecFN.scala 60:39]
    node _T_29 = bits(io.b, 22, 0) @[rawFloatFromRecFN.scala 60:51]
    node _T_30 = cat(UInt<1>("h0"), _T_28) @[Cat.scala 29:58]
    node _T_31 = cat(_T_30, _T_29) @[Cat.scala 29:58]
    rawB.sig <= _T_31 @[rawFloatFromRecFN.scala 60:20]
    node _T_32 = eq(rawA.isNaN, UInt<1>("h0")) @[CompareRecFN.scala 57:19]
    node _T_33 = eq(rawB.isNaN, UInt<1>("h0")) @[CompareRecFN.scala 57:35]
    node ordered = and(_T_32, _T_33) @[CompareRecFN.scala 57:32]
    node bothInfs = and(rawA.isInf, rawB.isInf) @[CompareRecFN.scala 58:33]
    node bothZeros = and(rawA.isZero, rawB.isZero) @[CompareRecFN.scala 59:33]
    node eqExps = eq(rawA.sExp, rawB.sExp) @[CompareRecFN.scala 60:29]
    node _T_34 = lt(rawA.sExp, rawB.sExp) @[CompareRecFN.scala 62:20]
    node _T_35 = lt(rawA.sig, rawB.sig) @[CompareRecFN.scala 62:57]
    node _T_36 = and(eqExps, _T_35) @[CompareRecFN.scala 62:44]
    node common_ltMags = or(_T_34, _T_36) @[CompareRecFN.scala 62:33]
    node _T_37 = eq(rawA.sig, rawB.sig) @[CompareRecFN.scala 63:45]
    node common_eqMags = and(eqExps, _T_37) @[CompareRecFN.scala 63:32]
    node _T_38 = eq(bothZeros, UInt<1>("h0")) @[CompareRecFN.scala 66:9]
    node _T_39 = eq(rawB.sign, UInt<1>("h0")) @[CompareRecFN.scala 67:28]
    node _T_40 = and(rawA.sign, _T_39) @[CompareRecFN.scala 67:25]
    node _T_41 = eq(bothInfs, UInt<1>("h0")) @[CompareRecFN.scala 68:19]
    node _T_42 = eq(common_ltMags, UInt<1>("h0")) @[CompareRecFN.scala 69:38]
    node _T_43 = and(rawA.sign, _T_42) @[CompareRecFN.scala 69:35]
    node _T_44 = eq(common_eqMags, UInt<1>("h0")) @[CompareRecFN.scala 69:57]
    node _T_45 = and(_T_43, _T_44) @[CompareRecFN.scala 69:54]
    node _T_46 = eq(rawB.sign, UInt<1>("h0")) @[CompareRecFN.scala 70:29]
    node _T_47 = and(_T_46, common_ltMags) @[CompareRecFN.scala 70:41]
    node _T_48 = or(_T_45, _T_47) @[CompareRecFN.scala 69:74]
    node _T_49 = and(_T_41, _T_48) @[CompareRecFN.scala 68:30]
    node _T_50 = or(_T_40, _T_49) @[CompareRecFN.scala 67:41]
    node ordered_lt = and(_T_38, _T_50) @[CompareRecFN.scala 66:21]
    node _T_51 = eq(rawA.sign, rawB.sign) @[CompareRecFN.scala 72:34]
    node _T_52 = or(bothInfs, common_eqMags) @[CompareRecFN.scala 72:62]
    node _T_53 = and(_T_51, _T_52) @[CompareRecFN.scala 72:49]
    node ordered_eq = or(bothZeros, _T_53) @[CompareRecFN.scala 72:19]
    node _T_54 = bits(rawA.sig, 22, 22) @[common.scala 81:56]
    node _T_55 = eq(_T_54, UInt<1>("h0")) @[common.scala 81:49]
    node _T_56 = and(rawA.isNaN, _T_55) @[common.scala 81:46]
    node _T_57 = bits(rawB.sig, 22, 22) @[common.scala 81:56]
    node _T_58 = eq(_T_57, UInt<1>("h0")) @[common.scala 81:49]
    node _T_59 = and(rawB.isNaN, _T_58) @[common.scala 81:46]
    node _T_60 = or(_T_56, _T_59) @[CompareRecFN.scala 75:32]
    node _T_61 = eq(ordered, UInt<1>("h0")) @[CompareRecFN.scala 76:30]
    node _T_62 = and(io.signaling, _T_61) @[CompareRecFN.scala 76:27]
    node invalid = or(_T_60, _T_62) @[CompareRecFN.scala 75:58]
    node _T_63 = and(ordered, ordered_lt) @[CompareRecFN.scala 78:22]
    io.lt <= _T_63 @[CompareRecFN.scala 78:11]
    node _T_64 = and(ordered, ordered_eq) @[CompareRecFN.scala 79:22]
    io.eq <= _T_64 @[CompareRecFN.scala 79:11]
    node _T_65 = eq(ordered_lt, UInt<1>("h0")) @[CompareRecFN.scala 80:25]
    node _T_66 = and(ordered, _T_65) @[CompareRecFN.scala 80:22]
    node _T_67 = eq(ordered_eq, UInt<1>("h0")) @[CompareRecFN.scala 80:41]
    node _T_68 = and(_T_66, _T_67) @[CompareRecFN.scala 80:38]
    io.gt <= _T_68 @[CompareRecFN.scala 80:11]
    node _T_69 = cat(invalid, UInt<4>("h0")) @[Cat.scala 29:58]
    io.exceptionFlags <= _T_69 @[CompareRecFN.scala 81:23]

  module ValExec_CompareRecFN_lt :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip a : UInt<32>, flip b : UInt<32>, expected : { flip out : UInt<1>, flip exceptionFlags : UInt<5>}, actual : { out : UInt<1>, exceptionFlags : UInt<5>}, check : UInt<1>, pass : UInt<1>}
  
    clock is invalid
    reset is invalid
    io is invalid
    inst compareRecFN of CompareRecFN @[ValExec_CompareRecFN.scala 60:30]
    compareRecFN.io is invalid
    node _T = bits(io.a, 31, 31) @[rawFloatFromFN.scala 46:22]
    node _T_1 = bits(io.a, 30, 23) @[rawFloatFromFN.scala 47:23]
    node _T_2 = bits(io.a, 22, 0) @[rawFloatFromFN.scala 48:25]
    node _T_3 = eq(_T_1, UInt<1>("h0")) @[rawFloatFromFN.scala 50:34]
    node _T_4 = eq(_T_2, UInt<1>("h0")) @[rawFloatFromFN.scala 51:38]
    node _T_5 = bits(_T_2, 0, 0) @[primitives.scala 92:52]
    node _T_6 = bits(_T_2, 1, 1) @[primitives.scala 92:52]
    node _T_7 = bits(_T_2, 2, 2) @[primitives.scala 92:52]
    node _T_8 = bits(_T_2, 3, 3) @[primitives.scala 92:52]
    node _T_9 = bits(_T_2, 4, 4) @[primitives.scala 92:52]
    node _T_10 = bits(_T_2, 5, 5) @[primitives.scala 92:52]
    node _T_11 = bits(_T_2, 6, 6) @[primitives.scala 92:52]
    node _T_12 = bits(_T_2, 7, 7) @[primitives.scala 92:52]
    node _T_13 = bits(_T_2, 8, 8) @[primitives.scala 92:52]
    node _T_14 = bits(_T_2, 9, 9) @[primitives.scala 92:52]
    node _T_15 = bits(_T_2, 10, 10) @[primitives.scala 92:52]
    node _T_16 = bits(_T_2, 11, 11) @[primitives.scala 92:52]
    node _T_17 = bits(_T_2, 12, 12) @[primitives.scala 92:52]
    node _T_18 = bits(_T_2, 13, 13) @[primitives.scala 92:52]
    node _T_19 = bits(_T_2, 14, 14) @[primitives.scala 92:52]
    node _T_20 = bits(_T_2, 15, 15) @[primitives.scala 92:52]
    node _T_21 = bits(_T_2, 16, 16) @[primitives.scala 92:52]
    node _T_22 = bits(_T_2, 17, 17) @[primitives.scala 92:52]
    node _T_23 = bits(_T_2, 18, 18) @[primitives.scala 92:52]
    node _T_24 = bits(_T_2, 19, 19) @[primitives.scala 92:52]
    node _T_25 = bits(_T_2, 20, 20) @[primitives.scala 92:52]
    node _T_26 = bits(_T_2, 21, 21) @[primitives.scala 92:52]
    node _T_27 = bits(_T_2, 22, 22) @[primitives.scala 92:52]
    node _T_28 = mux(_T_6, UInt<5>("h15"), UInt<5>("h16")) @[Mux.scala 47:69]
    node _T_29 = mux(_T_7, UInt<5>("h14"), _T_28) @[Mux.scala 47:69]
    node _T_30 = mux(_T_8, UInt<5>("h13"), _T_29) @[Mux.scala 47:69]
    node _T_31 = mux(_T_9, UInt<5>("h12"), _T_30) @[Mux.scala 47:69]
    node _T_32 = mux(_T_10, UInt<5>("h11"), _T_31) @[Mux.scala 47:69]
    node _T_33 = mux(_T_11, UInt<5>("h10"), _T_32) @[Mux.scala 47:69]
    node _T_34 = mux(_T_12, UInt<4>("hf"), _T_33) @[Mux.scala 47:69]
    node _T_35 = mux(_T_13, UInt<4>("he"), _T_34) @[Mux.scala 47:69]
    node _T_36 = mux(_T_14, UInt<4>("hd"), _T_35) @[Mux.scala 47:69]
    node _T_37 = mux(_T_15, UInt<4>("hc"), _T_36) @[Mux.scala 47:69]
    node _T_38 = mux(_T_16, UInt<4>("hb"), _T_37) @[Mux.scala 47:69]
    node _T_39 = mux(_T_17, UInt<4>("ha"), _T_38) @[Mux.scala 47:69]
    node _T_40 = mux(_T_18, UInt<4>("h9"), _T_39) @[Mux.scala 47:69]
    node _T_41 = mux(_T_19, UInt<4>("h8"), _T_40) @[Mux.scala 47:69]
    node _T_42 = mux(_T_20, UInt<3>("h7"), _T_41) @[Mux.scala 47:69]
    node _T_43 = mux(_T_21, UInt<3>("h6"), _T_42) @[Mux.scala 47:69]
    node _T_44 = mux(_T_22, UInt<3>("h5"), _T_43) @[Mux.scala 47:69]
    node _T_45 = mux(_T_23, UInt<3>("h4"), _T_44) @[Mux.scala 47:69]
    node _T_46 = mux(_T_24, UInt<2>("h3"), _T_45) @[Mux.scala 47:69]
    node _T_47 = mux(_T_25, UInt<2>("h2"), _T_46) @[Mux.scala 47:69]
    node _T_48 = mux(_T_26, UInt<1>("h1"), _T_47) @[Mux.scala 47:69]
    node _T_49 = mux(_T_27, UInt<1>("h0"), _T_48) @[Mux.scala 47:69]
    node _T_50 = dshl(_T_2, _T_49) @[rawFloatFromFN.scala 54:36]
    node _T_51 = bits(_T_50, 21, 0) @[rawFloatFromFN.scala 54:47]
    node _T_52 = shl(_T_51, 1) @[rawFloatFromFN.scala 54:64]
    node _T_53 = xor(_T_49, UInt<9>("h1ff")) @[rawFloatFromFN.scala 57:26]
    node _T_54 = mux(_T_3, _T_53, _T_1) @[rawFloatFromFN.scala 56:16]
    node _T_55 = mux(_T_3, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 60:27]
    node _T_56 = or(UInt<8>("h80"), _T_55) @[rawFloatFromFN.scala 60:22]
    node _T_57 = add(_T_54, _T_56) @[rawFloatFromFN.scala 59:15]
    node _T_58 = tail(_T_57, 1) @[rawFloatFromFN.scala 59:15]
    node _T_59 = and(_T_3, _T_4) @[rawFloatFromFN.scala 62:34]
    node _T_60 = bits(_T_58, 8, 7) @[rawFloatFromFN.scala 63:37]
    node _T_61 = eq(_T_60, UInt<2>("h3")) @[rawFloatFromFN.scala 63:62]
    wire _T_62 : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromFN.scala 65:23]
    _T_62 is invalid @[rawFloatFromFN.scala 65:23]
    node _T_63 = eq(_T_4, UInt<1>("h0")) @[rawFloatFromFN.scala 66:36]
    node _T_64 = and(_T_61, _T_63) @[rawFloatFromFN.scala 66:33]
    _T_62.isNaN <= _T_64 @[rawFloatFromFN.scala 66:20]
    node _T_65 = and(_T_61, _T_4) @[rawFloatFromFN.scala 67:33]
    _T_62.isInf <= _T_65 @[rawFloatFromFN.scala 67:20]
    _T_62.isZero <= _T_59 @[rawFloatFromFN.scala 68:20]
    _T_62.sign <= _T @[rawFloatFromFN.scala 69:20]
    node _T_66 = bits(_T_58, 8, 0) @[rawFloatFromFN.scala 70:34]
    node _T_67 = cvt(_T_66) @[rawFloatFromFN.scala 70:48]
    _T_62.sExp <= _T_67 @[rawFloatFromFN.scala 70:20]
    node _T_68 = eq(_T_59, UInt<1>("h0")) @[rawFloatFromFN.scala 72:29]
    node _T_69 = mux(_T_3, _T_52, _T_2) @[rawFloatFromFN.scala 72:42]
    node _T_70 = cat(UInt<1>("h0"), _T_68) @[Cat.scala 29:58]
    node _T_71 = cat(_T_70, _T_69) @[Cat.scala 29:58]
    _T_62.sig <= _T_71 @[rawFloatFromFN.scala 71:17]
    node _T_72 = bits(_T_62.sExp, 8, 6) @[recFNFromFN.scala 48:53]
    node _T_73 = mux(_T_62.isZero, UInt<3>("h0"), _T_72) @[recFNFromFN.scala 48:16]
    node _T_74 = mux(_T_62.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
    node _T_75 = or(_T_73, _T_74) @[recFNFromFN.scala 48:79]
    node _T_76 = bits(_T_62.sExp, 5, 0) @[recFNFromFN.scala 50:23]
    node _T_77 = bits(_T_62.sig, 22, 0) @[recFNFromFN.scala 51:22]
    node _T_78 = cat(_T_76, _T_77) @[Cat.scala 29:58]
    node _T_79 = cat(_T_62.sign, _T_75) @[Cat.scala 29:58]
    node _T_80 = cat(_T_79, _T_78) @[Cat.scala 29:58]
    compareRecFN.io.a <= _T_80 @[ValExec_CompareRecFN.scala 61:23]
    node _T_81 = bits(io.b, 31, 31) @[rawFloatFromFN.scala 46:22]
    node _T_82 = bits(io.b, 30, 23) @[rawFloatFromFN.scala 47:23]
    node _T_83 = bits(io.b, 22, 0) @[rawFloatFromFN.scala 48:25]
    node _T_84 = eq(_T_82, UInt<1>("h0")) @[rawFloatFromFN.scala 50:34]
    node _T_85 = eq(_T_83, UInt<1>("h0")) @[rawFloatFromFN.scala 51:38]
    node _T_86 = bits(_T_83, 0, 0) @[primitives.scala 92:52]
    node _T_87 = bits(_T_83, 1, 1) @[primitives.scala 92:52]
    node _T_88 = bits(_T_83, 2, 2) @[primitives.scala 92:52]
    node _T_89 = bits(_T_83, 3, 3) @[primitives.scala 92:52]
    node _T_90 = bits(_T_83, 4, 4) @[primitives.scala 92:52]
    node _T_91 = bits(_T_83, 5, 5) @[primitives.scala 92:52]
    node _T_92 = bits(_T_83, 6, 6) @[primitives.scala 92:52]
    node _T_93 = bits(_T_83, 7, 7) @[primitives.scala 92:52]
    node _T_94 = bits(_T_83, 8, 8) @[primitives.scala 92:52]
    node _T_95 = bits(_T_83, 9, 9) @[primitives.scala 92:52]
    node _T_96 = bits(_T_83, 10, 10) @[primitives.scala 92:52]
    node _T_97 = bits(_T_83, 11, 11) @[primitives.scala 92:52]
    node _T_98 = bits(_T_83, 12, 12) @[primitives.scala 92:52]
    node _T_99 = bits(_T_83, 13, 13) @[primitives.scala 92:52]
    node _T_100 = bits(_T_83, 14, 14) @[primitives.scala 92:52]
    node _T_101 = bits(_T_83, 15, 15) @[primitives.scala 92:52]
    node _T_102 = bits(_T_83, 16, 16) @[primitives.scala 92:52]
    node _T_103 = bits(_T_83, 17, 17) @[primitives.scala 92:52]
    node _T_104 = bits(_T_83, 18, 18) @[primitives.scala 92:52]
    node _T_105 = bits(_T_83, 19, 19) @[primitives.scala 92:52]
    node _T_106 = bits(_T_83, 20, 20) @[primitives.scala 92:52]
    node _T_107 = bits(_T_83, 21, 21) @[primitives.scala 92:52]
    node _T_108 = bits(_T_83, 22, 22) @[primitives.scala 92:52]
    node _T_109 = mux(_T_87, UInt<5>("h15"), UInt<5>("h16")) @[Mux.scala 47:69]
    node _T_110 = mux(_T_88, UInt<5>("h14"), _T_109) @[Mux.scala 47:69]
    node _T_111 = mux(_T_89, UInt<5>("h13"), _T_110) @[Mux.scala 47:69]
    node _T_112 = mux(_T_90, UInt<5>("h12"), _T_111) @[Mux.scala 47:69]
    node _T_113 = mux(_T_91, UInt<5>("h11"), _T_112) @[Mux.scala 47:69]
    node _T_114 = mux(_T_92, UInt<5>("h10"), _T_113) @[Mux.scala 47:69]
    node _T_115 = mux(_T_93, UInt<4>("hf"), _T_114) @[Mux.scala 47:69]
    node _T_116 = mux(_T_94, UInt<4>("he"), _T_115) @[Mux.scala 47:69]
    node _T_117 = mux(_T_95, UInt<4>("hd"), _T_116) @[Mux.scala 47:69]
    node _T_118 = mux(_T_96, UInt<4>("hc"), _T_117) @[Mux.scala 47:69]
    node _T_119 = mux(_T_97, UInt<4>("hb"), _T_118) @[Mux.scala 47:69]
    node _T_120 = mux(_T_98, UInt<4>("ha"), _T_119) @[Mux.scala 47:69]
    node _T_121 = mux(_T_99, UInt<4>("h9"), _T_120) @[Mux.scala 47:69]
    node _T_122 = mux(_T_100, UInt<4>("h8"), _T_121) @[Mux.scala 47:69]
    node _T_123 = mux(_T_101, UInt<3>("h7"), _T_122) @[Mux.scala 47:69]
    node _T_124 = mux(_T_102, UInt<3>("h6"), _T_123) @[Mux.scala 47:69]
    node _T_125 = mux(_T_103, UInt<3>("h5"), _T_124) @[Mux.scala 47:69]
    node _T_126 = mux(_T_104, UInt<3>("h4"), _T_125) @[Mux.scala 47:69]
    node _T_127 = mux(_T_105, UInt<2>("h3"), _T_126) @[Mux.scala 47:69]
    node _T_128 = mux(_T_106, UInt<2>("h2"), _T_127) @[Mux.scala 47:69]
    node _T_129 = mux(_T_107, UInt<1>("h1"), _T_128) @[Mux.scala 47:69]
    node _T_130 = mux(_T_108, UInt<1>("h0"), _T_129) @[Mux.scala 47:69]
    node _T_131 = dshl(_T_83, _T_130) @[rawFloatFromFN.scala 54:36]
    node _T_132 = bits(_T_131, 21, 0) @[rawFloatFromFN.scala 54:47]
    node _T_133 = shl(_T_132, 1) @[rawFloatFromFN.scala 54:64]
    node _T_134 = xor(_T_130, UInt<9>("h1ff")) @[rawFloatFromFN.scala 57:26]
    node _T_135 = mux(_T_84, _T_134, _T_82) @[rawFloatFromFN.scala 56:16]
    node _T_136 = mux(_T_84, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 60:27]
    node _T_137 = or(UInt<8>("h80"), _T_136) @[rawFloatFromFN.scala 60:22]
    node _T_138 = add(_T_135, _T_137) @[rawFloatFromFN.scala 59:15]
    node _T_139 = tail(_T_138, 1) @[rawFloatFromFN.scala 59:15]
    node _T_140 = and(_T_84, _T_85) @[rawFloatFromFN.scala 62:34]
    node _T_141 = bits(_T_139, 8, 7) @[rawFloatFromFN.scala 63:37]
    node _T_142 = eq(_T_141, UInt<2>("h3")) @[rawFloatFromFN.scala 63:62]
    wire _T_143 : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<10>, sig : UInt<25>} @[rawFloatFromFN.scala 65:23]
    _T_143 is invalid @[rawFloatFromFN.scala 65:23]
    node _T_144 = eq(_T_85, UInt<1>("h0")) @[rawFloatFromFN.scala 66:36]
    node _T_145 = and(_T_142, _T_144) @[rawFloatFromFN.scala 66:33]
    _T_143.isNaN <= _T_145 @[rawFloatFromFN.scala 66:20]
    node _T_146 = and(_T_142, _T_85) @[rawFloatFromFN.scala 67:33]
    _T_143.isInf <= _T_146 @[rawFloatFromFN.scala 67:20]
    _T_143.isZero <= _T_140 @[rawFloatFromFN.scala 68:20]
    _T_143.sign <= _T_81 @[rawFloatFromFN.scala 69:20]
    node _T_147 = bits(_T_139, 8, 0) @[rawFloatFromFN.scala 70:34]
    node _T_148 = cvt(_T_147) @[rawFloatFromFN.scala 70:48]
    _T_143.sExp <= _T_148 @[rawFloatFromFN.scala 70:20]
    node _T_149 = eq(_T_140, UInt<1>("h0")) @[rawFloatFromFN.scala 72:29]
    node _T_150 = mux(_T_84, _T_133, _T_83) @[rawFloatFromFN.scala 72:42]
    node _T_151 = cat(UInt<1>("h0"), _T_149) @[Cat.scala 29:58]
    node _T_152 = cat(_T_151, _T_150) @[Cat.scala 29:58]
    _T_143.sig <= _T_152 @[rawFloatFromFN.scala 71:17]
    node _T_153 = bits(_T_143.sExp, 8, 6) @[recFNFromFN.scala 48:53]
    node _T_154 = mux(_T_143.isZero, UInt<3>("h0"), _T_153) @[recFNFromFN.scala 48:16]
    node _T_155 = mux(_T_143.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
    node _T_156 = or(_T_154, _T_155) @[recFNFromFN.scala 48:79]
    node _T_157 = bits(_T_143.sExp, 5, 0) @[recFNFromFN.scala 50:23]
    node _T_158 = bits(_T_143.sig, 22, 0) @[recFNFromFN.scala 51:22]
    node _T_159 = cat(_T_157, _T_158) @[Cat.scala 29:58]
    node _T_160 = cat(_T_143.sign, _T_156) @[Cat.scala 29:58]
    node _T_161 = cat(_T_160, _T_159) @[Cat.scala 29:58]
    compareRecFN.io.b <= _T_161 @[ValExec_CompareRecFN.scala 62:23]
    compareRecFN.io.signaling <= UInt<1>("h1") @[ValExec_CompareRecFN.scala 63:31]
    io.actual.out <= compareRecFN.io.lt @[ValExec_CompareRecFN.scala 65:19]
    io.actual.exceptionFlags <= compareRecFN.io.exceptionFlags @[ValExec_CompareRecFN.scala 66:30]
    io.check <= UInt<1>("h1") @[ValExec_CompareRecFN.scala 68:14]
    node _T_162 = eq(io.actual.out, io.expected.out) @[ValExec_CompareRecFN.scala 70:24]
    node _T_163 = eq(io.actual.exceptionFlags, io.expected.exceptionFlags) @[ValExec_CompareRecFN.scala 71:35]
    node _T_164 = and(_T_162, _T_163) @[ValExec_CompareRecFN.scala 70:45]
    io.pass <= _T_164 @[ValExec_CompareRecFN.scala 69:13]
