circuit ValExec_DivSqrtRecFN_small_div :
  module DivSqrtRawFN_small :
    input clock : Clock
    input reset : Reset
    output io : { inReady : UInt<1>, flip inValid : UInt<1>, flip sqrtOp : UInt<1>, flip a : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<7>, sig : UInt<12>}, flip b : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<7>, sig : UInt<12>}, flip roundingMode : UInt<3>, rawOutValid_div : UInt<1>, rawOutValid_sqrt : UInt<1>, roundingModeOut : UInt<3>, invalidExc : UInt<1>, infiniteExc : UInt<1>, rawOut : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<7>, sig : UInt<14>}}
  
    reg cycleNum : UInt<14>, clock with :
      reset => (reset, UInt<14>("h1")) @[DivSqrtRecFN_small.scala 223:33]
    reg sqrtOp_Z : UInt<1>, clock with :
      reset => (UInt<1>("h0"), sqrtOp_Z) @[DivSqrtRecFN_small.scala 225:29]
    reg majorExc_Z : UInt<1>, clock with :
      reset => (UInt<1>("h0"), majorExc_Z) @[DivSqrtRecFN_small.scala 226:29]
    reg isNaN_Z : UInt<1>, clock with :
      reset => (UInt<1>("h0"), isNaN_Z) @[DivSqrtRecFN_small.scala 228:29]
    reg isInf_Z : UInt<1>, clock with :
      reset => (UInt<1>("h0"), isInf_Z) @[DivSqrtRecFN_small.scala 229:29]
    reg isZero_Z : UInt<1>, clock with :
      reset => (UInt<1>("h0"), isZero_Z) @[DivSqrtRecFN_small.scala 230:29]
    reg sign_Z : UInt<1>, clock with :
      reset => (UInt<1>("h0"), sign_Z) @[DivSqrtRecFN_small.scala 231:29]
    reg sExp_Z : SInt<7>, clock with :
      reset => (UInt<1>("h0"), sExp_Z) @[DivSqrtRecFN_small.scala 232:29]
    reg fractB_Z : UInt<10>, clock with :
      reset => (UInt<1>("h0"), fractB_Z) @[DivSqrtRecFN_small.scala 233:29]
    reg roundingMode_Z : UInt<3>, clock with :
      reset => (UInt<1>("h0"), roundingMode_Z) @[DivSqrtRecFN_small.scala 234:29]
    reg rem_Z : UInt<13>, clock with :
      reset => (UInt<1>("h0"), rem_Z) @[DivSqrtRecFN_small.scala 240:29]
    reg notZeroRem_Z : UInt<1>, clock with :
      reset => (UInt<1>("h0"), notZeroRem_Z) @[DivSqrtRecFN_small.scala 241:29]
    reg sigX_Z : UInt<13>, clock with :
      reset => (UInt<1>("h0"), sigX_Z) @[DivSqrtRecFN_small.scala 242:29]
    node _T = and(io.a.isZero, io.b.isZero) @[DivSqrtRecFN_small.scala 251:24]
    node _T_1 = and(io.a.isInf, io.b.isInf) @[DivSqrtRecFN_small.scala 251:59]
    node notSigNaNIn_invalidExc_S_div = or(_T, _T_1) @[DivSqrtRecFN_small.scala 251:42]
    node _T_2 = eq(io.a.isNaN, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 253:9]
    node _T_3 = eq(io.a.isZero, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 253:27]
    node _T_4 = and(_T_2, _T_3) @[DivSqrtRecFN_small.scala 253:24]
    node notSigNaNIn_invalidExc_S_sqrt = and(_T_4, io.a.sign) @[DivSqrtRecFN_small.scala 253:43]
    node _T_5 = bits(io.a.sig, 9, 9) @[common.scala 81:56]
    node _T_6 = eq(_T_5, UInt<1>("h0")) @[common.scala 81:49]
    node _T_7 = and(io.a.isNaN, _T_6) @[common.scala 81:46]
    node _T_8 = or(_T_7, notSigNaNIn_invalidExc_S_sqrt) @[DivSqrtRecFN_small.scala 256:38]
    node _T_9 = bits(io.a.sig, 9, 9) @[common.scala 81:56]
    node _T_10 = eq(_T_9, UInt<1>("h0")) @[common.scala 81:49]
    node _T_11 = and(io.a.isNaN, _T_10) @[common.scala 81:46]
    node _T_12 = bits(io.b.sig, 9, 9) @[common.scala 81:56]
    node _T_13 = eq(_T_12, UInt<1>("h0")) @[common.scala 81:49]
    node _T_14 = and(io.b.isNaN, _T_13) @[common.scala 81:46]
    node _T_15 = or(_T_11, _T_14) @[DivSqrtRecFN_small.scala 257:38]
    node _T_16 = or(_T_15, notSigNaNIn_invalidExc_S_div) @[DivSqrtRecFN_small.scala 257:66]
    node _T_17 = eq(io.a.isNaN, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 259:18]
    node _T_18 = eq(io.a.isInf, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 259:36]
    node _T_19 = and(_T_17, _T_18) @[DivSqrtRecFN_small.scala 259:33]
    node _T_20 = and(_T_19, io.b.isZero) @[DivSqrtRecFN_small.scala 259:51]
    node _T_21 = or(_T_16, _T_20) @[DivSqrtRecFN_small.scala 258:46]
    node majorExc_S = mux(io.sqrtOp, _T_8, _T_21) @[DivSqrtRecFN_small.scala 255:12]
    node _T_22 = or(io.a.isNaN, notSigNaNIn_invalidExc_S_sqrt) @[DivSqrtRecFN_small.scala 263:26]
    node _T_23 = or(io.a.isNaN, io.b.isNaN) @[DivSqrtRecFN_small.scala 264:26]
    node _T_24 = or(_T_23, notSigNaNIn_invalidExc_S_div) @[DivSqrtRecFN_small.scala 264:42]
    node isNaN_S = mux(io.sqrtOp, _T_22, _T_24) @[DivSqrtRecFN_small.scala 262:12]
    node _T_25 = or(io.a.isInf, io.b.isZero) @[DivSqrtRecFN_small.scala 266:63]
    node isInf_S = mux(io.sqrtOp, io.a.isInf, _T_25) @[DivSqrtRecFN_small.scala 266:23]
    node _T_26 = or(io.a.isZero, io.b.isInf) @[DivSqrtRecFN_small.scala 267:64]
    node isZero_S = mux(io.sqrtOp, io.a.isZero, _T_26) @[DivSqrtRecFN_small.scala 267:23]
    node _T_27 = eq(io.sqrtOp, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 268:33]
    node _T_28 = and(_T_27, io.b.sign) @[DivSqrtRecFN_small.scala 268:45]
    node sign_S = xor(io.a.sign, _T_28) @[DivSqrtRecFN_small.scala 268:30]
    node _T_29 = or(io.a.isNaN, io.a.isInf) @[DivSqrtRecFN_small.scala 270:39]
    node specialCaseA_S = or(_T_29, io.a.isZero) @[DivSqrtRecFN_small.scala 270:55]
    node _T_30 = or(io.b.isNaN, io.b.isInf) @[DivSqrtRecFN_small.scala 271:39]
    node specialCaseB_S = or(_T_30, io.b.isZero) @[DivSqrtRecFN_small.scala 271:55]
    node _T_31 = eq(specialCaseA_S, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 272:28]
    node _T_32 = eq(specialCaseB_S, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 272:48]
    node normalCase_S_div = and(_T_31, _T_32) @[DivSqrtRecFN_small.scala 272:45]
    node _T_33 = eq(specialCaseA_S, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 273:29]
    node _T_34 = eq(io.a.sign, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 273:49]
    node normalCase_S_sqrt = and(_T_33, _T_34) @[DivSqrtRecFN_small.scala 273:46]
    node normalCase_S = mux(io.sqrtOp, normalCase_S_sqrt, normalCase_S_div) @[DivSqrtRecFN_small.scala 274:27]
    node _T_35 = bits(io.b.sExp, 5, 5) @[DivSqrtRecFN_small.scala 278:28]
    node _T_36 = bits(io.b.sExp, 4, 0) @[DivSqrtRecFN_small.scala 278:52]
    node _T_37 = not(_T_36) @[DivSqrtRecFN_small.scala 278:40]
    node _T_38 = cat(_T_35, _T_37) @[Cat.scala 29:58]
    node _T_39 = asSInt(_T_38) @[DivSqrtRecFN_small.scala 278:71]
    node sExpQuot_S_div = add(io.a.sExp, _T_39) @[DivSqrtRecFN_small.scala 277:21]
    node _T_40 = leq(asSInt(UInt<7>("h38")), sExpQuot_S_div) @[DivSqrtRecFN_small.scala 281:48]
    node _T_41 = bits(sExpQuot_S_div, 6, 3) @[DivSqrtRecFN_small.scala 283:31]
    node _T_42 = mux(_T_40, UInt<3>("h6"), _T_41) @[DivSqrtRecFN_small.scala 281:16]
    node _T_43 = bits(sExpQuot_S_div, 2, 0) @[DivSqrtRecFN_small.scala 285:27]
    node _T_44 = cat(_T_42, _T_43) @[Cat.scala 29:58]
    node sSatExpQuot_S_div = asSInt(_T_44) @[DivSqrtRecFN_small.scala 286:11]
    node _T_45 = bits(io.a.sExp, 0, 0) @[DivSqrtRecFN_small.scala 288:48]
    node _T_46 = eq(_T_45, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 288:35]
    node evenSqrt_S = and(io.sqrtOp, _T_46) @[DivSqrtRecFN_small.scala 288:32]
    node _T_47 = bits(io.a.sExp, 0, 0) @[DivSqrtRecFN_small.scala 289:48]
    node oddSqrt_S = and(io.sqrtOp, _T_47) @[DivSqrtRecFN_small.scala 289:32]
    node idle = bits(cycleNum, 0, 0) @[DivSqrtRecFN_small.scala 293:24]
    node _T_48 = bits(cycleNum, 1, 1) @[DivSqrtRecFN_small.scala 294:35]
    node inReady = or(idle, _T_48) @[DivSqrtRecFN_small.scala 294:24]
    node entering = and(inReady, io.inValid) @[DivSqrtRecFN_small.scala 295:28]
    node entering_normalCase = and(entering, normalCase_S) @[DivSqrtRecFN_small.scala 296:40]
    node _T_49 = bits(cycleNum, 3, 3) @[DivSqrtRecFN_small.scala 298:30]
    node _T_50 = bits(sigX_Z, 12, 12) @[DivSqrtRecFN_small.scala 298:43]
    node skipCycle2 = and(_T_49, _T_50) @[DivSqrtRecFN_small.scala 298:34]
    node _T_51 = eq(idle, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 300:11]
    node _T_52 = or(_T_51, entering) @[DivSqrtRecFN_small.scala 300:18]
    when _T_52 : @[DivSqrtRecFN_small.scala 300:31]
      node _T_53 = eq(normalCase_S, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 302:28]
      node _T_54 = and(entering, _T_53) @[DivSqrtRecFN_small.scala 302:26]
      node _T_55 = mux(_T_54, UInt<2>("h2"), UInt<1>("h0")) @[DivSqrtRecFN_small.scala 302:16]
      node _T_56 = bits(io.a.sExp, 0, 0) @[DivSqrtRecFN_small.scala 305:36]
      node _T_57 = mux(_T_56, UInt<12>("h800"), UInt<13>("h1000")) @[DivSqrtRecFN_small.scala 305:24]
      node _T_58 = mux(io.sqrtOp, _T_57, UInt<14>("h2000")) @[DivSqrtRecFN_small.scala 304:20]
      node _T_59 = mux(entering_normalCase, _T_58, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 303:16]
      node _T_60 = or(_T_55, _T_59) @[DivSqrtRecFN_small.scala 302:59]
      node _T_61 = eq(entering, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 310:17]
      node _T_62 = eq(skipCycle2, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 310:31]
      node _T_63 = and(_T_61, _T_62) @[DivSqrtRecFN_small.scala 310:28]
      node _T_64 = shr(cycleNum, 1) @[DivSqrtRecFN_small.scala 310:53]
      node _T_65 = mux(_T_63, _T_64, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 310:16]
      node _T_66 = or(_T_60, _T_65) @[DivSqrtRecFN_small.scala 309:15]
      node _T_67 = mux(skipCycle2, UInt<2>("h2"), UInt<1>("h0")) @[DivSqrtRecFN_small.scala 311:16]
      node _T_68 = or(_T_66, _T_67) @[DivSqrtRecFN_small.scala 310:63]
      cycleNum <= _T_68 @[DivSqrtRecFN_small.scala 301:18]
    io.inReady <= inReady @[DivSqrtRecFN_small.scala 314:16]
    when entering : @[DivSqrtRecFN_small.scala 318:21]
      sqrtOp_Z <= io.sqrtOp @[DivSqrtRecFN_small.scala 319:20]
      majorExc_Z <= majorExc_S @[DivSqrtRecFN_small.scala 320:20]
      isNaN_Z <= isNaN_S @[DivSqrtRecFN_small.scala 321:20]
      isInf_Z <= isInf_S @[DivSqrtRecFN_small.scala 322:20]
      isZero_Z <= isZero_S @[DivSqrtRecFN_small.scala 323:20]
      sign_Z <= sign_S @[DivSqrtRecFN_small.scala 324:20]
      node _T_69 = shr(io.a.sExp, 1) @[DivSqrtRecFN_small.scala 327:29]
      node _T_70 = add(_T_69, asSInt(UInt<6>("h10"))) @[DivSqrtRecFN_small.scala 327:34]
      node _T_71 = mux(io.sqrtOp, _T_70, sSatExpQuot_S_div) @[DivSqrtRecFN_small.scala 326:16]
      sExp_Z <= _T_71 @[DivSqrtRecFN_small.scala 325:16]
      roundingMode_Z <= io.roundingMode @[DivSqrtRecFN_small.scala 330:24]
    node _T_72 = eq(io.sqrtOp, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 332:34]
    node _T_73 = and(entering_normalCase, _T_72) @[DivSqrtRecFN_small.scala 332:31]
    when _T_73 : @[DivSqrtRecFN_small.scala 332:47]
      node _T_74 = bits(io.b.sig, 9, 0) @[DivSqrtRecFN_small.scala 333:31]
      fractB_Z <= _T_74 @[DivSqrtRecFN_small.scala 333:18]
    node _T_75 = eq(oddSqrt_S, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 339:24]
    node _T_76 = and(inReady, _T_75) @[DivSqrtRecFN_small.scala 339:21]
    node _T_77 = shl(io.a.sig, 1) @[DivSqrtRecFN_small.scala 339:47]
    node _T_78 = mux(_T_76, _T_77, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 339:12]
    node _T_79 = and(inReady, oddSqrt_S) @[DivSqrtRecFN_small.scala 340:21]
    node _T_80 = bits(io.a.sig, 10, 9) @[DivSqrtRecFN_small.scala 341:27]
    node _T_81 = sub(_T_80, UInt<1>("h1")) @[DivSqrtRecFN_small.scala 341:56]
    node _T_82 = tail(_T_81, 1) @[DivSqrtRecFN_small.scala 341:56]
    node _T_83 = bits(io.a.sig, 8, 0) @[DivSqrtRecFN_small.scala 342:27]
    node _T_84 = shl(_T_83, 3) @[DivSqrtRecFN_small.scala 342:44]
    node _T_85 = cat(_T_82, _T_84) @[Cat.scala 29:58]
    node _T_86 = mux(_T_79, _T_85, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 340:12]
    node _T_87 = or(_T_78, _T_86) @[DivSqrtRecFN_small.scala 339:57]
    node _T_88 = eq(inReady, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 346:13]
    node _T_89 = shl(rem_Z, 1) @[DivSqrtRecFN_small.scala 346:29]
    node _T_90 = mux(_T_88, _T_89, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 346:12]
    node rem = or(_T_87, _T_90) @[DivSqrtRecFN_small.scala 345:11]
    node bitMask = shr(cycleNum, 2) @[DivSqrtRecFN_small.scala 347:27]
    node _T_91 = eq(io.sqrtOp, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 349:24]
    node _T_92 = and(inReady, _T_91) @[DivSqrtRecFN_small.scala 349:21]
    node _T_93 = shl(io.b.sig, 1) @[DivSqrtRecFN_small.scala 349:47]
    node _T_94 = mux(_T_92, _T_93, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 349:12]
    node _T_95 = and(inReady, evenSqrt_S) @[DivSqrtRecFN_small.scala 350:21]
    node _T_96 = mux(_T_95, UInt<12>("h800"), UInt<1>("h0")) @[DivSqrtRecFN_small.scala 350:12]
    node _T_97 = or(_T_94, _T_96) @[DivSqrtRecFN_small.scala 349:73]
    node _T_98 = and(inReady, oddSqrt_S) @[DivSqrtRecFN_small.scala 351:21]
    node _T_99 = mux(_T_98, UInt<13>("h1400"), UInt<1>("h0")) @[DivSqrtRecFN_small.scala 351:12]
    node _T_100 = or(_T_97, _T_99) @[DivSqrtRecFN_small.scala 350:73]
    node _T_101 = eq(inReady, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 352:13]
    node _T_102 = eq(sqrtOp_Z, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 352:26]
    node _T_103 = and(_T_101, _T_102) @[DivSqrtRecFN_small.scala 352:23]
    node _T_104 = cat(UInt<1>("h1"), fractB_Z) @[Cat.scala 29:58]
    node _T_105 = shl(_T_104, 1) @[DivSqrtRecFN_small.scala 352:56]
    node _T_106 = mux(_T_103, _T_105, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 352:12]
    node _T_107 = or(_T_100, _T_106) @[DivSqrtRecFN_small.scala 351:73]
    node _T_108 = eq(inReady, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 353:13]
    node _T_109 = and(_T_108, sqrtOp_Z) @[DivSqrtRecFN_small.scala 353:23]
    node _T_110 = shl(sigX_Z, 1) @[DivSqrtRecFN_small.scala 353:44]
    node _T_111 = or(_T_110, bitMask) @[DivSqrtRecFN_small.scala 353:48]
    node _T_112 = mux(_T_109, _T_111, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 353:12]
    node trialTerm = or(_T_107, _T_112) @[DivSqrtRecFN_small.scala 352:73]
    node _T_113 = cvt(rem) @[DivSqrtRecFN_small.scala 354:24]
    node _T_114 = cvt(trialTerm) @[DivSqrtRecFN_small.scala 354:41]
    node _T_115 = sub(_T_113, _T_114) @[DivSqrtRecFN_small.scala 354:29]
    node _T_116 = tail(_T_115, 1) @[DivSqrtRecFN_small.scala 354:29]
    node trialRem = asSInt(_T_116) @[DivSqrtRecFN_small.scala 354:29]
    node newBit = leq(asSInt(UInt<1>("h0")), trialRem) @[DivSqrtRecFN_small.scala 355:23]
    node _T_117 = bits(cycleNum, 2, 2) @[DivSqrtRecFN_small.scala 357:41]
    node _T_118 = or(idle, _T_117) @[DivSqrtRecFN_small.scala 357:30]
    node _T_119 = eq(_T_118, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 357:23]
    node _T_120 = or(entering, _T_119) @[DivSqrtRecFN_small.scala 357:20]
    when _T_120 : @[DivSqrtRecFN_small.scala 357:47]
      node _T_121 = asUInt(trialRem) @[DivSqrtRecFN_small.scala 358:39]
      node _T_122 = mux(newBit, _T_121, rem) @[DivSqrtRecFN_small.scala 358:21]
      rem_Z <= _T_122 @[DivSqrtRecFN_small.scala 358:15]
    node _T_123 = eq(inReady, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 360:24]
    node _T_124 = and(_T_123, newBit) @[DivSqrtRecFN_small.scala 360:34]
    node _T_125 = or(entering, _T_124) @[DivSqrtRecFN_small.scala 360:20]
    when _T_125 : @[DivSqrtRecFN_small.scala 360:46]
      node _T_126 = neq(trialRem, asSInt(UInt<1>("h0"))) @[DivSqrtRecFN_small.scala 361:35]
      notZeroRem_Z <= _T_126 @[DivSqrtRecFN_small.scala 361:22]
      node _T_127 = eq(io.sqrtOp, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 363:28]
      node _T_128 = and(inReady, _T_127) @[DivSqrtRecFN_small.scala 363:25]
      node _T_129 = shl(newBit, 12) @[DivSqrtRecFN_small.scala 363:47]
      node _T_130 = mux(_T_128, _T_129, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 363:16]
      node _T_131 = and(inReady, io.sqrtOp) @[DivSqrtRecFN_small.scala 364:25]
      node _T_132 = mux(_T_131, UInt<12>("h800"), UInt<1>("h0")) @[DivSqrtRecFN_small.scala 364:16]
      node _T_133 = or(_T_130, _T_132) @[DivSqrtRecFN_small.scala 363:71]
      node _T_134 = and(inReady, oddSqrt_S) @[DivSqrtRecFN_small.scala 365:25]
      node _T_135 = shl(newBit, 10) @[DivSqrtRecFN_small.scala 365:47]
      node _T_136 = mux(_T_134, _T_135, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 365:16]
      node _T_137 = or(_T_133, _T_136) @[DivSqrtRecFN_small.scala 364:71]
      node _T_138 = eq(inReady, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 366:17]
      node _T_139 = or(sigX_Z, bitMask) @[DivSqrtRecFN_small.scala 366:48]
      node _T_140 = mux(_T_138, _T_139, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 366:16]
      node _T_141 = or(_T_137, _T_140) @[DivSqrtRecFN_small.scala 365:71]
      sigX_Z <= _T_141 @[DivSqrtRecFN_small.scala 362:16]
    node rawOutValid = bits(cycleNum, 1, 1) @[DivSqrtRecFN_small.scala 371:31]
    node _T_142 = eq(sqrtOp_Z, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 373:43]
    node _T_143 = and(rawOutValid, _T_142) @[DivSqrtRecFN_small.scala 373:40]
    io.rawOutValid_div <= _T_143 @[DivSqrtRecFN_small.scala 373:25]
    node _T_144 = and(rawOutValid, sqrtOp_Z) @[DivSqrtRecFN_small.scala 374:40]
    io.rawOutValid_sqrt <= _T_144 @[DivSqrtRecFN_small.scala 374:25]
    io.roundingModeOut <= roundingMode_Z @[DivSqrtRecFN_small.scala 375:25]
    node _T_145 = and(majorExc_Z, isNaN_Z) @[DivSqrtRecFN_small.scala 376:36]
    io.invalidExc <= _T_145 @[DivSqrtRecFN_small.scala 376:22]
    node _T_146 = eq(isNaN_Z, UInt<1>("h0")) @[DivSqrtRecFN_small.scala 377:39]
    node _T_147 = and(majorExc_Z, _T_146) @[DivSqrtRecFN_small.scala 377:36]
    io.infiniteExc <= _T_147 @[DivSqrtRecFN_small.scala 377:22]
    io.rawOut.isNaN <= isNaN_Z @[DivSqrtRecFN_small.scala 378:22]
    io.rawOut.isInf <= isInf_Z @[DivSqrtRecFN_small.scala 379:22]
    io.rawOut.isZero <= isZero_Z @[DivSqrtRecFN_small.scala 380:22]
    io.rawOut.sign <= sign_Z @[DivSqrtRecFN_small.scala 381:22]
    io.rawOut.sExp <= sExp_Z @[DivSqrtRecFN_small.scala 382:22]
    node _T_148 = shl(sigX_Z, 1) @[DivSqrtRecFN_small.scala 383:31]
    node _T_149 = or(_T_148, notZeroRem_Z) @[DivSqrtRecFN_small.scala 383:35]
    io.rawOut.sig <= _T_149 @[DivSqrtRecFN_small.scala 383:22]

  module DivSqrtRecFNToRaw_small :
    input clock : Clock
    input reset : Reset
    output io : { inReady : UInt<1>, flip inValid : UInt<1>, flip sqrtOp : UInt<1>, flip a : UInt<17>, flip b : UInt<17>, flip roundingMode : UInt<3>, rawOutValid_div : UInt<1>, rawOutValid_sqrt : UInt<1>, roundingModeOut : UInt<3>, invalidExc : UInt<1>, infiniteExc : UInt<1>, rawOut : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<7>, sig : UInt<14>}}
  
    inst divSqrtRawFN of DivSqrtRawFN_small @[DivSqrtRecFN_small.scala 414:15]
    divSqrtRawFN.clock <= clock
    divSqrtRawFN.reset <= reset
    io.inReady <= divSqrtRawFN.io.inReady @[DivSqrtRecFN_small.scala 416:16]
    divSqrtRawFN.io.inValid <= io.inValid @[DivSqrtRecFN_small.scala 417:34]
    divSqrtRawFN.io.sqrtOp <= io.sqrtOp @[DivSqrtRecFN_small.scala 418:34]
    node _T = bits(io.a, 15, 10) @[rawFloatFromRecFN.scala 50:21]
    node _T_1 = bits(_T, 5, 3) @[rawFloatFromRecFN.scala 51:29]
    node _T_2 = eq(_T_1, UInt<1>("h0")) @[rawFloatFromRecFN.scala 51:54]
    node _T_3 = bits(_T, 5, 4) @[rawFloatFromRecFN.scala 52:29]
    node _T_4 = eq(_T_3, UInt<2>("h3")) @[rawFloatFromRecFN.scala 52:54]
    wire _T_5 : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<7>, sig : UInt<12>} @[rawFloatFromRecFN.scala 54:23]
    _T_5 is invalid @[rawFloatFromRecFN.scala 54:23]
    node _T_6 = bits(_T, 3, 3) @[rawFloatFromRecFN.scala 55:41]
    node _T_7 = and(_T_4, _T_6) @[rawFloatFromRecFN.scala 55:33]
    _T_5.isNaN <= _T_7 @[rawFloatFromRecFN.scala 55:20]
    node _T_8 = bits(_T, 3, 3) @[rawFloatFromRecFN.scala 56:41]
    node _T_9 = eq(_T_8, UInt<1>("h0")) @[rawFloatFromRecFN.scala 56:36]
    node _T_10 = and(_T_4, _T_9) @[rawFloatFromRecFN.scala 56:33]
    _T_5.isInf <= _T_10 @[rawFloatFromRecFN.scala 56:20]
    _T_5.isZero <= _T_2 @[rawFloatFromRecFN.scala 57:20]
    node _T_11 = bits(io.a, 16, 16) @[rawFloatFromRecFN.scala 58:25]
    _T_5.sign <= _T_11 @[rawFloatFromRecFN.scala 58:20]
    node _T_12 = cvt(_T) @[rawFloatFromRecFN.scala 59:27]
    _T_5.sExp <= _T_12 @[rawFloatFromRecFN.scala 59:20]
    node _T_13 = eq(_T_2, UInt<1>("h0")) @[rawFloatFromRecFN.scala 60:39]
    node _T_14 = bits(io.a, 9, 0) @[rawFloatFromRecFN.scala 60:51]
    node _T_15 = cat(UInt<1>("h0"), _T_13) @[Cat.scala 29:58]
    node _T_16 = cat(_T_15, _T_14) @[Cat.scala 29:58]
    _T_5.sig <= _T_16 @[rawFloatFromRecFN.scala 60:20]
    divSqrtRawFN.io.a.sig <= _T_5.sig @[DivSqrtRecFN_small.scala 419:34]
    divSqrtRawFN.io.a.sExp <= _T_5.sExp @[DivSqrtRecFN_small.scala 419:34]
    divSqrtRawFN.io.a.sign <= _T_5.sign @[DivSqrtRecFN_small.scala 419:34]
    divSqrtRawFN.io.a.isZero <= _T_5.isZero @[DivSqrtRecFN_small.scala 419:34]
    divSqrtRawFN.io.a.isInf <= _T_5.isInf @[DivSqrtRecFN_small.scala 419:34]
    divSqrtRawFN.io.a.isNaN <= _T_5.isNaN @[DivSqrtRecFN_small.scala 419:34]
    node _T_17 = bits(io.b, 15, 10) @[rawFloatFromRecFN.scala 50:21]
    node _T_18 = bits(_T_17, 5, 3) @[rawFloatFromRecFN.scala 51:29]
    node _T_19 = eq(_T_18, UInt<1>("h0")) @[rawFloatFromRecFN.scala 51:54]
    node _T_20 = bits(_T_17, 5, 4) @[rawFloatFromRecFN.scala 52:29]
    node _T_21 = eq(_T_20, UInt<2>("h3")) @[rawFloatFromRecFN.scala 52:54]
    wire _T_22 : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<7>, sig : UInt<12>} @[rawFloatFromRecFN.scala 54:23]
    _T_22 is invalid @[rawFloatFromRecFN.scala 54:23]
    node _T_23 = bits(_T_17, 3, 3) @[rawFloatFromRecFN.scala 55:41]
    node _T_24 = and(_T_21, _T_23) @[rawFloatFromRecFN.scala 55:33]
    _T_22.isNaN <= _T_24 @[rawFloatFromRecFN.scala 55:20]
    node _T_25 = bits(_T_17, 3, 3) @[rawFloatFromRecFN.scala 56:41]
    node _T_26 = eq(_T_25, UInt<1>("h0")) @[rawFloatFromRecFN.scala 56:36]
    node _T_27 = and(_T_21, _T_26) @[rawFloatFromRecFN.scala 56:33]
    _T_22.isInf <= _T_27 @[rawFloatFromRecFN.scala 56:20]
    _T_22.isZero <= _T_19 @[rawFloatFromRecFN.scala 57:20]
    node _T_28 = bits(io.b, 16, 16) @[rawFloatFromRecFN.scala 58:25]
    _T_22.sign <= _T_28 @[rawFloatFromRecFN.scala 58:20]
    node _T_29 = cvt(_T_17) @[rawFloatFromRecFN.scala 59:27]
    _T_22.sExp <= _T_29 @[rawFloatFromRecFN.scala 59:20]
    node _T_30 = eq(_T_19, UInt<1>("h0")) @[rawFloatFromRecFN.scala 60:39]
    node _T_31 = bits(io.b, 9, 0) @[rawFloatFromRecFN.scala 60:51]
    node _T_32 = cat(UInt<1>("h0"), _T_30) @[Cat.scala 29:58]
    node _T_33 = cat(_T_32, _T_31) @[Cat.scala 29:58]
    _T_22.sig <= _T_33 @[rawFloatFromRecFN.scala 60:20]
    divSqrtRawFN.io.b.sig <= _T_22.sig @[DivSqrtRecFN_small.scala 420:34]
    divSqrtRawFN.io.b.sExp <= _T_22.sExp @[DivSqrtRecFN_small.scala 420:34]
    divSqrtRawFN.io.b.sign <= _T_22.sign @[DivSqrtRecFN_small.scala 420:34]
    divSqrtRawFN.io.b.isZero <= _T_22.isZero @[DivSqrtRecFN_small.scala 420:34]
    divSqrtRawFN.io.b.isInf <= _T_22.isInf @[DivSqrtRecFN_small.scala 420:34]
    divSqrtRawFN.io.b.isNaN <= _T_22.isNaN @[DivSqrtRecFN_small.scala 420:34]
    divSqrtRawFN.io.roundingMode <= io.roundingMode @[DivSqrtRecFN_small.scala 421:34]
    io.rawOutValid_div <= divSqrtRawFN.io.rawOutValid_div @[DivSqrtRecFN_small.scala 423:25]
    io.rawOutValid_sqrt <= divSqrtRawFN.io.rawOutValid_sqrt @[DivSqrtRecFN_small.scala 424:25]
    io.roundingModeOut <= divSqrtRawFN.io.roundingModeOut @[DivSqrtRecFN_small.scala 425:25]
    io.invalidExc <= divSqrtRawFN.io.invalidExc @[DivSqrtRecFN_small.scala 426:25]
    io.infiniteExc <= divSqrtRawFN.io.infiniteExc @[DivSqrtRecFN_small.scala 427:25]
    io.rawOut.sig <= divSqrtRawFN.io.rawOut.sig @[DivSqrtRecFN_small.scala 428:25]
    io.rawOut.sExp <= divSqrtRawFN.io.rawOut.sExp @[DivSqrtRecFN_small.scala 428:25]
    io.rawOut.sign <= divSqrtRawFN.io.rawOut.sign @[DivSqrtRecFN_small.scala 428:25]
    io.rawOut.isZero <= divSqrtRawFN.io.rawOut.isZero @[DivSqrtRecFN_small.scala 428:25]
    io.rawOut.isInf <= divSqrtRawFN.io.rawOut.isInf @[DivSqrtRecFN_small.scala 428:25]
    io.rawOut.isNaN <= divSqrtRawFN.io.rawOut.isNaN @[DivSqrtRecFN_small.scala 428:25]

  module RoundAnyRawFNToRecFN :
    output io : { flip invalidExc : UInt<1>, flip infiniteExc : UInt<1>, flip in : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<7>, sig : UInt<14>}, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<17>, exceptionFlags : UInt<5>}
  
    io is invalid
    node roundingMode_near_even = eq(io.roundingMode, UInt<3>("h0")) @[RoundAnyRawFNToRecFN.scala 88:53]
    node roundingMode_minMag = eq(io.roundingMode, UInt<3>("h1")) @[RoundAnyRawFNToRecFN.scala 89:53]
    node roundingMode_min = eq(io.roundingMode, UInt<3>("h2")) @[RoundAnyRawFNToRecFN.scala 90:53]
    node roundingMode_max = eq(io.roundingMode, UInt<3>("h3")) @[RoundAnyRawFNToRecFN.scala 91:53]
    node roundingMode_near_maxMag = eq(io.roundingMode, UInt<3>("h4")) @[RoundAnyRawFNToRecFN.scala 92:53]
    node roundingMode_odd = eq(io.roundingMode, UInt<3>("h6")) @[RoundAnyRawFNToRecFN.scala 93:53]
    node _T = and(roundingMode_min, io.in.sign) @[RoundAnyRawFNToRecFN.scala 96:27]
    node _T_1 = eq(io.in.sign, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 96:66]
    node _T_2 = and(roundingMode_max, _T_1) @[RoundAnyRawFNToRecFN.scala 96:63]
    node roundMagUp = or(_T, _T_2) @[RoundAnyRawFNToRecFN.scala 96:42]
    node adjustedSig = shl(io.in.sig, 0) @[RoundAnyRawFNToRecFN.scala 112:22]
    node doShiftSigDown1 = bits(adjustedSig, 13, 13) @[RoundAnyRawFNToRecFN.scala 118:61]
    wire common_expOut : UInt<6> @[RoundAnyRawFNToRecFN.scala 120:31]
    common_expOut is invalid @[RoundAnyRawFNToRecFN.scala 120:31]
    wire common_fractOut : UInt<10> @[RoundAnyRawFNToRecFN.scala 121:31]
    common_fractOut is invalid @[RoundAnyRawFNToRecFN.scala 121:31]
    wire common_overflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 122:37]
    common_overflow is invalid @[RoundAnyRawFNToRecFN.scala 122:37]
    wire common_totalUnderflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 123:37]
    common_totalUnderflow is invalid @[RoundAnyRawFNToRecFN.scala 123:37]
    wire common_underflow : UInt<1> @[RoundAnyRawFNToRecFN.scala 124:37]
    common_underflow is invalid @[RoundAnyRawFNToRecFN.scala 124:37]
    wire common_inexact : UInt<1> @[RoundAnyRawFNToRecFN.scala 125:37]
    common_inexact is invalid @[RoundAnyRawFNToRecFN.scala 125:37]
    node _T_3 = bits(io.in.sExp, 5, 0) @[RoundAnyRawFNToRecFN.scala 154:37]
    node _T_4 = not(_T_3) @[primitives.scala 51:21]
    node _T_5 = dshr(asSInt(UInt<65>("h10000000000000000")), _T_4) @[primitives.scala 77:58]
    node _T_6 = bits(_T_5, 18, 7) @[primitives.scala 79:22]
    node _T_7 = bits(_T_6, 7, 0) @[Bitwise.scala 109:18]
    node _T_8 = shl(UInt<4>("hf"), 4) @[Bitwise.scala 102:47]
    node _T_9 = xor(UInt<8>("hff"), _T_8) @[Bitwise.scala 102:21]
    node _T_10 = shr(_T_7, 4) @[Bitwise.scala 103:21]
    node _T_11 = and(_T_10, _T_9) @[Bitwise.scala 103:31]
    node _T_12 = bits(_T_7, 3, 0) @[Bitwise.scala 103:46]
    node _T_13 = shl(_T_12, 4) @[Bitwise.scala 103:65]
    node _T_14 = not(_T_9) @[Bitwise.scala 103:77]
    node _T_15 = and(_T_13, _T_14) @[Bitwise.scala 103:75]
    node _T_16 = or(_T_11, _T_15) @[Bitwise.scala 103:39]
    node _T_17 = bits(_T_9, 5, 0) @[Bitwise.scala 102:28]
    node _T_18 = shl(_T_17, 2) @[Bitwise.scala 102:47]
    node _T_19 = xor(_T_9, _T_18) @[Bitwise.scala 102:21]
    node _T_20 = shr(_T_16, 2) @[Bitwise.scala 103:21]
    node _T_21 = and(_T_20, _T_19) @[Bitwise.scala 103:31]
    node _T_22 = bits(_T_16, 5, 0) @[Bitwise.scala 103:46]
    node _T_23 = shl(_T_22, 2) @[Bitwise.scala 103:65]
    node _T_24 = not(_T_19) @[Bitwise.scala 103:77]
    node _T_25 = and(_T_23, _T_24) @[Bitwise.scala 103:75]
    node _T_26 = or(_T_21, _T_25) @[Bitwise.scala 103:39]
    node _T_27 = bits(_T_19, 6, 0) @[Bitwise.scala 102:28]
    node _T_28 = shl(_T_27, 1) @[Bitwise.scala 102:47]
    node _T_29 = xor(_T_19, _T_28) @[Bitwise.scala 102:21]
    node _T_30 = shr(_T_26, 1) @[Bitwise.scala 103:21]
    node _T_31 = and(_T_30, _T_29) @[Bitwise.scala 103:31]
    node _T_32 = bits(_T_26, 6, 0) @[Bitwise.scala 103:46]
    node _T_33 = shl(_T_32, 1) @[Bitwise.scala 103:65]
    node _T_34 = not(_T_29) @[Bitwise.scala 103:77]
    node _T_35 = and(_T_33, _T_34) @[Bitwise.scala 103:75]
    node _T_36 = or(_T_31, _T_35) @[Bitwise.scala 103:39]
    node _T_37 = bits(_T_6, 11, 8) @[Bitwise.scala 109:44]
    node _T_38 = bits(_T_37, 1, 0) @[Bitwise.scala 109:18]
    node _T_39 = bits(_T_38, 0, 0) @[Bitwise.scala 109:18]
    node _T_40 = bits(_T_38, 1, 1) @[Bitwise.scala 109:44]
    node _T_41 = cat(_T_39, _T_40) @[Cat.scala 29:58]
    node _T_42 = bits(_T_37, 3, 2) @[Bitwise.scala 109:44]
    node _T_43 = bits(_T_42, 0, 0) @[Bitwise.scala 109:18]
    node _T_44 = bits(_T_42, 1, 1) @[Bitwise.scala 109:44]
    node _T_45 = cat(_T_43, _T_44) @[Cat.scala 29:58]
    node _T_46 = cat(_T_41, _T_45) @[Cat.scala 29:58]
    node _T_47 = cat(_T_36, _T_46) @[Cat.scala 29:58]
    node _T_48 = or(_T_47, doShiftSigDown1) @[RoundAnyRawFNToRecFN.scala 157:23]
    node _T_49 = cat(_T_48, UInt<2>("h3")) @[Cat.scala 29:58]
    node _T_50 = shr(_T_49, 1) @[RoundAnyRawFNToRecFN.scala 160:57]
    node _T_51 = cat(UInt<1>("h0"), _T_50) @[Cat.scala 29:58]
    node _T_52 = not(_T_51) @[RoundAnyRawFNToRecFN.scala 161:28]
    node _T_53 = and(_T_52, _T_49) @[RoundAnyRawFNToRecFN.scala 161:46]
    node _T_54 = and(adjustedSig, _T_53) @[RoundAnyRawFNToRecFN.scala 162:40]
    node _T_55 = orr(_T_54) @[RoundAnyRawFNToRecFN.scala 162:56]
    node _T_56 = and(adjustedSig, _T_51) @[RoundAnyRawFNToRecFN.scala 163:42]
    node _T_57 = orr(_T_56) @[RoundAnyRawFNToRecFN.scala 163:62]
    node _T_58 = or(_T_55, _T_57) @[RoundAnyRawFNToRecFN.scala 164:36]
    node _T_59 = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 167:38]
    node _T_60 = and(_T_59, _T_55) @[RoundAnyRawFNToRecFN.scala 167:67]
    node _T_61 = and(roundMagUp, _T_58) @[RoundAnyRawFNToRecFN.scala 169:29]
    node _T_62 = or(_T_60, _T_61) @[RoundAnyRawFNToRecFN.scala 168:31]
    node _T_63 = or(adjustedSig, _T_49) @[RoundAnyRawFNToRecFN.scala 172:32]
    node _T_64 = shr(_T_63, 2) @[RoundAnyRawFNToRecFN.scala 172:44]
    node _T_65 = add(_T_64, UInt<1>("h1")) @[RoundAnyRawFNToRecFN.scala 172:49]
    node _T_66 = and(roundingMode_near_even, _T_55) @[RoundAnyRawFNToRecFN.scala 173:49]
    node _T_67 = eq(_T_57, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 174:30]
    node _T_68 = and(_T_66, _T_67) @[RoundAnyRawFNToRecFN.scala 173:64]
    node _T_69 = shr(_T_49, 1) @[RoundAnyRawFNToRecFN.scala 175:35]
    node _T_70 = mux(_T_68, _T_69, UInt<13>("h0")) @[RoundAnyRawFNToRecFN.scala 173:25]
    node _T_71 = not(_T_70) @[RoundAnyRawFNToRecFN.scala 173:21]
    node _T_72 = and(_T_65, _T_71) @[RoundAnyRawFNToRecFN.scala 172:61]
    node _T_73 = not(_T_49) @[RoundAnyRawFNToRecFN.scala 178:32]
    node _T_74 = and(adjustedSig, _T_73) @[RoundAnyRawFNToRecFN.scala 178:30]
    node _T_75 = shr(_T_74, 2) @[RoundAnyRawFNToRecFN.scala 178:43]
    node _T_76 = and(roundingMode_odd, _T_58) @[RoundAnyRawFNToRecFN.scala 179:42]
    node _T_77 = shr(_T_53, 1) @[RoundAnyRawFNToRecFN.scala 179:67]
    node _T_78 = mux(_T_76, _T_77, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 179:24]
    node _T_79 = or(_T_75, _T_78) @[RoundAnyRawFNToRecFN.scala 178:47]
    node _T_80 = mux(_T_62, _T_72, _T_79) @[RoundAnyRawFNToRecFN.scala 171:16]
    node _T_81 = shr(_T_80, 11) @[RoundAnyRawFNToRecFN.scala 183:54]
    node _T_82 = cvt(_T_81) @[RoundAnyRawFNToRecFN.scala 183:69]
    node _T_83 = add(io.in.sExp, _T_82) @[RoundAnyRawFNToRecFN.scala 183:40]
    node _T_84 = bits(_T_83, 5, 0) @[RoundAnyRawFNToRecFN.scala 185:37]
    common_expOut <= _T_84 @[RoundAnyRawFNToRecFN.scala 185:23]
    node _T_85 = bits(_T_80, 10, 1) @[RoundAnyRawFNToRecFN.scala 188:27]
    node _T_86 = bits(_T_80, 9, 0) @[RoundAnyRawFNToRecFN.scala 189:27]
    node _T_87 = mux(doShiftSigDown1, _T_85, _T_86) @[RoundAnyRawFNToRecFN.scala 187:16]
    common_fractOut <= _T_87 @[RoundAnyRawFNToRecFN.scala 186:25]
    node _T_88 = shr(_T_83, 4) @[RoundAnyRawFNToRecFN.scala 194:30]
    node _T_89 = geq(_T_88, asSInt(UInt<3>("h3"))) @[RoundAnyRawFNToRecFN.scala 194:50]
    common_overflow <= _T_89 @[RoundAnyRawFNToRecFN.scala 191:25]
    node _T_90 = lt(_T_83, asSInt(UInt<5>("h8"))) @[RoundAnyRawFNToRecFN.scala 198:31]
    common_totalUnderflow <= _T_90 @[RoundAnyRawFNToRecFN.scala 195:31]
    node _T_91 = bits(adjustedSig, 2, 2) @[RoundAnyRawFNToRecFN.scala 201:45]
    node _T_92 = bits(adjustedSig, 1, 1) @[RoundAnyRawFNToRecFN.scala 201:61]
    node _T_93 = mux(doShiftSigDown1, _T_91, _T_92) @[RoundAnyRawFNToRecFN.scala 201:16]
    node _T_94 = bits(adjustedSig, 2, 2) @[RoundAnyRawFNToRecFN.scala 203:44]
    node _T_95 = and(doShiftSigDown1, _T_94) @[RoundAnyRawFNToRecFN.scala 203:30]
    node _T_96 = bits(adjustedSig, 1, 0) @[RoundAnyRawFNToRecFN.scala 203:63]
    node _T_97 = orr(_T_96) @[RoundAnyRawFNToRecFN.scala 203:70]
    node _T_98 = or(_T_95, _T_97) @[RoundAnyRawFNToRecFN.scala 203:49]
    node _T_99 = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 205:38]
    node _T_100 = and(_T_99, _T_93) @[RoundAnyRawFNToRecFN.scala 205:67]
    node _T_101 = and(roundMagUp, _T_98) @[RoundAnyRawFNToRecFN.scala 207:29]
    node _T_102 = or(_T_100, _T_101) @[RoundAnyRawFNToRecFN.scala 206:46]
    node _T_103 = bits(_T_80, 12, 12) @[RoundAnyRawFNToRecFN.scala 210:27]
    node _T_104 = bits(_T_80, 11, 11) @[RoundAnyRawFNToRecFN.scala 211:27]
    node _T_105 = mux(doShiftSigDown1, _T_103, _T_104) @[RoundAnyRawFNToRecFN.scala 209:16]
    node _T_106 = shr(io.in.sExp, 5) @[RoundAnyRawFNToRecFN.scala 218:48]
    node _T_107 = leq(_T_106, asSInt(UInt<1>("h0"))) @[RoundAnyRawFNToRecFN.scala 218:62]
    node _T_108 = and(_T_58, _T_107) @[RoundAnyRawFNToRecFN.scala 218:32]
    node _T_109 = bits(_T_49, 3, 3) @[RoundAnyRawFNToRecFN.scala 219:57]
    node _T_110 = bits(_T_49, 2, 2) @[RoundAnyRawFNToRecFN.scala 219:71]
    node _T_111 = mux(doShiftSigDown1, _T_109, _T_110) @[RoundAnyRawFNToRecFN.scala 219:30]
    node _T_112 = and(_T_108, _T_111) @[RoundAnyRawFNToRecFN.scala 218:74]
    node _T_113 = eq(io.detectTininess, UInt<1>("h1")) @[RoundAnyRawFNToRecFN.scala 220:49]
    node _T_114 = bits(_T_49, 4, 4) @[RoundAnyRawFNToRecFN.scala 222:49]
    node _T_115 = bits(_T_49, 3, 3) @[RoundAnyRawFNToRecFN.scala 223:49]
    node _T_116 = mux(doShiftSigDown1, _T_114, _T_115) @[RoundAnyRawFNToRecFN.scala 221:39]
    node _T_117 = eq(_T_116, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 221:34]
    node _T_118 = and(_T_113, _T_117) @[RoundAnyRawFNToRecFN.scala 220:77]
    node _T_119 = and(_T_118, _T_105) @[RoundAnyRawFNToRecFN.scala 224:38]
    node _T_120 = and(_T_119, _T_55) @[RoundAnyRawFNToRecFN.scala 225:45]
    node _T_121 = and(_T_120, _T_102) @[RoundAnyRawFNToRecFN.scala 225:60]
    node _T_122 = eq(_T_121, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 220:27]
    node _T_123 = and(_T_112, _T_122) @[RoundAnyRawFNToRecFN.scala 219:76]
    node _T_124 = or(common_totalUnderflow, _T_123) @[RoundAnyRawFNToRecFN.scala 215:40]
    common_underflow <= _T_124 @[RoundAnyRawFNToRecFN.scala 213:26]
    node _T_125 = or(common_totalUnderflow, _T_58) @[RoundAnyRawFNToRecFN.scala 228:49]
    common_inexact <= _T_125 @[RoundAnyRawFNToRecFN.scala 228:24]
    node isNaNOut = or(io.invalidExc, io.in.isNaN) @[RoundAnyRawFNToRecFN.scala 233:34]
    node notNaN_isSpecialInfOut = or(io.infiniteExc, io.in.isInf) @[RoundAnyRawFNToRecFN.scala 234:49]
    node _T_126 = eq(isNaNOut, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 235:22]
    node _T_127 = eq(notNaN_isSpecialInfOut, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 235:36]
    node _T_128 = and(_T_126, _T_127) @[RoundAnyRawFNToRecFN.scala 235:33]
    node _T_129 = eq(io.in.isZero, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 235:64]
    node commonCase = and(_T_128, _T_129) @[RoundAnyRawFNToRecFN.scala 235:61]
    node overflow = and(commonCase, common_overflow) @[RoundAnyRawFNToRecFN.scala 236:32]
    node underflow = and(commonCase, common_underflow) @[RoundAnyRawFNToRecFN.scala 237:32]
    node _T_130 = and(commonCase, common_inexact) @[RoundAnyRawFNToRecFN.scala 238:43]
    node inexact = or(overflow, _T_130) @[RoundAnyRawFNToRecFN.scala 238:28]
    node _T_131 = or(roundingMode_near_even, roundingMode_near_maxMag) @[RoundAnyRawFNToRecFN.scala 241:32]
    node overflow_roundMagUp = or(_T_131, roundMagUp) @[RoundAnyRawFNToRecFN.scala 241:60]
    node _T_132 = and(commonCase, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 243:20]
    node _T_133 = or(roundMagUp, roundingMode_odd) @[RoundAnyRawFNToRecFN.scala 243:60]
    node pegMinNonzeroMagOut = and(_T_132, _T_133) @[RoundAnyRawFNToRecFN.scala 243:45]
    node _T_134 = eq(overflow_roundMagUp, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 244:42]
    node pegMaxFiniteMagOut = and(overflow, _T_134) @[RoundAnyRawFNToRecFN.scala 244:39]
    node _T_135 = and(overflow, overflow_roundMagUp) @[RoundAnyRawFNToRecFN.scala 246:45]
    node notNaN_isInfOut = or(notNaN_isSpecialInfOut, _T_135) @[RoundAnyRawFNToRecFN.scala 246:32]
    node signOut = mux(isNaNOut, UInt<1>("h0"), io.in.sign) @[RoundAnyRawFNToRecFN.scala 248:22]
    node _T_136 = or(io.in.isZero, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 251:32]
    node _T_137 = mux(_T_136, UInt<6>("h38"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 251:18]
    node _T_138 = not(_T_137) @[RoundAnyRawFNToRecFN.scala 251:14]
    node _T_139 = and(common_expOut, _T_138) @[RoundAnyRawFNToRecFN.scala 250:24]
    node _T_140 = not(UInt<6>("h8")) @[RoundAnyRawFNToRecFN.scala 256:19]
    node _T_141 = mux(pegMinNonzeroMagOut, _T_140, UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 255:18]
    node _T_142 = not(_T_141) @[RoundAnyRawFNToRecFN.scala 255:14]
    node _T_143 = and(_T_139, _T_142) @[RoundAnyRawFNToRecFN.scala 254:17]
    node _T_144 = mux(pegMaxFiniteMagOut, UInt<6>("h10"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 259:18]
    node _T_145 = not(_T_144) @[RoundAnyRawFNToRecFN.scala 259:14]
    node _T_146 = and(_T_143, _T_145) @[RoundAnyRawFNToRecFN.scala 258:17]
    node _T_147 = mux(notNaN_isInfOut, UInt<6>("h8"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 263:18]
    node _T_148 = not(_T_147) @[RoundAnyRawFNToRecFN.scala 263:14]
    node _T_149 = and(_T_146, _T_148) @[RoundAnyRawFNToRecFN.scala 262:17]
    node _T_150 = mux(pegMinNonzeroMagOut, UInt<6>("h8"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 267:16]
    node _T_151 = or(_T_149, _T_150) @[RoundAnyRawFNToRecFN.scala 266:18]
    node _T_152 = mux(pegMaxFiniteMagOut, UInt<6>("h2f"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 271:16]
    node _T_153 = or(_T_151, _T_152) @[RoundAnyRawFNToRecFN.scala 270:15]
    node _T_154 = mux(notNaN_isInfOut, UInt<6>("h30"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 275:16]
    node _T_155 = or(_T_153, _T_154) @[RoundAnyRawFNToRecFN.scala 274:15]
    node _T_156 = mux(isNaNOut, UInt<6>("h38"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 276:16]
    node expOut = or(_T_155, _T_156) @[RoundAnyRawFNToRecFN.scala 275:77]
    node _T_157 = or(isNaNOut, io.in.isZero) @[RoundAnyRawFNToRecFN.scala 278:22]
    node _T_158 = or(_T_157, common_totalUnderflow) @[RoundAnyRawFNToRecFN.scala 278:38]
    node _T_159 = mux(isNaNOut, UInt<10>("h200"), UInt<1>("h0")) @[RoundAnyRawFNToRecFN.scala 279:16]
    node _T_160 = mux(_T_158, _T_159, common_fractOut) @[RoundAnyRawFNToRecFN.scala 278:12]
    node _T_161 = bits(pegMaxFiniteMagOut, 0, 0) @[Bitwise.scala 72:15]
    node _T_162 = mux(_T_161, UInt<10>("h3ff"), UInt<10>("h0")) @[Bitwise.scala 72:12]
    node fractOut = or(_T_160, _T_162) @[RoundAnyRawFNToRecFN.scala 281:11]
    node _T_163 = cat(signOut, expOut) @[Cat.scala 29:58]
    node _T_164 = cat(_T_163, fractOut) @[Cat.scala 29:58]
    io.out <= _T_164 @[RoundAnyRawFNToRecFN.scala 284:12]
    node _T_165 = cat(underflow, inexact) @[Cat.scala 29:58]
    node _T_166 = cat(io.invalidExc, io.infiniteExc) @[Cat.scala 29:58]
    node _T_167 = cat(_T_166, overflow) @[Cat.scala 29:58]
    node _T_168 = cat(_T_167, _T_165) @[Cat.scala 29:58]
    io.exceptionFlags <= _T_168 @[RoundAnyRawFNToRecFN.scala 285:23]

  module RoundRawFNToRecFN :
    output io : { flip invalidExc : UInt<1>, flip infiniteExc : UInt<1>, flip in : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<7>, sig : UInt<14>}, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, out : UInt<17>, exceptionFlags : UInt<5>}
  
    io is invalid
    inst roundAnyRawFNToRecFN of RoundAnyRawFNToRecFN @[RoundAnyRawFNToRecFN.scala 307:15]
    roundAnyRawFNToRecFN.io is invalid
    roundAnyRawFNToRecFN.io.invalidExc <= io.invalidExc @[RoundAnyRawFNToRecFN.scala 310:44]
    roundAnyRawFNToRecFN.io.infiniteExc <= io.infiniteExc @[RoundAnyRawFNToRecFN.scala 311:44]
    roundAnyRawFNToRecFN.io.in <- io.in @[RoundAnyRawFNToRecFN.scala 312:44]
    roundAnyRawFNToRecFN.io.roundingMode <= io.roundingMode @[RoundAnyRawFNToRecFN.scala 313:44]
    roundAnyRawFNToRecFN.io.detectTininess <= io.detectTininess @[RoundAnyRawFNToRecFN.scala 314:44]
    io.out <= roundAnyRawFNToRecFN.io.out @[RoundAnyRawFNToRecFN.scala 315:23]
    io.exceptionFlags <= roundAnyRawFNToRecFN.io.exceptionFlags @[RoundAnyRawFNToRecFN.scala 316:23]

  module DivSqrtRecFN_small :
    input clock : Clock
    input reset : Reset
    output io : { inReady : UInt<1>, flip inValid : UInt<1>, flip sqrtOp : UInt<1>, flip a : UInt<17>, flip b : UInt<17>, flip roundingMode : UInt<3>, flip detectTininess : UInt<1>, outValid_div : UInt<1>, outValid_sqrt : UInt<1>, out : UInt<17>, exceptionFlags : UInt<5>}
  
    inst divSqrtRecFNToRaw of DivSqrtRecFNToRaw_small @[DivSqrtRecFN_small.scala 460:15]
    divSqrtRecFNToRaw.clock <= clock
    divSqrtRecFNToRaw.reset <= reset
    io.inReady <= divSqrtRecFNToRaw.io.inReady @[DivSqrtRecFN_small.scala 462:16]
    divSqrtRecFNToRaw.io.inValid <= io.inValid @[DivSqrtRecFN_small.scala 463:39]
    divSqrtRecFNToRaw.io.sqrtOp <= io.sqrtOp @[DivSqrtRecFN_small.scala 464:39]
    divSqrtRecFNToRaw.io.a <= io.a @[DivSqrtRecFN_small.scala 465:39]
    divSqrtRecFNToRaw.io.b <= io.b @[DivSqrtRecFN_small.scala 466:39]
    divSqrtRecFNToRaw.io.roundingMode <= io.roundingMode @[DivSqrtRecFN_small.scala 467:39]
    io.outValid_div <= divSqrtRecFNToRaw.io.rawOutValid_div @[DivSqrtRecFN_small.scala 471:22]
    io.outValid_sqrt <= divSqrtRecFNToRaw.io.rawOutValid_sqrt @[DivSqrtRecFN_small.scala 472:22]
    inst roundRawFNToRecFN of RoundRawFNToRecFN @[DivSqrtRecFN_small.scala 475:15]
    roundRawFNToRecFN.io.invalidExc <= divSqrtRecFNToRaw.io.invalidExc @[DivSqrtRecFN_small.scala 476:39]
    roundRawFNToRecFN.io.infiniteExc <= divSqrtRecFNToRaw.io.infiniteExc @[DivSqrtRecFN_small.scala 477:39]
    roundRawFNToRecFN.io.in.sig <= divSqrtRecFNToRaw.io.rawOut.sig @[DivSqrtRecFN_small.scala 478:39]
    roundRawFNToRecFN.io.in.sExp <= divSqrtRecFNToRaw.io.rawOut.sExp @[DivSqrtRecFN_small.scala 478:39]
    roundRawFNToRecFN.io.in.sign <= divSqrtRecFNToRaw.io.rawOut.sign @[DivSqrtRecFN_small.scala 478:39]
    roundRawFNToRecFN.io.in.isZero <= divSqrtRecFNToRaw.io.rawOut.isZero @[DivSqrtRecFN_small.scala 478:39]
    roundRawFNToRecFN.io.in.isInf <= divSqrtRecFNToRaw.io.rawOut.isInf @[DivSqrtRecFN_small.scala 478:39]
    roundRawFNToRecFN.io.in.isNaN <= divSqrtRecFNToRaw.io.rawOut.isNaN @[DivSqrtRecFN_small.scala 478:39]
    roundRawFNToRecFN.io.roundingMode <= divSqrtRecFNToRaw.io.roundingModeOut @[DivSqrtRecFN_small.scala 479:39]
    roundRawFNToRecFN.io.detectTininess <= io.detectTininess @[DivSqrtRecFN_small.scala 480:41]
    io.out <= roundRawFNToRecFN.io.out @[DivSqrtRecFN_small.scala 481:23]
    io.exceptionFlags <= roundRawFNToRecFN.io.exceptionFlags @[DivSqrtRecFN_small.scala 482:23]

  module QueueCompatibility :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : { a : UInt<16>, b : UInt<16>, roundingMode : UInt<3>, detectTininess : UInt<1>, out : UInt<16>, exceptionFlags : UInt<5>}}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : { a : UInt<16>, b : UInt<16>, roundingMode : UInt<3>, detectTininess : UInt<1>, out : UInt<16>, exceptionFlags : UInt<5>}}, count : UInt<3>}
  
    clock is invalid
    reset is invalid
    io is invalid
    cmem ram : { a : UInt<16>, b : UInt<16>, roundingMode : UInt<3>, detectTininess : UInt<1>, out : UInt<16>, exceptionFlags : UInt<5>} [5] @[Decoupled.scala 218:16]
    reg enq_ptr_value : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[Counter.scala 29:33]
    reg deq_ptr_value : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[Counter.scala 29:33]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 221:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 223:33]
    node _T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 224:28]
    node empty = and(ptr_match, _T) @[Decoupled.scala 224:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24]
    node _T_1 = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 40:37]
    wire do_enq : UInt<1>
    do_enq is invalid
    do_enq <= _T_1
    node _T_2 = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 40:37]
    wire do_deq : UInt<1>
    do_deq is invalid
    do_deq <= _T_2
    when do_enq : @[Decoupled.scala 229:17]
      infer mport _T_3 = ram[enq_ptr_value], clock @[Decoupled.scala 230:8]
      _T_3 <- io.enq.bits @[Decoupled.scala 230:24]
      node wrap = eq(enq_ptr_value, UInt<3>("h4")) @[Counter.scala 38:24]
      node _T_4 = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 39:22]
      node _T_5 = tail(_T_4, 1) @[Counter.scala 39:22]
      enq_ptr_value <= _T_5 @[Counter.scala 39:13]
      when wrap : @[Counter.scala 41:21]
        enq_ptr_value <= UInt<1>("h0") @[Counter.scala 41:29]
    when do_deq : @[Decoupled.scala 233:17]
      node wrap_1 = eq(deq_ptr_value, UInt<3>("h4")) @[Counter.scala 38:24]
      node _T_6 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 39:22]
      node _T_7 = tail(_T_6, 1) @[Counter.scala 39:22]
      deq_ptr_value <= _T_7 @[Counter.scala 39:13]
      when wrap_1 : @[Counter.scala 41:21]
        deq_ptr_value <= UInt<1>("h0") @[Counter.scala 41:29]
    node _T_8 = neq(do_enq, do_deq) @[Decoupled.scala 236:16]
    when _T_8 : @[Decoupled.scala 236:28]
      maybe_full <= do_enq @[Decoupled.scala 237:16]
    node _T_9 = eq(empty, UInt<1>("h0")) @[Decoupled.scala 240:19]
    io.deq.valid <= _T_9 @[Decoupled.scala 240:16]
    node _T_10 = eq(full, UInt<1>("h0")) @[Decoupled.scala 241:19]
    io.enq.ready <= _T_10 @[Decoupled.scala 241:16]
    infer mport _T_11 = ram[deq_ptr_value], clock @[Decoupled.scala 242:21]
    io.deq.bits <- _T_11 @[Decoupled.scala 242:15]
    node _T_12 = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 257:32]
    node ptr_diff = tail(_T_12, 1) @[Decoupled.scala 257:32]
    node _T_13 = mux(maybe_full, UInt<3>("h5"), UInt<1>("h0")) @[Decoupled.scala 262:24]
    node _T_14 = gt(deq_ptr_value, enq_ptr_value) @[Decoupled.scala 264:39]
    node _T_15 = add(UInt<3>("h5"), ptr_diff) @[Decoupled.scala 265:38]
    node _T_16 = tail(_T_15, 1) @[Decoupled.scala 265:38]
    node _T_17 = mux(_T_14, _T_16, ptr_diff) @[Decoupled.scala 264:24]
    node _T_18 = mux(ptr_match, _T_13, _T_17) @[Decoupled.scala 261:20]
    io.count <= _T_18 @[Decoupled.scala 261:14]

  module ValExec_DivSqrtRecFN_small_div :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip input : { flip ready : UInt<1>, valid : UInt<1>, bits : { a : UInt<16>, b : UInt<16>, roundingMode : UInt<3>, detectTininess : UInt<1>, out : UInt<16>, exceptionFlags : UInt<5>}}, output : { a : UInt<16>, b : UInt<16>, roundingMode : UInt<3>, detectTininess : UInt<1>}, expected : { out : UInt<16>, exceptionFlags : UInt<5>, recOut : UInt<17>}, actual : { out : UInt<17>, exceptionFlags : UInt<5>}, check : UInt<1>, pass : UInt<1>}
  
    clock is invalid
    reset is invalid
    io is invalid
    inst ds of DivSqrtRecFN_small @[ValExec_DivSqrtRecFN_small.scala 82:20]
    ds.io is invalid
    ds.clock <= clock
    ds.reset <= reset
    inst cq of QueueCompatibility @[ValExec_DivSqrtRecFN_small.scala 83:20]
    cq.io is invalid
    cq.clock <= clock
    cq.reset <= reset
    node _T = and(io.input.valid, ds.io.inReady) @[ValExec_DivSqrtRecFN_small.scala 85:39]
    cq.io.enq.valid <= _T @[ValExec_DivSqrtRecFN_small.scala 85:21]
    cq.io.enq.bits <- io.input.bits @[ValExec_DivSqrtRecFN_small.scala 86:20]
    node _T_1 = and(ds.io.inReady, cq.io.enq.ready) @[ValExec_DivSqrtRecFN_small.scala 88:37]
    io.input.ready <= _T_1 @[ValExec_DivSqrtRecFN_small.scala 88:20]
    node _T_2 = and(io.input.valid, cq.io.enq.ready) @[ValExec_DivSqrtRecFN_small.scala 89:37]
    ds.io.inValid <= _T_2 @[ValExec_DivSqrtRecFN_small.scala 89:19]
    ds.io.sqrtOp <= UInt<1>("h0") @[ValExec_DivSqrtRecFN_small.scala 90:18]
    node _T_3 = bits(io.input.bits.a, 15, 15) @[rawFloatFromFN.scala 46:22]
    node _T_4 = bits(io.input.bits.a, 14, 10) @[rawFloatFromFN.scala 47:23]
    node _T_5 = bits(io.input.bits.a, 9, 0) @[rawFloatFromFN.scala 48:25]
    node _T_6 = eq(_T_4, UInt<1>("h0")) @[rawFloatFromFN.scala 50:34]
    node _T_7 = eq(_T_5, UInt<1>("h0")) @[rawFloatFromFN.scala 51:38]
    node _T_8 = bits(_T_5, 0, 0) @[primitives.scala 92:52]
    node _T_9 = bits(_T_5, 1, 1) @[primitives.scala 92:52]
    node _T_10 = bits(_T_5, 2, 2) @[primitives.scala 92:52]
    node _T_11 = bits(_T_5, 3, 3) @[primitives.scala 92:52]
    node _T_12 = bits(_T_5, 4, 4) @[primitives.scala 92:52]
    node _T_13 = bits(_T_5, 5, 5) @[primitives.scala 92:52]
    node _T_14 = bits(_T_5, 6, 6) @[primitives.scala 92:52]
    node _T_15 = bits(_T_5, 7, 7) @[primitives.scala 92:52]
    node _T_16 = bits(_T_5, 8, 8) @[primitives.scala 92:52]
    node _T_17 = bits(_T_5, 9, 9) @[primitives.scala 92:52]
    node _T_18 = mux(_T_9, UInt<4>("h8"), UInt<4>("h9")) @[Mux.scala 47:69]
    node _T_19 = mux(_T_10, UInt<3>("h7"), _T_18) @[Mux.scala 47:69]
    node _T_20 = mux(_T_11, UInt<3>("h6"), _T_19) @[Mux.scala 47:69]
    node _T_21 = mux(_T_12, UInt<3>("h5"), _T_20) @[Mux.scala 47:69]
    node _T_22 = mux(_T_13, UInt<3>("h4"), _T_21) @[Mux.scala 47:69]
    node _T_23 = mux(_T_14, UInt<2>("h3"), _T_22) @[Mux.scala 47:69]
    node _T_24 = mux(_T_15, UInt<2>("h2"), _T_23) @[Mux.scala 47:69]
    node _T_25 = mux(_T_16, UInt<1>("h1"), _T_24) @[Mux.scala 47:69]
    node _T_26 = mux(_T_17, UInt<1>("h0"), _T_25) @[Mux.scala 47:69]
    node _T_27 = dshl(_T_5, _T_26) @[rawFloatFromFN.scala 54:36]
    node _T_28 = bits(_T_27, 8, 0) @[rawFloatFromFN.scala 54:47]
    node _T_29 = shl(_T_28, 1) @[rawFloatFromFN.scala 54:64]
    node _T_30 = xor(_T_26, UInt<6>("h3f")) @[rawFloatFromFN.scala 57:26]
    node _T_31 = mux(_T_6, _T_30, _T_4) @[rawFloatFromFN.scala 56:16]
    node _T_32 = mux(_T_6, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 60:27]
    node _T_33 = or(UInt<5>("h10"), _T_32) @[rawFloatFromFN.scala 60:22]
    node _T_34 = add(_T_31, _T_33) @[rawFloatFromFN.scala 59:15]
    node _T_35 = tail(_T_34, 1) @[rawFloatFromFN.scala 59:15]
    node _T_36 = and(_T_6, _T_7) @[rawFloatFromFN.scala 62:34]
    node _T_37 = bits(_T_35, 5, 4) @[rawFloatFromFN.scala 63:37]
    node _T_38 = eq(_T_37, UInt<2>("h3")) @[rawFloatFromFN.scala 63:62]
    wire _T_39 : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<7>, sig : UInt<12>} @[rawFloatFromFN.scala 65:23]
    _T_39 is invalid @[rawFloatFromFN.scala 65:23]
    node _T_40 = eq(_T_7, UInt<1>("h0")) @[rawFloatFromFN.scala 66:36]
    node _T_41 = and(_T_38, _T_40) @[rawFloatFromFN.scala 66:33]
    _T_39.isNaN <= _T_41 @[rawFloatFromFN.scala 66:20]
    node _T_42 = and(_T_38, _T_7) @[rawFloatFromFN.scala 67:33]
    _T_39.isInf <= _T_42 @[rawFloatFromFN.scala 67:20]
    _T_39.isZero <= _T_36 @[rawFloatFromFN.scala 68:20]
    _T_39.sign <= _T_3 @[rawFloatFromFN.scala 69:20]
    node _T_43 = bits(_T_35, 5, 0) @[rawFloatFromFN.scala 70:34]
    node _T_44 = cvt(_T_43) @[rawFloatFromFN.scala 70:48]
    _T_39.sExp <= _T_44 @[rawFloatFromFN.scala 70:20]
    node _T_45 = eq(_T_36, UInt<1>("h0")) @[rawFloatFromFN.scala 72:29]
    node _T_46 = mux(_T_6, _T_29, _T_5) @[rawFloatFromFN.scala 72:42]
    node _T_47 = cat(UInt<1>("h0"), _T_45) @[Cat.scala 29:58]
    node _T_48 = cat(_T_47, _T_46) @[Cat.scala 29:58]
    _T_39.sig <= _T_48 @[rawFloatFromFN.scala 71:17]
    node _T_49 = bits(_T_39.sExp, 5, 3) @[recFNFromFN.scala 48:53]
    node _T_50 = mux(_T_39.isZero, UInt<3>("h0"), _T_49) @[recFNFromFN.scala 48:16]
    node _T_51 = mux(_T_39.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
    node _T_52 = or(_T_50, _T_51) @[recFNFromFN.scala 48:79]
    node _T_53 = bits(_T_39.sExp, 2, 0) @[recFNFromFN.scala 50:23]
    node _T_54 = bits(_T_39.sig, 9, 0) @[recFNFromFN.scala 51:22]
    node _T_55 = cat(_T_53, _T_54) @[Cat.scala 29:58]
    node _T_56 = cat(_T_39.sign, _T_52) @[Cat.scala 29:58]
    node _T_57 = cat(_T_56, _T_55) @[Cat.scala 29:58]
    ds.io.a <= _T_57 @[ValExec_DivSqrtRecFN_small.scala 91:13]
    node _T_58 = bits(io.input.bits.b, 15, 15) @[rawFloatFromFN.scala 46:22]
    node _T_59 = bits(io.input.bits.b, 14, 10) @[rawFloatFromFN.scala 47:23]
    node _T_60 = bits(io.input.bits.b, 9, 0) @[rawFloatFromFN.scala 48:25]
    node _T_61 = eq(_T_59, UInt<1>("h0")) @[rawFloatFromFN.scala 50:34]
    node _T_62 = eq(_T_60, UInt<1>("h0")) @[rawFloatFromFN.scala 51:38]
    node _T_63 = bits(_T_60, 0, 0) @[primitives.scala 92:52]
    node _T_64 = bits(_T_60, 1, 1) @[primitives.scala 92:52]
    node _T_65 = bits(_T_60, 2, 2) @[primitives.scala 92:52]
    node _T_66 = bits(_T_60, 3, 3) @[primitives.scala 92:52]
    node _T_67 = bits(_T_60, 4, 4) @[primitives.scala 92:52]
    node _T_68 = bits(_T_60, 5, 5) @[primitives.scala 92:52]
    node _T_69 = bits(_T_60, 6, 6) @[primitives.scala 92:52]
    node _T_70 = bits(_T_60, 7, 7) @[primitives.scala 92:52]
    node _T_71 = bits(_T_60, 8, 8) @[primitives.scala 92:52]
    node _T_72 = bits(_T_60, 9, 9) @[primitives.scala 92:52]
    node _T_73 = mux(_T_64, UInt<4>("h8"), UInt<4>("h9")) @[Mux.scala 47:69]
    node _T_74 = mux(_T_65, UInt<3>("h7"), _T_73) @[Mux.scala 47:69]
    node _T_75 = mux(_T_66, UInt<3>("h6"), _T_74) @[Mux.scala 47:69]
    node _T_76 = mux(_T_67, UInt<3>("h5"), _T_75) @[Mux.scala 47:69]
    node _T_77 = mux(_T_68, UInt<3>("h4"), _T_76) @[Mux.scala 47:69]
    node _T_78 = mux(_T_69, UInt<2>("h3"), _T_77) @[Mux.scala 47:69]
    node _T_79 = mux(_T_70, UInt<2>("h2"), _T_78) @[Mux.scala 47:69]
    node _T_80 = mux(_T_71, UInt<1>("h1"), _T_79) @[Mux.scala 47:69]
    node _T_81 = mux(_T_72, UInt<1>("h0"), _T_80) @[Mux.scala 47:69]
    node _T_82 = dshl(_T_60, _T_81) @[rawFloatFromFN.scala 54:36]
    node _T_83 = bits(_T_82, 8, 0) @[rawFloatFromFN.scala 54:47]
    node _T_84 = shl(_T_83, 1) @[rawFloatFromFN.scala 54:64]
    node _T_85 = xor(_T_81, UInt<6>("h3f")) @[rawFloatFromFN.scala 57:26]
    node _T_86 = mux(_T_61, _T_85, _T_59) @[rawFloatFromFN.scala 56:16]
    node _T_87 = mux(_T_61, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 60:27]
    node _T_88 = or(UInt<5>("h10"), _T_87) @[rawFloatFromFN.scala 60:22]
    node _T_89 = add(_T_86, _T_88) @[rawFloatFromFN.scala 59:15]
    node _T_90 = tail(_T_89, 1) @[rawFloatFromFN.scala 59:15]
    node _T_91 = and(_T_61, _T_62) @[rawFloatFromFN.scala 62:34]
    node _T_92 = bits(_T_90, 5, 4) @[rawFloatFromFN.scala 63:37]
    node _T_93 = eq(_T_92, UInt<2>("h3")) @[rawFloatFromFN.scala 63:62]
    wire _T_94 : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<7>, sig : UInt<12>} @[rawFloatFromFN.scala 65:23]
    _T_94 is invalid @[rawFloatFromFN.scala 65:23]
    node _T_95 = eq(_T_62, UInt<1>("h0")) @[rawFloatFromFN.scala 66:36]
    node _T_96 = and(_T_93, _T_95) @[rawFloatFromFN.scala 66:33]
    _T_94.isNaN <= _T_96 @[rawFloatFromFN.scala 66:20]
    node _T_97 = and(_T_93, _T_62) @[rawFloatFromFN.scala 67:33]
    _T_94.isInf <= _T_97 @[rawFloatFromFN.scala 67:20]
    _T_94.isZero <= _T_91 @[rawFloatFromFN.scala 68:20]
    _T_94.sign <= _T_58 @[rawFloatFromFN.scala 69:20]
    node _T_98 = bits(_T_90, 5, 0) @[rawFloatFromFN.scala 70:34]
    node _T_99 = cvt(_T_98) @[rawFloatFromFN.scala 70:48]
    _T_94.sExp <= _T_99 @[rawFloatFromFN.scala 70:20]
    node _T_100 = eq(_T_91, UInt<1>("h0")) @[rawFloatFromFN.scala 72:29]
    node _T_101 = mux(_T_61, _T_84, _T_60) @[rawFloatFromFN.scala 72:42]
    node _T_102 = cat(UInt<1>("h0"), _T_100) @[Cat.scala 29:58]
    node _T_103 = cat(_T_102, _T_101) @[Cat.scala 29:58]
    _T_94.sig <= _T_103 @[rawFloatFromFN.scala 71:17]
    node _T_104 = bits(_T_94.sExp, 5, 3) @[recFNFromFN.scala 48:53]
    node _T_105 = mux(_T_94.isZero, UInt<3>("h0"), _T_104) @[recFNFromFN.scala 48:16]
    node _T_106 = mux(_T_94.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
    node _T_107 = or(_T_105, _T_106) @[recFNFromFN.scala 48:79]
    node _T_108 = bits(_T_94.sExp, 2, 0) @[recFNFromFN.scala 50:23]
    node _T_109 = bits(_T_94.sig, 9, 0) @[recFNFromFN.scala 51:22]
    node _T_110 = cat(_T_108, _T_109) @[Cat.scala 29:58]
    node _T_111 = cat(_T_94.sign, _T_107) @[Cat.scala 29:58]
    node _T_112 = cat(_T_111, _T_110) @[Cat.scala 29:58]
    ds.io.b <= _T_112 @[ValExec_DivSqrtRecFN_small.scala 92:13]
    ds.io.roundingMode <= io.input.bits.roundingMode @[ValExec_DivSqrtRecFN_small.scala 93:26]
    ds.io.detectTininess <= io.input.bits.detectTininess @[ValExec_DivSqrtRecFN_small.scala 94:26]
    io.output.a <= cq.io.deq.bits.a @[ValExec_DivSqrtRecFN_small.scala 96:17]
    io.output.b <= cq.io.deq.bits.b @[ValExec_DivSqrtRecFN_small.scala 97:17]
    io.output.roundingMode <= cq.io.deq.bits.roundingMode @[ValExec_DivSqrtRecFN_small.scala 98:30]
    io.output.detectTininess <= cq.io.deq.bits.detectTininess @[ValExec_DivSqrtRecFN_small.scala 99:30]
    io.expected.out <= cq.io.deq.bits.out @[ValExec_DivSqrtRecFN_small.scala 101:21]
    io.expected.exceptionFlags <= cq.io.deq.bits.exceptionFlags @[ValExec_DivSqrtRecFN_small.scala 102:32]
    node _T_113 = bits(cq.io.deq.bits.out, 15, 15) @[rawFloatFromFN.scala 46:22]
    node _T_114 = bits(cq.io.deq.bits.out, 14, 10) @[rawFloatFromFN.scala 47:23]
    node _T_115 = bits(cq.io.deq.bits.out, 9, 0) @[rawFloatFromFN.scala 48:25]
    node _T_116 = eq(_T_114, UInt<1>("h0")) @[rawFloatFromFN.scala 50:34]
    node _T_117 = eq(_T_115, UInt<1>("h0")) @[rawFloatFromFN.scala 51:38]
    node _T_118 = bits(_T_115, 0, 0) @[primitives.scala 92:52]
    node _T_119 = bits(_T_115, 1, 1) @[primitives.scala 92:52]
    node _T_120 = bits(_T_115, 2, 2) @[primitives.scala 92:52]
    node _T_121 = bits(_T_115, 3, 3) @[primitives.scala 92:52]
    node _T_122 = bits(_T_115, 4, 4) @[primitives.scala 92:52]
    node _T_123 = bits(_T_115, 5, 5) @[primitives.scala 92:52]
    node _T_124 = bits(_T_115, 6, 6) @[primitives.scala 92:52]
    node _T_125 = bits(_T_115, 7, 7) @[primitives.scala 92:52]
    node _T_126 = bits(_T_115, 8, 8) @[primitives.scala 92:52]
    node _T_127 = bits(_T_115, 9, 9) @[primitives.scala 92:52]
    node _T_128 = mux(_T_119, UInt<4>("h8"), UInt<4>("h9")) @[Mux.scala 47:69]
    node _T_129 = mux(_T_120, UInt<3>("h7"), _T_128) @[Mux.scala 47:69]
    node _T_130 = mux(_T_121, UInt<3>("h6"), _T_129) @[Mux.scala 47:69]
    node _T_131 = mux(_T_122, UInt<3>("h5"), _T_130) @[Mux.scala 47:69]
    node _T_132 = mux(_T_123, UInt<3>("h4"), _T_131) @[Mux.scala 47:69]
    node _T_133 = mux(_T_124, UInt<2>("h3"), _T_132) @[Mux.scala 47:69]
    node _T_134 = mux(_T_125, UInt<2>("h2"), _T_133) @[Mux.scala 47:69]
    node _T_135 = mux(_T_126, UInt<1>("h1"), _T_134) @[Mux.scala 47:69]
    node _T_136 = mux(_T_127, UInt<1>("h0"), _T_135) @[Mux.scala 47:69]
    node _T_137 = dshl(_T_115, _T_136) @[rawFloatFromFN.scala 54:36]
    node _T_138 = bits(_T_137, 8, 0) @[rawFloatFromFN.scala 54:47]
    node _T_139 = shl(_T_138, 1) @[rawFloatFromFN.scala 54:64]
    node _T_140 = xor(_T_136, UInt<6>("h3f")) @[rawFloatFromFN.scala 57:26]
    node _T_141 = mux(_T_116, _T_140, _T_114) @[rawFloatFromFN.scala 56:16]
    node _T_142 = mux(_T_116, UInt<2>("h2"), UInt<1>("h1")) @[rawFloatFromFN.scala 60:27]
    node _T_143 = or(UInt<5>("h10"), _T_142) @[rawFloatFromFN.scala 60:22]
    node _T_144 = add(_T_141, _T_143) @[rawFloatFromFN.scala 59:15]
    node _T_145 = tail(_T_144, 1) @[rawFloatFromFN.scala 59:15]
    node _T_146 = and(_T_116, _T_117) @[rawFloatFromFN.scala 62:34]
    node _T_147 = bits(_T_145, 5, 4) @[rawFloatFromFN.scala 63:37]
    node _T_148 = eq(_T_147, UInt<2>("h3")) @[rawFloatFromFN.scala 63:62]
    wire _T_149 : { isNaN : UInt<1>, isInf : UInt<1>, isZero : UInt<1>, sign : UInt<1>, sExp : SInt<7>, sig : UInt<12>} @[rawFloatFromFN.scala 65:23]
    _T_149 is invalid @[rawFloatFromFN.scala 65:23]
    node _T_150 = eq(_T_117, UInt<1>("h0")) @[rawFloatFromFN.scala 66:36]
    node _T_151 = and(_T_148, _T_150) @[rawFloatFromFN.scala 66:33]
    _T_149.isNaN <= _T_151 @[rawFloatFromFN.scala 66:20]
    node _T_152 = and(_T_148, _T_117) @[rawFloatFromFN.scala 67:33]
    _T_149.isInf <= _T_152 @[rawFloatFromFN.scala 67:20]
    _T_149.isZero <= _T_146 @[rawFloatFromFN.scala 68:20]
    _T_149.sign <= _T_113 @[rawFloatFromFN.scala 69:20]
    node _T_153 = bits(_T_145, 5, 0) @[rawFloatFromFN.scala 70:34]
    node _T_154 = cvt(_T_153) @[rawFloatFromFN.scala 70:48]
    _T_149.sExp <= _T_154 @[rawFloatFromFN.scala 70:20]
    node _T_155 = eq(_T_146, UInt<1>("h0")) @[rawFloatFromFN.scala 72:29]
    node _T_156 = mux(_T_116, _T_139, _T_115) @[rawFloatFromFN.scala 72:42]
    node _T_157 = cat(UInt<1>("h0"), _T_155) @[Cat.scala 29:58]
    node _T_158 = cat(_T_157, _T_156) @[Cat.scala 29:58]
    _T_149.sig <= _T_158 @[rawFloatFromFN.scala 71:17]
    node _T_159 = bits(_T_149.sExp, 5, 3) @[recFNFromFN.scala 48:53]
    node _T_160 = mux(_T_149.isZero, UInt<3>("h0"), _T_159) @[recFNFromFN.scala 48:16]
    node _T_161 = mux(_T_149.isNaN, UInt<1>("h1"), UInt<1>("h0")) @[recFNFromFN.scala 49:20]
    node _T_162 = or(_T_160, _T_161) @[recFNFromFN.scala 48:79]
    node _T_163 = bits(_T_149.sExp, 2, 0) @[recFNFromFN.scala 50:23]
    node _T_164 = bits(_T_149.sig, 9, 0) @[recFNFromFN.scala 51:22]
    node _T_165 = cat(_T_163, _T_164) @[Cat.scala 29:58]
    node _T_166 = cat(_T_149.sign, _T_162) @[Cat.scala 29:58]
    node _T_167 = cat(_T_166, _T_165) @[Cat.scala 29:58]
    io.expected.recOut <= _T_167 @[ValExec_DivSqrtRecFN_small.scala 103:24]
    io.actual.out <= ds.io.out @[ValExec_DivSqrtRecFN_small.scala 105:19]
    io.actual.exceptionFlags <= ds.io.exceptionFlags @[ValExec_DivSqrtRecFN_small.scala 106:30]
    cq.io.deq.ready <= ds.io.outValid_div @[ValExec_DivSqrtRecFN_small.scala 108:21]
    io.check <= ds.io.outValid_div @[ValExec_DivSqrtRecFN_small.scala 110:14]
    node _T_168 = bits(io.actual.out, 16, 13) @[package.scala 46:22]
    node _T_169 = bits(io.expected.recOut, 16, 13) @[package.scala 47:22]
    node _T_170 = bits(_T_168, 2, 0) @[package.scala 48:19]
    node _T_171 = eq(_T_170, UInt<1>("h0")) @[package.scala 48:26]
    node _T_172 = bits(_T_168, 2, 0) @[package.scala 48:44]
    node _T_173 = eq(_T_172, UInt<3>("h7")) @[package.scala 48:51]
    node _T_174 = or(_T_171, _T_173) @[package.scala 48:35]
    node _T_175 = eq(_T_168, _T_169) @[package.scala 49:20]
    node _T_176 = bits(io.actual.out, 9, 0) @[package.scala 49:36]
    node _T_177 = bits(io.expected.recOut, 9, 0) @[package.scala 49:59]
    node _T_178 = eq(_T_176, _T_177) @[package.scala 49:54]
    node _T_179 = and(_T_175, _T_178) @[package.scala 49:31]
    node _T_180 = bits(_T_168, 2, 0) @[package.scala 50:23]
    node _T_181 = eq(_T_180, UInt<3>("h6")) @[package.scala 50:30]
    node _T_182 = eq(_T_168, _T_169) @[package.scala 50:47]
    node _T_183 = eq(io.actual.out, io.expected.recOut) @[package.scala 50:62]
    node _T_184 = mux(_T_181, _T_182, _T_183) @[package.scala 50:16]
    node _T_185 = mux(_T_174, _T_179, _T_184) @[package.scala 48:12]
    node _T_186 = and(cq.io.deq.valid, _T_185) @[ValExec_DivSqrtRecFN_small.scala 112:25]
    node _T_187 = eq(io.actual.exceptionFlags, io.expected.exceptionFlags) @[ValExec_DivSqrtRecFN_small.scala 114:35]
    node _T_188 = and(_T_186, _T_187) @[ValExec_DivSqrtRecFN_small.scala 113:75]
    io.pass <= _T_188 @[ValExec_DivSqrtRecFN_small.scala 111:13]
